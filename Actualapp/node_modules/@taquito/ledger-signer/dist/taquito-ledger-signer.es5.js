import { prefix, Prefix, b58cencode } from '@taquito/utils';
import sodium from 'libsodium-wrappers';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

/*
 * Some code in this file is adapted from sotez
 * Copyright (c) 2018 Andrew Kishino
 */
var MAX_CHUNK_SIZE = 230;
/**
 *
 * @description Convert the path to a buffer that will be used as LC and CDATA in the APDU send to the ledger device (https://github.com/obsidiansystems/ledger-app-tezos/blob/master/APDUs.md)
 *
 * @param path The ledger derivation path (default is "44'/1729'/0'/0'")
 * @returns A buffer where the first element is the length of the path (default is 4), then 3 bytes for each number of the path to which is added 0x8000000
 */
function transformPathToBuffer(path) {
    var result = [];
    var components = path.split('/');
    components.forEach(function (element) {
        var toNumber = parseInt(element, 10);
        if (Number.isNaN(toNumber)) {
            return;
        }
        if (element.length > 1 && element[element.length - 1] === "'") {
            toNumber += 0x80000000;
        }
        result.push(toNumber);
    });
    var buffer = Buffer.alloc(1 + result.length * 4);
    buffer[0] = result.length;
    result.forEach(function (element, index) {
        buffer.writeUInt32BE(element, 1 + 4 * index);
    });
    return buffer;
}
/**
 *
 * @description Converts uncompressed ledger key to standard tezos binary representation
 */
function compressPublicKey(publicKey, curve) {
    if (curve === 0x00) {
        publicKey = publicKey.slice(1);
    }
    else {
        publicKey[0] = 0x02 + (publicKey[64] & 0x01);
        publicKey = publicKey.slice(0, 33);
    }
    return publicKey;
}
function appendWatermark(bytes, watermark) {
    var transactionHex = bytes;
    if (typeof watermark !== 'undefined') {
        var hexWatermark = Buffer.from(watermark).toString('hex');
        transactionHex = hexWatermark.concat(bytes);
    }
    return transactionHex;
}
/**
 *
 * @description In order not to exceed the data length allowed by the Ledger device, split the operation into buffers of 230 bytes (max) and add them to the message to send to the Ledger
 * @param messageToSend The message to send to the Ledger device
 * @param operation The operation which will be chunk if its length is over 230 bytes
 * @returns The instruction to send to the Ledger device
 */
function chunkOperation(messageToSend, operation) {
    var offset = 0;
    while (offset !== operation.length) {
        var chunkSize = offset + MAX_CHUNK_SIZE >= operation.length ? operation.length - offset : MAX_CHUNK_SIZE;
        var buff = Buffer.alloc(chunkSize);
        operation.copy(buff, 0, offset, offset + chunkSize);
        messageToSend.push(buff);
        offset += chunkSize;
    }
    return messageToSend;
}
/**
 *
 * @description Verify if the signature returned by the ledger for tz2 and tz3 is valid
 * @param response The signature returned by the Ledger (return from the signWithLedger function)
 * @returns True if valid, false otherwise
 */
function validateResponse(response) {
    var valid = true;
    if (response[0] !== 0x31 && response[0] !== 0x30) {
        valid = false;
    }
    if (response[1] + 4 !== response.length) {
        valid = false;
    }
    if (response[2] !== 0x02) {
        valid = false;
    }
    var rLength = response[3];
    if (response[4 + rLength] !== 0x02) {
        valid = false;
    }
    var idxLengthSVal = 5 + rLength;
    var sLength = response[idxLengthSVal];
    if ((idxLengthSVal + 1 + sLength) + 2 !== response.length) {
        valid = false;
    }
    return valid;
}
/**
 *
 * @description Extract a part of the response returned by the Ledger
 * @param idxLength The index in the response from the Ledger that corresponds to the length of the part to extract
 * @param response The signature returned by the Ledger (return from the signWithLedger function)
 * @returns An object that contains the extracted buffer, the index where it starts in the response and the length of the extracted part
 */
function extractValue(idxLength, response) {
    var buffer = Buffer.alloc(32);
    buffer.fill(0);
    var length = response[idxLength];
    var idxValueStart = idxLength + 1;
    if (length > 32) {
        idxValueStart += length - 32;
        length = 32;
    }
    response.copy(buffer, 32 - length, idxValueStart, idxValueStart + length);
    return { buffer: buffer, idxValueStart: idxValueStart, length: length };
}

// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!
/* tslint:disable */
var VERSION = {
    "commitHash": "a8e9548e650215186f661033b59299ace72c9ee6",
    "version": "9.2.0"
};
/* tslint:enable */

/**
 * @packageDocumentation
 * @module @taquito/ledger-signer
 */
var DerivationType;
(function (DerivationType) {
    DerivationType[DerivationType["ED25519"] = 0] = "ED25519";
    DerivationType[DerivationType["SECP256K1"] = 1] = "SECP256K1";
    DerivationType[DerivationType["P256"] = 2] = "P256"; // tz3
})(DerivationType || (DerivationType = {}));
var HDPathTemplate = function (account) {
    return "44'/1729'/" + account + "'/0'";
};
/**
 *
 * @description Implementation of the Signer interface that will allow signing operation from a Ledger Nano device
 *
 * @param transport A transport instance from LedgerJS libraries depending on the platform used (e.g. Web, Node)
 * @param path The ledger derivation path (default is "44'/1729'/0'/0'")
 * @param prompt Whether to prompt the ledger for public key (default is true)
 * @param derivationType The value which defines the curve to use (DerivationType.ED25519(default), DerivationType.SECP256K1, DerivationType.P256)
 *
 * @example
 * ```
 * import TransportNodeHid from "@ledgerhq/hw-transport-node-hid";
 * const transport = await TransportNodeHid.create();
 * const ledgerSigner = new LedgerSigner(transport, "44'/1729'/0'/0'", false, DerivationType.ED25519);
 * ```
 *
 * @example
 * ```
 * import TransportU2F from "@ledgerhq/hw-transport-u2f";
 * const transport = await TransportU2F.create();
 * const ledgerSigner = new LedgerSigner(transport, "44'/1729'/0'/0'", true, DerivationType.SECP256K1);
 * ```
 */
var LedgerSigner = /** @class */ (function () {
    function LedgerSigner(transport, path, prompt, derivationType) {
        if (path === void 0) { path = "44'/1729'/0'/0'"; }
        if (prompt === void 0) { prompt = true; }
        if (derivationType === void 0) { derivationType = DerivationType.ED25519; }
        this.transport = transport;
        this.path = path;
        this.prompt = prompt;
        this.derivationType = derivationType;
        // constants for APDU requests (https://github.com/obsidiansystems/ledger-app-tezos/blob/master/APDUs.md)
        this.CLA = 0x80; // Instruction class (always 0x80)
        this.INS_GET_PUBLIC_KEY = 0x02; // Instruction code to get the ledger’s internal public key without prompt
        this.INS_PROMPT_PUBLIC_KEY = 0x03; // Instruction code to get the ledger’s internal public key with prompt
        this.INS_SIGN = 0x04; // Sign a message with the ledger’s key
        this.FIRST_MESSAGE_SEQUENCE = 0X00;
        this.LAST_MESSAGE_SEQUENCE = 0X81;
        this.OTHER_MESSAGE_SEQUENCE = 0X01;
        this.transport.setScrambleKey('XTZ');
        if (!path.startsWith("44'/1729'")) {
            throw new Error("The derivation path must start with 44'/1729'");
        }
        if (!Object.values(DerivationType).includes(derivationType)) {
            throw new Error("The derivation type must be DerivationType.ED25519, DerivationType.SECP256K1 or DerivationType.P256");
        }
    }
    LedgerSigner.prototype.publicKeyHash = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this._publicKeyHash) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.publicKey()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (this._publicKeyHash) {
                            return [2 /*return*/, this._publicKeyHash];
                        }
                        throw new Error("Unable to get the public key hash.");
                }
            });
        });
    };
    LedgerSigner.prototype.publicKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            var responseLedger, publicKeyLength, rawPublicKey, compressedPublicKey, prefixes, publicKey, publicKeyHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._publicKey) {
                            return [2 /*return*/, this._publicKey];
                        }
                        return [4 /*yield*/, this.getLedgerpublicKey()];
                    case 1:
                        responseLedger = _a.sent();
                        publicKeyLength = responseLedger[0];
                        rawPublicKey = responseLedger.slice(1, 1 + publicKeyLength);
                        compressedPublicKey = compressPublicKey(rawPublicKey, this.derivationType);
                        prefixes = this.getPrefixes();
                        publicKey = b58cencode(compressedPublicKey, prefixes.prefPk);
                        return [4 /*yield*/, sodium.ready];
                    case 2:
                        _a.sent();
                        publicKeyHash = b58cencode(sodium.crypto_generichash(20, compressedPublicKey), prefixes.prefPkh);
                        this._publicKey = publicKey;
                        this._publicKeyHash = publicKeyHash;
                        return [2 /*return*/, publicKey];
                }
            });
        });
    };
    LedgerSigner.prototype.getLedgerpublicKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ins, responseLedger;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        ins = this.INS_PROMPT_PUBLIC_KEY;
                        if (this.prompt === false) {
                            ins = this.INS_GET_PUBLIC_KEY;
                        }
                        return [4 /*yield*/, this.transport.send(this.CLA, ins, this.FIRST_MESSAGE_SEQUENCE, this.derivationType, transformPathToBuffer(this.path))];
                    case 1:
                        responseLedger = _a.sent();
                        return [2 /*return*/, responseLedger];
                    case 2:
                        _a.sent();
                        throw new Error("Unable to retrieve public key");
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    LedgerSigner.prototype.secretKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Secret key cannot be exposed');
            });
        });
    };
    LedgerSigner.prototype.sign = function (bytes, watermark) {
        return __awaiter(this, void 0, void 0, function () {
            var watermarkedBytes, watermarkedBytes2buff, messageToSend, ledgerResponse, signature, idxLengthRVal, rValue, idxLengthSVal, sValue, signatureBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        watermarkedBytes = appendWatermark(bytes, watermark);
                        watermarkedBytes2buff = Buffer.from(watermarkedBytes, "hex");
                        messageToSend = [];
                        messageToSend.push(transformPathToBuffer(this.path));
                        messageToSend = chunkOperation(messageToSend, watermarkedBytes2buff);
                        return [4 /*yield*/, this.signWithLedger(messageToSend)];
                    case 1:
                        ledgerResponse = _a.sent();
                        if (this.derivationType === DerivationType.ED25519) {
                            signature = ledgerResponse.slice(0, ledgerResponse.length - 2).toString('hex');
                        }
                        else {
                            if (!validateResponse(ledgerResponse)) {
                                throw new Error('Cannot parse ledger response.');
                            }
                            idxLengthRVal = 3;
                            rValue = extractValue(idxLengthRVal, ledgerResponse);
                            idxLengthSVal = rValue.idxValueStart + rValue.length + 1;
                            sValue = extractValue(idxLengthSVal, ledgerResponse);
                            signatureBuffer = Buffer.concat([rValue.buffer, sValue.buffer]);
                            signature = signatureBuffer.toString('hex');
                        }
                        return [2 /*return*/, {
                                bytes: bytes,
                                sig: b58cencode(signature, prefix[Prefix.SIG]),
                                prefixSig: b58cencode(signature, this.getPrefixes().prefSig),
                                sbytes: bytes + signature
                            }];
                }
            });
        });
    };
    LedgerSigner.prototype.signWithLedger = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var ledgerResponse, i, p1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.transport.send(this.CLA, this.INS_SIGN, this.FIRST_MESSAGE_SEQUENCE, this.derivationType, message[0])];
                    case 1:
                        ledgerResponse = _a.sent();
                        i = 1;
                        _a.label = 2;
                    case 2:
                        if (!(i < message.length)) return [3 /*break*/, 5];
                        p1 = (i === message.length - 1) ? this.LAST_MESSAGE_SEQUENCE : this.OTHER_MESSAGE_SEQUENCE;
                        return [4 /*yield*/, this.transport.send(this.CLA, this.INS_SIGN, p1, this.derivationType, message[i])];
                    case 3:
                        ledgerResponse = _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, ledgerResponse];
                }
            });
        });
    };
    LedgerSigner.prototype.getPrefixes = function () {
        if (this.derivationType === DerivationType.ED25519) {
            return {
                prefPk: prefix[Prefix.EDPK],
                prefPkh: prefix[Prefix.TZ1],
                prefSig: prefix[Prefix.EDSIG]
            };
        }
        else if (this.derivationType === DerivationType.SECP256K1) {
            return {
                prefPk: prefix[Prefix.SPPK],
                prefPkh: prefix[Prefix.TZ2],
                prefSig: prefix[Prefix.SPSIG]
            };
        }
        else {
            return {
                prefPk: prefix[Prefix.P2PK],
                prefPkh: prefix[Prefix.TZ3],
                prefSig: prefix[Prefix.P2SIG]
            };
        }
    };
    return LedgerSigner;
}());

export { DerivationType, HDPathTemplate, LedgerSigner, VERSION };
//# sourceMappingURL=taquito-ledger-signer.es5.js.map
