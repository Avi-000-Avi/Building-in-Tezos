[{"/home/avinash/Documents/Actualapp/src/index.js":"1","/home/avinash/Documents/Actualapp/src/App.tsx":"2","/home/avinash/Documents/Actualapp/src/serviceWorker.js":"3","/home/avinash/Documents/Actualapp/src/components/ConnectWallet.tsx":"4","/home/avinash/Documents/Actualapp/src/components/DisconnectWallet.tsx":"5","/home/avinash/Documents/Actualapp/src/components/UpdateContract.tsx":"6","/home/avinash/Documents/Actualapp/src/components/Transfers.tsx":"7"},{"size":485,"mtime":1631114706742,"results":"8","hashOfConfig":"9"},{"size":7614,"mtime":1631128975344,"results":"10","hashOfConfig":"9"},{"size":5086,"mtime":1631114706746,"results":"11","hashOfConfig":"9"},{"size":4192,"mtime":1631114706742,"results":"12","hashOfConfig":"9"},{"size":1460,"mtime":1631114706742,"results":"13","hashOfConfig":"9"},{"size":2390,"mtime":1631114706742,"results":"14","hashOfConfig":"9"},{"size":1795,"mtime":1631114706742,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l3j1lt",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/avinash/Documents/Actualapp/src/index.js",[],"/home/avinash/Documents/Actualapp/src/App.tsx",["32"],"import React, { useState } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport \"./App.css\";\nimport ConnectButton from \"./components/ConnectWallet\";\nimport DisconnectButton from \"./components/DisconnectWallet\";\nimport qrcode from \"qrcode-generator\";\nimport UpdateContract from \"./components/UpdateContract\";\nimport Transfers from \"./components/Transfers\";\nimport styled from 'styled-components';\n\n\nconst Logo = styled.h1`\n  font-size: 4rem;\n  margin-left: 2rem;\n  position: relative;\n  z-index: 2;\n  background: red;\n  transform: skew(-7deg);\n  a {\n    color: white;\n    text-decoration: none;\n    text-transform: uppercase;\n    padding: 0.5rem 1rem;\n  }\n`;\n\nconst HeaderStyles = styled.header`\n  .bar {\n    border-bottom: 1px solid var(--black, black);\n    display: grid;\n    grid-template-columns: auto 1fr;\n    justify-content: space-between;\n    align-items: stretch;\n  }\n`;\n\nenum BeaconConnection {\n  NONE = \"\",\n  LISTENING = \"Listening to P2P channel\",\n  CONNECTED = \"Channel connected\",\n  PERMISSION_REQUEST_SENT = \"Permission request sent, waiting for response\",\n  PERMISSION_REQUEST_SUCCESS = \"Wallet is connected\"\n}\n\nconst App = () => {\n  const [Tezos, setTezos] = useState<TezosToolkit>(\n    new TezosToolkit(\"https://api.tez.ie/rpc/granadanet\")\n  );\n  const [contract, setContract] = useState<any>(undefined);\n  const [publicToken, setPublicToken] = useState<string | null>(\"\");\n  const [wallet, setWallet] = useState<any>(null);\n  const [userAddress, setUserAddress] = useState<string>(\"\");\n  const [userBalance, setUserBalance] = useState<number>(0);\n  const [storage, setStorage] = useState<number>(0);\n  const [copiedPublicToken, setCopiedPublicToken] = useState<boolean>(false);\n  const [beaconConnection, setBeaconConnection] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<string>(\"transfer\");\n\n  // Granadanet Increment/Decrement contract\n  //const contractAddress: string = \"KT1K3XVNzsmur7VRgY8CAHPUENaErzzEpe4e\";\n\n  //Forum Smart Contract\n  const contractAddress: string = \"#KT1CTCf789bvC3ewbgLphn6N8UdYog8zwBSH\";\n\n  const generateQrCode = (): { __html: string } => {\n    const qr = qrcode(0, \"L\");\n    qr.addData(publicToken || \"\");\n    qr.make();\n\n    return { __html: qr.createImgTag(4) };\n  };\n\n  if (publicToken && (!userAddress || isNaN(userBalance))) {\n    return (\n      <div className=\"main-box\">\n        <h1>Taquito Boilerplate</h1>\n        <div id=\"dialog\">\n          <header>Try the Taquito Boilerplate App!</header>\n          <div id=\"content\">\n            <p className=\"text-align-center\">\n              <i className=\"fas fa-broadcast-tower\"></i>&nbsp; Connecting to\n              your wallet\n            </p>\n            <div\n              dangerouslySetInnerHTML={generateQrCode()}\n              className=\"text-align-center\"\n            ></div>\n            <p id=\"public-token\">\n              {copiedPublicToken ? (\n                <span id=\"public-token-copy__copied\">\n                  <i className=\"far fa-thumbs-up\"></i>\n                </span>\n              ) : (\n                <span\n                  id=\"public-token-copy\"\n                  onClick={() => {\n                    if (publicToken) {\n                      navigator.clipboard.writeText(publicToken);\n                      setCopiedPublicToken(true);\n                      setTimeout(() => setCopiedPublicToken(false), 2000);\n                    }\n                  }}\n                >\n                  <i className=\"far fa-copy\"></i>\n                </span>\n              )}\n\n              <span>\n                Public token: <span>{publicToken}</span>\n              </span>\n            </p>\n            <p className=\"text-align-center\">\n              Status: {beaconConnection ? \"Connected\" : \"Disconnected\"}\n            </p>\n          </div>\n        </div>\n        <div id=\"footer\">\n          <img src=\"built-with-taquito.png\" alt=\"Built with Taquito\" />\n        </div>\n      </div>\n    );\n    //if there is a user address \n  } else if (userAddress && !isNaN(userBalance)) {\n    return (\n      <div className=\"\">\n        <h1>Taquito Boilerplate</h1>\n        <div id=\"tabs\">\n          <div\n            id=\"transfer\"\n            className={activeTab === \"transfer\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"transfer\")}\n          >\n            Make a transfer\n          </div>\n          <div\n            id=\"contract\"\n            className={activeTab === \"contract\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"contract\")}\n          >\n            Interact with a contract\n          </div>\n        </div>\n        <div id=\"dialog\">\n          <div id=\"content\">\n            {activeTab === \"transfer\" ? (\n              <div id=\"transfers\">\n                <h3 className=\"text-align-center\">Make a transfer</h3>\n                <Transfers\n                  Tezos={Tezos}\n                  setUserBalance={setUserBalance}\n                  userAddress={userAddress}\n                />\n\n\n              </div>\n            ) : (\n              <div id=\"increment-decrement\">\n                <h3 className=\"text-align-center\">\n                  Current counter: <span>{storage}</span>\n                </h3>\n                <UpdateContract\n                  contract={contract}\n                  setUserBalance={setUserBalance}\n                  Tezos={Tezos}\n                  userAddress={userAddress}\n                  setStorage={setStorage}\n                />\n              </div>\n            )}\n            <p>\n              <i className=\"far fa-file-code\"></i>&nbsp;\n              <a\n                href={`https://better-call.dev/granadanet/${contractAddress}/operations`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {contractAddress}\n              </a>\n            </p>\n            <p>\n              <i className=\"far fa-address-card\"></i>&nbsp; {userAddress}\n            </p>\n            <p>\n              <i className=\"fas fa-piggy-bank\"></i>&nbsp;\n              {(userBalance / 1000000).toLocaleString(\"en-US\")} êœ©\n            </p>\n          </div>\n          <DisconnectButton\n            wallet={wallet}\n            setPublicToken={setPublicToken}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setWallet={setWallet}\n            setTezos={setTezos}\n            setBeaconConnection={setBeaconConnection}\n          />\n        </div>\n        <div id=\"footer\">\n          <img src=\"built-with-taquito.png\" alt=\"Built with Taquito\" />\n        </div>\n      </div>\n    );\n    //When the user hasn't logged in with their wallet\n  } else if (!publicToken && !userAddress && !userBalance) {\n    return (\n      <div style={{margin:'10px'}}>\n        <HeaderStyles>\n      <div className=\"bar\">\n        <Logo>\n          <div>Help Me Please!</div>\n        </Logo>\n       </div>\n    </HeaderStyles>\n        <div id=\"\">\n          <div id=\"content\">\n\n          </div>\n          <ConnectButton\n            Tezos={Tezos}\n            setContract={setContract}\n            setPublicToken={setPublicToken}\n            setWallet={setWallet}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setStorage={setStorage}\n            contractAddress={contractAddress}\n            setBeaconConnection={setBeaconConnection}\n            wallet={wallet}\n          />\n        </div>\n        <div id=\"footer\">\n          <img src=\"built-with-taquito.png\" alt=\"Built with Taquito\" />\n        </div>\n      </div>\n    );\n  } else {\n    return <div>An error has occurred</div>;\n  }\n};\n\nexport default App;\n","/home/avinash/Documents/Actualapp/src/serviceWorker.js",[],"/home/avinash/Documents/Actualapp/src/components/ConnectWallet.tsx",["33"],"import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport {\n  NetworkType,\n  BeaconEvent,\n  defaultEventCallbacks\n} from \"@airgap/beacon-sdk\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport { LedgerSigner } from \"@taquito/ledger-signer\";\n\ntype ButtonProps = {\n  Tezos: TezosToolkit;\n  setContract: Dispatch<SetStateAction<any>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setStorage: Dispatch<SetStateAction<number>>;\n  contractAddress: string;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  wallet: BeaconWallet;\n};\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  wallet\n}: ButtonProps): JSX.Element => {\n  const [loadingNano, setLoadingNano] = useState<boolean>(false);\n\n  const setup = async (userAddress: string): Promise<void> => {\n    setUserAddress(userAddress);\n    // updates balance\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber());\n    // creates contract instance\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage: any = await contract.storage();\n    setContract(contract);\n    setStorage(storage.toNumber());\n  };\n\n  const connectWallet = async (): Promise<void> => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.GRANADANET,\n          rpcUrl: \"https://api.tez.ie/rpc/granadanet\"\n        }\n      });\n      // gets user's address\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectNano = async (): Promise<void> => {\n    try {\n      setLoadingNano(true);\n      const transport = await TransportU2F.create();\n      const ledgerSigner = new LedgerSigner(transport, \"44'/1729'/0'/0'\", true);\n\n      Tezos.setSignerProvider(ledgerSigner);\n\n      //Get the public key and the public key hash from the Ledger\n      const userAddress = await Tezos.signer.publicKeyHash();\n      await setup(userAddress);\n    } catch (error) {\n      console.log(\"Error!\", error);\n      setLoadingNano(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"Taquito Boilerplate\",\n        preferredNetwork: NetworkType.GRANADANET,\n        disableDefaultEvents: true, // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet);\n      // checks if wallet was connected before\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={connectWallet}>\n        <span>\n          <i className=\"fas fa-wallet\"></i>&nbsp; Connect with wallet\n        </span>\n      </button>\n      <button className=\"button\" disabled={loadingNano} onClick={connectNano}>\n        {loadingNano ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Loading, please\n            wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fab fa-usb\"></i>&nbsp; Connect with Ledger Nano\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n","/home/avinash/Documents/Actualapp/src/components/DisconnectWallet.tsx",[],"/home/avinash/Documents/Actualapp/src/components/UpdateContract.tsx",[],"/home/avinash/Documents/Actualapp/src/components/Transfers.tsx",[],{"ruleId":"34","severity":1,"message":"35","line":37,"column":6,"nodeType":"36","messageId":"37","endLine":37,"endColumn":22},{"ruleId":"38","severity":1,"message":"39","line":112,"column":6,"nodeType":"40","endLine":112,"endColumn":8,"suggestions":"41"},"@typescript-eslint/no-unused-vars","'BeaconConnection' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Tezos', 'setBeaconConnection', 'setPublicToken', 'setWallet', and 'setup'. Either include them or remove the dependency array. If 'setWallet' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["42"],{"desc":"43","fix":"44"},"Update the dependencies array to be: [Tezos, setBeaconConnection, setPublicToken, setWallet, setup]",{"range":"45","text":"46"},[3537,3539],"[Tezos, setBeaconConnection, setPublicToken, setWallet, setup]"]