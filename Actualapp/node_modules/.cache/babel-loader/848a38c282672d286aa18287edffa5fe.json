{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable no-console */\nimport { getDebugEnabled } from '../debug'; // Code taken from https://www.bennadel.com/blog/3941-styling-console-log-output-formatting-with-css.htm\n// const echo = (() => {\n//   let queue: any[] = []\n//   const ECHO_TOKEN = {}\n//   const RESET_INPUT = '%c '\n//   const RESET_CSS = ''\n//   // Attach formatting utility method.\n//   function alertFormatting(value: any): any {\n//     queue.push({\n//       value: value,\n//       css:\n//         'display: inline-block ; background-color: #e0005a ; color: #ffffff ; font-weight: bold ; padding: 3px 7px 3px 7px ; border-radius: 3px 3px 3px 3px ;'\n//     })\n//     return ECHO_TOKEN\n//   }\n//   // Attach formatting utility method.\n//   function warningFormatting(value: any): any {\n//     queue.push({\n//       value: value,\n//       css:\n//         'display: inline-block ; background-color: gold ; color: black ; font-weight: bold ; padding: 3px 7px 3px 7px ; border-radius: 3px 3px 3px 3px ;'\n//     })\n//     return ECHO_TOKEN\n//   }\n//   // I provide an echo-based proxy to the given Console Function. This uses an\n//   // internal queue to aggregate values before calling the given Console\n//   // Function with the desired formatting.\n//   function using(consoleFunction: any): any {\n//     function consoleFunctionProxy() {\n//       // As we loop over the arguments, we're going to aggregate a set of\n//       // inputs and modifiers. The Inputs will ultimately be collapsed down\n//       // into a single string that acts as the first console.log parameter\n//       // while the modifiers are then SPREAD into console.log as 2...N.\n//       // --\n//       // NOTE: After each input/modifier pair, I'm adding a RESET pairing.\n//       // This implicitly resets the CSS after every formatted pairing.\n//       var inputs = []\n//       var modifiers = []\n//       for (var i = 0; i < arguments.length; i++) {\n//         // When the formatting utility methods are called, they return\n//         // a special token. This indicates that we should pull the\n//         // corresponding value out of the QUEUE instead of trying to\n//         // output the given argument directly.\n//         if (arguments[i] === ECHO_TOKEN) {\n//           var item = queue.shift()\n//           inputs.push('%c' + item.value, RESET_INPUT)\n//           modifiers.push(item.css, RESET_CSS)\n//           // For every other argument type, output the value directly.\n//         } else {\n//           var arg = arguments[i]\n//           if (typeof arg === 'object' || typeof arg === 'function') {\n//             inputs.push('%o', RESET_INPUT)\n//             modifiers.push(arg, RESET_CSS)\n//           } else {\n//             inputs.push('%c' + arg, RESET_INPUT)\n//             modifiers.push(RESET_CSS, RESET_CSS)\n//           }\n//         }\n//       }\n//       consoleFunction(inputs.join(''), ...modifiers)\n//       // Once we output the aggregated value, reset the queue. This should have\n//       // already been emptied by the .shift() calls; but the explicit reset\n//       // here acts as both a marker of intention as well as a fail-safe.\n//       queue = []\n//     }\n//     return consoleFunctionProxy\n//   }\n//   return {\n//     // Console(ish) functions.\n//     log: using(console.log),\n//     warn: using(console.warn),\n//     error: using(console.error),\n//     trace: using(console.trace),\n//     group: using(console.group),\n//     groupEnd: using(console.groupEnd),\n//     // Formatting functions.\n//     asAlert: alertFormatting,\n//     asWarning: warningFormatting\n//   }\n// })()\n\n/**\n * The logger that is used internally\n */\n\nexport class Logger {\n  constructor(service) {\n    this.name = service;\n  }\n\n  debug(method, ...args) {\n    this._log('debug', method, args);\n  }\n\n  log(method, ...args) {\n    this._log('log', method, args);\n  }\n\n  warn(method, ...args) {\n    this._log('warn', method, args);\n  }\n\n  error(method, ...args) {\n    this._log('error', method, args);\n  }\n\n  _log(type, method, args = []) {\n    if (!getDebugEnabled()) {\n      return;\n    }\n\n    let groupText = `[BEACON] ${new Date().toISOString()} [${this.name}](${method})`;\n    let data = args;\n\n    if (args[0] && typeof args[0] === 'string') {\n      groupText += ` ${args[0]}`;\n      data = args.slice(1);\n    }\n\n    switch (type) {\n      case 'error':\n        console.group(groupText);\n        console.error(...data);\n        break;\n\n      case 'warn':\n        console.group(groupText);\n        console.warn(...data);\n        break;\n\n      case 'debug':\n        console.groupCollapsed(groupText);\n        console.debug(...data);\n        break;\n\n      default:\n        console.group(groupText);\n        console.log(...data);\n    }\n\n    console.groupEnd(); // echo.group(echo.asWarning(`[BEACON] ${message}`))\n    // echo.log(echo.asWarning(`[${this.name}]`), echo.asAlert(`(${method})`), ...args)\n    // echo.groupEnd()\n  }\n\n}","map":{"version":3,"sources":["../../../src/utils/Logger.ts"],"names":[],"mappings":"AAAA;;AACA;AAEA,SAAS,eAAT,QAAgC,UAAhC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEG;;AACH,OAAM,MAAO,MAAP,CAAa;AAGjB,EAAA,WAAA,CAAY,OAAZ,EAA2B;AACzB,SAAK,IAAL,GAAY,OAAZ;AACD;;AAEM,EAAA,KAAK,CAAC,MAAD,EAAiB,GAAG,IAApB,EAA+B;AACzC,SAAK,IAAL,CAAU,OAAV,EAAmB,MAAnB,EAA2B,IAA3B;AACD;;AAEM,EAAA,GAAG,CAAC,MAAD,EAAiB,GAAG,IAApB,EAA+B;AACvC,SAAK,IAAL,CAAU,KAAV,EAAiB,MAAjB,EAAyB,IAAzB;AACD;;AAEM,EAAA,IAAI,CAAC,MAAD,EAAiB,GAAG,IAApB,EAA+B;AACxC,SAAK,IAAL,CAAU,MAAV,EAAkB,MAAlB,EAA0B,IAA1B;AACD;;AAEM,EAAA,KAAK,CAAC,MAAD,EAAiB,GAAG,IAApB,EAA+B;AACzC,SAAK,IAAL,CAAU,OAAV,EAAmB,MAAnB,EAA2B,IAA3B;AACD;;AAEO,EAAA,IAAI,CAAC,IAAD,EAA2C,MAA3C,EAA2D,IAAA,GAAc,EAAzE,EAA2E;AACrF,QAAI,CAAC,eAAe,EAApB,EAAwB;AACtB;AACD;;AAED,QAAI,SAAS,GAAG,YAAY,IAAI,IAAJ,GAAW,WAAX,EAAwB,KAAK,KAAK,IAAI,KAAK,MAAM,GAA7E;AACA,QAAI,IAAI,GAAG,IAAX;;AACA,QAAI,IAAI,CAAC,CAAD,CAAJ,IAAW,OAAO,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAlC,EAA4C;AAC1C,MAAA,SAAS,IAAI,IAAI,IAAI,CAAC,CAAD,CAAG,EAAxB;AACA,MAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CAAP;AACD;;AAED,YAAQ,IAAR;AACE,WAAK,OAAL;AACE,QAAA,OAAO,CAAC,KAAR,CAAc,SAAd;AACA,QAAA,OAAO,CAAC,KAAR,CAAc,GAAG,IAAjB;AACA;;AACF,WAAK,MAAL;AACE,QAAA,OAAO,CAAC,KAAR,CAAc,SAAd;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,GAAG,IAAhB;AACA;;AACF,WAAK,OAAL;AACE,QAAA,OAAO,CAAC,cAAR,CAAuB,SAAvB;AACA,QAAA,OAAO,CAAC,KAAR,CAAc,GAAG,IAAjB;AACA;;AAEF;AACE,QAAA,OAAO,CAAC,KAAR,CAAc,SAAd;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,GAAG,IAAf;AAhBJ;;AAkBA,IAAA,OAAO,CAAC,QAAR,GA9BqF,CAgCrF;AACA;AACA;AACD;;AA1DgB","sourceRoot":"","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-console */\nimport { getDebugEnabled } from '../debug';\n// Code taken from https://www.bennadel.com/blog/3941-styling-console-log-output-formatting-with-css.htm\n// const echo = (() => {\n//   let queue: any[] = []\n//   const ECHO_TOKEN = {}\n//   const RESET_INPUT = '%c '\n//   const RESET_CSS = ''\n//   // Attach formatting utility method.\n//   function alertFormatting(value: any): any {\n//     queue.push({\n//       value: value,\n//       css:\n//         'display: inline-block ; background-color: #e0005a ; color: #ffffff ; font-weight: bold ; padding: 3px 7px 3px 7px ; border-radius: 3px 3px 3px 3px ;'\n//     })\n//     return ECHO_TOKEN\n//   }\n//   // Attach formatting utility method.\n//   function warningFormatting(value: any): any {\n//     queue.push({\n//       value: value,\n//       css:\n//         'display: inline-block ; background-color: gold ; color: black ; font-weight: bold ; padding: 3px 7px 3px 7px ; border-radius: 3px 3px 3px 3px ;'\n//     })\n//     return ECHO_TOKEN\n//   }\n//   // I provide an echo-based proxy to the given Console Function. This uses an\n//   // internal queue to aggregate values before calling the given Console\n//   // Function with the desired formatting.\n//   function using(consoleFunction: any): any {\n//     function consoleFunctionProxy() {\n//       // As we loop over the arguments, we're going to aggregate a set of\n//       // inputs and modifiers. The Inputs will ultimately be collapsed down\n//       // into a single string that acts as the first console.log parameter\n//       // while the modifiers are then SPREAD into console.log as 2...N.\n//       // --\n//       // NOTE: After each input/modifier pair, I'm adding a RESET pairing.\n//       // This implicitly resets the CSS after every formatted pairing.\n//       var inputs = []\n//       var modifiers = []\n//       for (var i = 0; i < arguments.length; i++) {\n//         // When the formatting utility methods are called, they return\n//         // a special token. This indicates that we should pull the\n//         // corresponding value out of the QUEUE instead of trying to\n//         // output the given argument directly.\n//         if (arguments[i] === ECHO_TOKEN) {\n//           var item = queue.shift()\n//           inputs.push('%c' + item.value, RESET_INPUT)\n//           modifiers.push(item.css, RESET_CSS)\n//           // For every other argument type, output the value directly.\n//         } else {\n//           var arg = arguments[i]\n//           if (typeof arg === 'object' || typeof arg === 'function') {\n//             inputs.push('%o', RESET_INPUT)\n//             modifiers.push(arg, RESET_CSS)\n//           } else {\n//             inputs.push('%c' + arg, RESET_INPUT)\n//             modifiers.push(RESET_CSS, RESET_CSS)\n//           }\n//         }\n//       }\n//       consoleFunction(inputs.join(''), ...modifiers)\n//       // Once we output the aggregated value, reset the queue. This should have\n//       // already been emptied by the .shift() calls; but the explicit reset\n//       // here acts as both a marker of intention as well as a fail-safe.\n//       queue = []\n//     }\n//     return consoleFunctionProxy\n//   }\n//   return {\n//     // Console(ish) functions.\n//     log: using(console.log),\n//     warn: using(console.warn),\n//     error: using(console.error),\n//     trace: using(console.trace),\n//     group: using(console.group),\n//     groupEnd: using(console.groupEnd),\n//     // Formatting functions.\n//     asAlert: alertFormatting,\n//     asWarning: warningFormatting\n//   }\n// })()\n/**\n * The logger that is used internally\n */\nexport class Logger {\n    constructor(service) {\n        this.name = service;\n    }\n    debug(method, ...args) {\n        this._log('debug', method, args);\n    }\n    log(method, ...args) {\n        this._log('log', method, args);\n    }\n    warn(method, ...args) {\n        this._log('warn', method, args);\n    }\n    error(method, ...args) {\n        this._log('error', method, args);\n    }\n    _log(type, method, args = []) {\n        if (!getDebugEnabled()) {\n            return;\n        }\n        let groupText = `[BEACON] ${new Date().toISOString()} [${this.name}](${method})`;\n        let data = args;\n        if (args[0] && typeof args[0] === 'string') {\n            groupText += ` ${args[0]}`;\n            data = args.slice(1);\n        }\n        switch (type) {\n            case 'error':\n                console.group(groupText);\n                console.error(...data);\n                break;\n            case 'warn':\n                console.group(groupText);\n                console.warn(...data);\n                break;\n            case 'debug':\n                console.groupCollapsed(groupText);\n                console.debug(...data);\n                break;\n            default:\n                console.group(groupText);\n                console.log(...data);\n        }\n        console.groupEnd();\n        // echo.group(echo.asWarning(`[BEACON] ${message}`))\n        // echo.log(echo.asWarning(`[${this.name}]`), echo.asAlert(`(${method})`), ...args)\n        // echo.groupEnd()\n    }\n}\n//# sourceMappingURL=Logger.js.map"]},"metadata":{},"sourceType":"module"}