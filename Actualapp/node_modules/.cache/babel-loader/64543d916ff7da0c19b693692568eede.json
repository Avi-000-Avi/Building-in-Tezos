{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Serializer } from '../../Serializer';\nimport { ExtensionMessageTarget, NetworkType, availableTransports } from '../..';\nimport { windowRef } from '../../MockWindow';\nimport { getTzip10Link } from '../../utils/get-tzip10-link';\nimport { isAndroid, isIOS } from '../../utils/platform';\nimport { desktopList, extensionList, iOSList, webList } from './wallet-lists';\nconst serializer = new Serializer();\nconst defaultExtensions = ['ookjlbkiijinhpmnjffcofjonbfbgaoc', 'gpfndedineagiepkpinficbcbbgjoenn' // Beacon\n];\nexport var Platform;\n\n(function (Platform) {\n  Platform[Platform[\"DESKTOP\"] = 0] = \"DESKTOP\";\n  Platform[Platform[\"IOS\"] = 1] = \"IOS\";\n  Platform[Platform[\"ANDROID\"] = 2] = \"ANDROID\";\n})(Platform || (Platform = {}));\n\nexport var WalletType;\n\n(function (WalletType) {\n  WalletType[\"IOS\"] = \"ios\";\n  WalletType[\"ANDROID\"] = \"android\";\n  WalletType[\"EXTENSION\"] = \"extension\";\n  WalletType[\"DESKTOP\"] = \"desktop\";\n  WalletType[\"WEB\"] = \"web\";\n})(WalletType || (WalletType = {}));\n/**\n * @internalapi\n *\n */\n\n\nexport class Pairing {\n  static getPlatfrom() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return isAndroid(window) ? Platform.ANDROID : isIOS(window) ? Platform.IOS : Platform.DESKTOP;\n    });\n  }\n\n  static getPairingInfo(pairingPayload, statusUpdateHandler, mobileWalletHandler, platform) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const activePlatform = platform !== null && platform !== void 0 ? platform : yield Pairing.getPlatfrom();\n      const pairingCode = pairingPayload.p2pSyncCode;\n      const postmessageSyncCode = pairingPayload.postmessageSyncCode;\n      const preferredNetwork = pairingPayload.preferredNetwork;\n\n      switch (activePlatform) {\n        case Platform.DESKTOP:\n          return Pairing.getDesktopPairingAlert(pairingCode, statusUpdateHandler, postmessageSyncCode, mobileWalletHandler, preferredNetwork);\n\n        case Platform.IOS:\n          return Pairing.getIOSPairingAlert(pairingCode, statusUpdateHandler, preferredNetwork);\n\n        case Platform.ANDROID:\n          return Pairing.getAndroidPairingAlert(pairingCode, statusUpdateHandler, preferredNetwork);\n\n        default:\n          throw new Error('platform unknown');\n      }\n    });\n  }\n\n  static getDesktopPairingAlert(pairingCode, statusUpdateHandler, postmessageSyncCode, mobileWalletHandler, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const availableExtensions = yield availableTransports.availableExtensions;\n      availableExtensions.forEach(ext => {\n        const index = defaultExtensions.indexOf(ext.id);\n\n        if (index >= 0) {\n          defaultExtensions.splice(index, 1);\n        }\n      });\n      return {\n        walletLists: [{\n          title: 'Browser Extensions',\n          type: WalletType.EXTENSION,\n          wallets: [...availableExtensions.map(app => {\n            var _a, _b, _c, _d, _e;\n\n            const ext = extensionList.find(extEl => extEl.id === app.id);\n            return {\n              key: (_a = ext === null || ext === void 0 ? void 0 : ext.key) !== null && _a !== void 0 ? _a : app.id,\n              name: (_b = app.name) !== null && _b !== void 0 ? _b : ext === null || ext === void 0 ? void 0 : ext.name,\n              logo: (_c = app.iconUrl) !== null && _c !== void 0 ? _c : ext === null || ext === void 0 ? void 0 : ext.logo,\n              shortName: (_d = app.shortName) !== null && _d !== void 0 ? _d : ext === null || ext === void 0 ? void 0 : ext.shortName,\n              color: (_e = app.color) !== null && _e !== void 0 ? _e : ext === null || ext === void 0 ? void 0 : ext.color,\n              enabled: true,\n\n              clickHandler() {\n                return __awaiter(this, void 0, void 0, function* () {\n                  if (postmessageSyncCode) {\n                    const postmessageCode = yield serializer.serialize(yield postmessageSyncCode());\n                    const message = {\n                      target: ExtensionMessageTarget.EXTENSION,\n                      payload: postmessageCode,\n                      targetId: app.id\n                    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n                    windowRef.postMessage(message, windowRef.location.origin);\n                  }\n\n                  statusUpdateHandler(WalletType.EXTENSION, this);\n                });\n              }\n\n            };\n          }), ...extensionList.filter(app => defaultExtensions.some(extId => extId === app.id)).map(app => ({\n            key: app.key,\n            name: app.name,\n            shortName: app.shortName,\n            color: app.color,\n            logo: app.logo,\n            enabled: false,\n            clickHandler: () => {// Don't do anything\n            }\n          }))].sort((a, b) => a.key.localeCompare(b.key))\n        }, {\n          title: 'Desktop & Web Wallets',\n          type: WalletType.DESKTOP,\n          wallets: [...desktopList.map(app => ({\n            key: app.key,\n            name: app.name,\n            shortName: app.shortName,\n            color: app.color,\n            logo: app.logo,\n            enabled: true,\n\n            clickHandler() {\n              return __awaiter(this, void 0, void 0, function* () {\n                const code = yield serializer.serialize(yield pairingCode());\n                const link = getTzip10Link(app.deepLink, code);\n                window.open(link, '_blank');\n                statusUpdateHandler(WalletType.DESKTOP, this, true);\n              });\n            }\n\n          })), ...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))].sort((a, b) => a.key.localeCompare(b.key))\n        }, {\n          title: 'Mobile Wallets',\n          type: WalletType.IOS,\n          wallets: [...iOSList.map(app => ({\n            key: app.key,\n            name: app.name,\n            shortName: app.shortName,\n            color: app.color,\n            logo: app.logo,\n            enabled: true,\n\n            clickHandler() {\n              return __awaiter(this, void 0, void 0, function* () {\n                const code = yield serializer.serialize(yield pairingCode());\n                mobileWalletHandler(code);\n                statusUpdateHandler(WalletType.IOS, this, true);\n              });\n            }\n\n          }))].sort((a, b) => a.key.localeCompare(b.key))\n        }],\n        buttons: []\n      };\n    });\n  }\n\n  static getIOSPairingAlert(pairingCode, statusUpdateHandler, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        walletLists: [{\n          title: 'Mobile Wallets',\n          type: WalletType.IOS,\n          wallets: iOSList.map(app => ({\n            key: app.key,\n            name: app.name,\n            shortName: app.shortName,\n            color: app.color,\n            logo: app.logo,\n            enabled: true,\n\n            clickHandler() {\n              var _a;\n\n              return __awaiter(this, void 0, void 0, function* () {\n                const code = yield serializer.serialize(yield pairingCode());\n                const link = getTzip10Link((_a = app.deepLink) !== null && _a !== void 0 ? _a : app.universalLink, code); // iOS does not trigger deeplinks with `window.open(...)`. The only way is using a normal link. So we have to work around that.\n\n                const a = document.createElement('a');\n                a.setAttribute('href', link);\n                a.dispatchEvent(new MouseEvent('click', {\n                  view: window,\n                  bubbles: true,\n                  cancelable: true\n                }));\n                statusUpdateHandler(WalletType.IOS, this, true);\n              });\n            }\n\n          })).sort((a, b) => a.key.localeCompare(b.key))\n        }, {\n          title: 'Web Wallets',\n          type: WalletType.WEB,\n          wallets: [...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))].sort((a, b) => a.key.localeCompare(b.key))\n        }],\n        buttons: []\n      };\n    });\n  }\n\n  static getAndroidPairingAlert(pairingCode, statusUpdateHandler, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        walletLists: [{\n          title: 'Web Wallets',\n          type: WalletType.WEB,\n          wallets: [...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))].sort((a, b) => a.key.localeCompare(b.key))\n        }],\n        buttons: [{\n          title: 'Mobile Wallets',\n          text: 'Connect Wallet',\n          clickHandler: () => __awaiter(this, void 0, void 0, function* () {\n            const code = yield serializer.serialize(yield pairingCode());\n            const qrLink = getTzip10Link('tezos://', code);\n            window.open(qrLink, '_blank');\n            statusUpdateHandler(WalletType.ANDROID);\n          })\n        }]\n      };\n    });\n  }\n\n  static getWebList(pairingCode, statusUpdateHandler, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return webList.map(app => ({\n        key: app.key,\n        name: app.name,\n        shortName: app.shortName,\n        color: app.color,\n        logo: app.logo,\n        enabled: true,\n\n        clickHandler() {\n          var _a;\n\n          return __awaiter(this, void 0, void 0, function* () {\n            const code = yield serializer.serialize(yield pairingCode());\n            const link = getTzip10Link((_a = app.links[network]) !== null && _a !== void 0 ? _a : app.links[NetworkType.MAINNET], code);\n            window.open(link, '_blank');\n            statusUpdateHandler(WalletType.WEB, this, true);\n          });\n        }\n\n      })).sort((a, b) => a.key.localeCompare(b.key));\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../../src/ui/alert/Pairing.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Serializer } from '../../Serializer';\nimport { ExtensionMessageTarget, NetworkType, availableTransports } from '../..';\nimport { windowRef } from '../../MockWindow';\nimport { getTzip10Link } from '../../utils/get-tzip10-link';\nimport { isAndroid, isIOS } from '../../utils/platform';\nimport { desktopList, extensionList, iOSList, webList } from './wallet-lists';\nconst serializer = new Serializer();\nconst defaultExtensions = [\n    'ookjlbkiijinhpmnjffcofjonbfbgaoc',\n    'gpfndedineagiepkpinficbcbbgjoenn' // Beacon\n];\nexport var Platform;\n(function (Platform) {\n    Platform[Platform[\"DESKTOP\"] = 0] = \"DESKTOP\";\n    Platform[Platform[\"IOS\"] = 1] = \"IOS\";\n    Platform[Platform[\"ANDROID\"] = 2] = \"ANDROID\";\n})(Platform || (Platform = {}));\nexport var WalletType;\n(function (WalletType) {\n    WalletType[\"IOS\"] = \"ios\";\n    WalletType[\"ANDROID\"] = \"android\";\n    WalletType[\"EXTENSION\"] = \"extension\";\n    WalletType[\"DESKTOP\"] = \"desktop\";\n    WalletType[\"WEB\"] = \"web\";\n})(WalletType || (WalletType = {}));\n/**\n * @internalapi\n *\n */\nexport class Pairing {\n    static getPlatfrom() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return isAndroid(window) ? Platform.ANDROID : isIOS(window) ? Platform.IOS : Platform.DESKTOP;\n        });\n    }\n    static getPairingInfo(pairingPayload, statusUpdateHandler, mobileWalletHandler, platform) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const activePlatform = platform !== null && platform !== void 0 ? platform : (yield Pairing.getPlatfrom());\n            const pairingCode = pairingPayload.p2pSyncCode;\n            const postmessageSyncCode = pairingPayload.postmessageSyncCode;\n            const preferredNetwork = pairingPayload.preferredNetwork;\n            switch (activePlatform) {\n                case Platform.DESKTOP:\n                    return Pairing.getDesktopPairingAlert(pairingCode, statusUpdateHandler, postmessageSyncCode, mobileWalletHandler, preferredNetwork);\n                case Platform.IOS:\n                    return Pairing.getIOSPairingAlert(pairingCode, statusUpdateHandler, preferredNetwork);\n                case Platform.ANDROID:\n                    return Pairing.getAndroidPairingAlert(pairingCode, statusUpdateHandler, preferredNetwork);\n                default:\n                    throw new Error('platform unknown');\n            }\n        });\n    }\n    static getDesktopPairingAlert(pairingCode, statusUpdateHandler, postmessageSyncCode, mobileWalletHandler, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const availableExtensions = yield availableTransports.availableExtensions;\n            availableExtensions.forEach((ext) => {\n                const index = defaultExtensions.indexOf(ext.id);\n                if (index >= 0) {\n                    defaultExtensions.splice(index, 1);\n                }\n            });\n            return {\n                walletLists: [\n                    {\n                        title: 'Browser Extensions',\n                        type: WalletType.EXTENSION,\n                        wallets: [\n                            ...availableExtensions.map((app) => {\n                                var _a, _b, _c, _d, _e;\n                                const ext = extensionList.find((extEl) => extEl.id === app.id);\n                                return {\n                                    key: (_a = ext === null || ext === void 0 ? void 0 : ext.key) !== null && _a !== void 0 ? _a : app.id,\n                                    name: (_b = app.name) !== null && _b !== void 0 ? _b : ext === null || ext === void 0 ? void 0 : ext.name,\n                                    logo: (_c = app.iconUrl) !== null && _c !== void 0 ? _c : ext === null || ext === void 0 ? void 0 : ext.logo,\n                                    shortName: (_d = app.shortName) !== null && _d !== void 0 ? _d : ext === null || ext === void 0 ? void 0 : ext.shortName,\n                                    color: (_e = app.color) !== null && _e !== void 0 ? _e : ext === null || ext === void 0 ? void 0 : ext.color,\n                                    enabled: true,\n                                    clickHandler() {\n                                        return __awaiter(this, void 0, void 0, function* () {\n                                            if (postmessageSyncCode) {\n                                                const postmessageCode = yield serializer.serialize(yield postmessageSyncCode());\n                                                const message = {\n                                                    target: ExtensionMessageTarget.EXTENSION,\n                                                    payload: postmessageCode,\n                                                    targetId: app.id\n                                                };\n                                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                                windowRef.postMessage(message, windowRef.location.origin);\n                                            }\n                                            statusUpdateHandler(WalletType.EXTENSION, this);\n                                        });\n                                    }\n                                };\n                            }),\n                            ...extensionList\n                                .filter((app) => defaultExtensions.some((extId) => extId === app.id))\n                                .map((app) => ({\n                                key: app.key,\n                                name: app.name,\n                                shortName: app.shortName,\n                                color: app.color,\n                                logo: app.logo,\n                                enabled: false,\n                                clickHandler: () => {\n                                    // Don't do anything\n                                }\n                            }))\n                        ].sort((a, b) => a.key.localeCompare(b.key))\n                    },\n                    {\n                        title: 'Desktop & Web Wallets',\n                        type: WalletType.DESKTOP,\n                        wallets: [\n                            ...desktopList.map((app) => ({\n                                key: app.key,\n                                name: app.name,\n                                shortName: app.shortName,\n                                color: app.color,\n                                logo: app.logo,\n                                enabled: true,\n                                clickHandler() {\n                                    return __awaiter(this, void 0, void 0, function* () {\n                                        const code = yield serializer.serialize(yield pairingCode());\n                                        const link = getTzip10Link(app.deepLink, code);\n                                        window.open(link, '_blank');\n                                        statusUpdateHandler(WalletType.DESKTOP, this, true);\n                                    });\n                                }\n                            })),\n                            ...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))\n                        ].sort((a, b) => a.key.localeCompare(b.key))\n                    },\n                    {\n                        title: 'Mobile Wallets',\n                        type: WalletType.IOS,\n                        wallets: [\n                            ...iOSList.map((app) => ({\n                                key: app.key,\n                                name: app.name,\n                                shortName: app.shortName,\n                                color: app.color,\n                                logo: app.logo,\n                                enabled: true,\n                                clickHandler() {\n                                    return __awaiter(this, void 0, void 0, function* () {\n                                        const code = yield serializer.serialize(yield pairingCode());\n                                        mobileWalletHandler(code);\n                                        statusUpdateHandler(WalletType.IOS, this, true);\n                                    });\n                                }\n                            }))\n                        ].sort((a, b) => a.key.localeCompare(b.key))\n                    }\n                ],\n                buttons: []\n            };\n        });\n    }\n    static getIOSPairingAlert(pairingCode, statusUpdateHandler, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                walletLists: [\n                    {\n                        title: 'Mobile Wallets',\n                        type: WalletType.IOS,\n                        wallets: iOSList\n                            .map((app) => ({\n                            key: app.key,\n                            name: app.name,\n                            shortName: app.shortName,\n                            color: app.color,\n                            logo: app.logo,\n                            enabled: true,\n                            clickHandler() {\n                                var _a;\n                                return __awaiter(this, void 0, void 0, function* () {\n                                    const code = yield serializer.serialize(yield pairingCode());\n                                    const link = getTzip10Link((_a = app.deepLink) !== null && _a !== void 0 ? _a : app.universalLink, code);\n                                    // iOS does not trigger deeplinks with `window.open(...)`. The only way is using a normal link. So we have to work around that.\n                                    const a = document.createElement('a');\n                                    a.setAttribute('href', link);\n                                    a.dispatchEvent(new MouseEvent('click', { view: window, bubbles: true, cancelable: true }));\n                                    statusUpdateHandler(WalletType.IOS, this, true);\n                                });\n                            }\n                        }))\n                            .sort((a, b) => a.key.localeCompare(b.key))\n                    },\n                    {\n                        title: 'Web Wallets',\n                        type: WalletType.WEB,\n                        wallets: [\n                            ...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))\n                        ].sort((a, b) => a.key.localeCompare(b.key))\n                    }\n                ],\n                buttons: []\n            };\n        });\n    }\n    static getAndroidPairingAlert(pairingCode, statusUpdateHandler, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                walletLists: [\n                    {\n                        title: 'Web Wallets',\n                        type: WalletType.WEB,\n                        wallets: [\n                            ...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))\n                        ].sort((a, b) => a.key.localeCompare(b.key))\n                    }\n                ],\n                buttons: [\n                    {\n                        title: 'Mobile Wallets',\n                        text: 'Connect Wallet',\n                        clickHandler: () => __awaiter(this, void 0, void 0, function* () {\n                            const code = yield serializer.serialize(yield pairingCode());\n                            const qrLink = getTzip10Link('tezos://', code);\n                            window.open(qrLink, '_blank');\n                            statusUpdateHandler(WalletType.ANDROID);\n                        })\n                    }\n                ]\n            };\n        });\n    }\n    static getWebList(pairingCode, statusUpdateHandler, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return webList\n                .map((app) => ({\n                key: app.key,\n                name: app.name,\n                shortName: app.shortName,\n                color: app.color,\n                logo: app.logo,\n                enabled: true,\n                clickHandler() {\n                    var _a;\n                    return __awaiter(this, void 0, void 0, function* () {\n                        const code = yield serializer.serialize(yield pairingCode());\n                        const link = getTzip10Link((_a = app.links[network]) !== null && _a !== void 0 ? _a : app.links[NetworkType.MAINNET], code);\n                        window.open(link, '_blank');\n                        statusUpdateHandler(WalletType.WEB, this, true);\n                    });\n                }\n            }))\n                .sort((a, b) => a.key.localeCompare(b.key));\n        });\n    }\n}\n//# sourceMappingURL=Pairing.js.map"]},"metadata":{},"sourceType":"module"}