{"ast":null,"code":"import * as qrcode from 'qrcode-generator';\nimport { Logger } from './Logger';\nconst logger = new Logger('QR');\n/**\n * Convert data to a QR code\n *\n * @param payload The data to be encoded as a QR code\n * @param type How the QR code will be encoded\n */\n\nexport const getQrData = (payload, type) => {\n  const typeNumber = 0;\n  const errorCorrectionLevel = 'L';\n  const qr = qrcode(typeNumber, errorCorrectionLevel);\n\n  if (payload.length > 500) {\n    logger.warn('getQrData', 'The size of the payload in the QR code is quite long and some devices might not be able to scan it anymore. To reduce the QR size, try using a shorter \"name\", \"appUrl\" and \"iconUrl\"');\n  }\n\n  try {\n    qr.addData(payload);\n    qr.make();\n\n    if (type === 'svg') {\n      return qr.createSvgTag();\n    } else if (type === 'ascii') {\n      const length = qr.getModuleCount();\n      const black = '\\x1B[40m  \\x1B[0m';\n      const white = '\\x1B[47m  \\x1B[0m';\n      const whiteLine = new Array(length + 3).join(white);\n      const blackLine = new Array(length + 3).join(black);\n      let ascii = '';\n      ascii += `${blackLine}\\n`;\n      ascii += `${whiteLine}\\n`;\n\n      for (let x = 0; x < length; x++) {\n        ascii += white;\n\n        for (let y = 0; y < length; y++) {\n          ascii += qr.isDark(x, y) ? black : white;\n        }\n\n        ascii += `${white}\\n`;\n      }\n\n      ascii += whiteLine;\n      ascii += blackLine;\n      return ascii;\n    } else {\n      return qr.createDataURL();\n    }\n  } catch (qrError) {\n    console.error('error', qrError);\n    throw qrError;\n  }\n};","map":{"version":3,"sources":["../../../src/utils/qr.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAZ,MAAwB,kBAAxB;AACA,SAAS,MAAT,QAAuB,UAAvB;AAEA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,IAAX,CAAf;AAEA;;;;;AAKG;;AACH,OAAO,MAAM,SAAS,GAAG,CAAC,OAAD,EAAkB,IAAlB,KAA6D;AACpF,QAAM,UAAU,GAAe,CAA/B;AACA,QAAM,oBAAoB,GAAyB,GAAnD;AACA,QAAM,EAAE,GAAI,MAAc,CAAC,UAAD,EAAa,oBAAb,CAA1B;;AAEA,MAAI,OAAO,CAAC,MAAR,GAAiB,GAArB,EAA0B;AACxB,IAAA,MAAM,CAAC,IAAP,CACE,WADF,EAEE,uLAFF;AAID;;AAED,MAAI;AACF,IAAA,EAAE,CAAC,OAAH,CAAW,OAAX;AACA,IAAA,EAAE,CAAC,IAAH;;AACA,QAAI,IAAI,KAAK,KAAb,EAAoB;AAClB,aAAO,EAAE,CAAC,YAAH,EAAP;AACD,KAFD,MAEO,IAAI,IAAI,KAAK,OAAb,EAAsB;AAC3B,YAAM,MAAM,GAAW,EAAE,CAAC,cAAH,EAAvB;AACA,YAAM,KAAK,GAAG,mBAAd;AACA,YAAM,KAAK,GAAG,mBAAd;AACA,YAAM,SAAS,GAAG,IAAI,KAAJ,CAAU,MAAM,GAAG,CAAnB,EAAsB,IAAtB,CAA2B,KAA3B,CAAlB;AACA,YAAM,SAAS,GAAG,IAAI,KAAJ,CAAU,MAAM,GAAG,CAAnB,EAAsB,IAAtB,CAA2B,KAA3B,CAAlB;AAEA,UAAI,KAAK,GAAG,EAAZ;AACA,MAAA,KAAK,IAAI,GAAG,SAAS,IAArB;AACA,MAAA,KAAK,IAAI,GAAG,SAAS,IAArB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC/B,QAAA,KAAK,IAAI,KAAT;;AAEA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC/B,UAAA,KAAK,IAAI,EAAE,CAAC,MAAH,CAAU,CAAV,EAAa,CAAb,IAAkB,KAAlB,GAA0B,KAAnC;AACD;;AAED,QAAA,KAAK,IAAI,GAAG,KAAK,IAAjB;AACD;;AACD,MAAA,KAAK,IAAI,SAAT;AACA,MAAA,KAAK,IAAI,SAAT;AAEA,aAAO,KAAP;AACD,KAvBM,MAuBA;AACL,aAAO,EAAE,CAAC,aAAH,EAAP;AACD;AACF,GA/BD,CA+BE,OAAO,OAAP,EAAgB;AAChB,IAAA,OAAO,CAAC,KAAR,CAAc,OAAd,EAAuB,OAAvB;AACA,UAAM,OAAN;AACD;AACF,CA/CM","sourceRoot":"","sourcesContent":["import * as qrcode from 'qrcode-generator';\nimport { Logger } from './Logger';\nconst logger = new Logger('QR');\n/**\n * Convert data to a QR code\n *\n * @param payload The data to be encoded as a QR code\n * @param type How the QR code will be encoded\n */\nexport const getQrData = (payload, type) => {\n    const typeNumber = 0;\n    const errorCorrectionLevel = 'L';\n    const qr = qrcode(typeNumber, errorCorrectionLevel);\n    if (payload.length > 500) {\n        logger.warn('getQrData', 'The size of the payload in the QR code is quite long and some devices might not be able to scan it anymore. To reduce the QR size, try using a shorter \"name\", \"appUrl\" and \"iconUrl\"');\n    }\n    try {\n        qr.addData(payload);\n        qr.make();\n        if (type === 'svg') {\n            return qr.createSvgTag();\n        }\n        else if (type === 'ascii') {\n            const length = qr.getModuleCount();\n            const black = '\\x1B[40m  \\x1B[0m';\n            const white = '\\x1B[47m  \\x1B[0m';\n            const whiteLine = new Array(length + 3).join(white);\n            const blackLine = new Array(length + 3).join(black);\n            let ascii = '';\n            ascii += `${blackLine}\\n`;\n            ascii += `${whiteLine}\\n`;\n            for (let x = 0; x < length; x++) {\n                ascii += white;\n                for (let y = 0; y < length; y++) {\n                    ascii += qr.isDark(x, y) ? black : white;\n                }\n                ascii += `${white}\\n`;\n            }\n            ascii += whiteLine;\n            ascii += blackLine;\n            return ascii;\n        }\n        else {\n            return qr.createDataURL();\n        }\n    }\n    catch (qrError) {\n        console.error('error', qrError);\n        throw qrError;\n    }\n};\n//# sourceMappingURL=qr.js.map"]},"metadata":{},"sourceType":"module"}