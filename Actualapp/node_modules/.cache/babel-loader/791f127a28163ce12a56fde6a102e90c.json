{"ast":null,"code":"import stringify from 'fast-json-stable-stringify';\nimport BigNumber from 'bignumber.js';\nimport { b58decode, validateAddress, ValidationResult, encodePubKey, encodeKey, validatePublicKey, encodeKeyHash, validateKeyHash, validateSignature, validateChain } from '@taquito/utils';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __spreadArray(to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n}\n\nvar _a$1; // Retrieve a unique symbol associated with the key from the environment\n// Used in order to identify all object that are of type MichelsonMap even if they come from different module\n\n\nvar michelsonMapTypeSymbol = Symbol.for('taquito-michelson-map-type-symbol');\n\nvar isMapType = function (value) {\n  return 'args' in value && Array.isArray(value.args) && value.args.length === 2;\n};\n\nvar MapTypecheckError =\n/** @class */\nfunction () {\n  function MapTypecheckError(value, type, errorType) {\n    this.value = value;\n    this.type = type;\n    this.name = 'MapTypecheckError';\n    this.message = errorType + \" not compliant with underlying michelson type\";\n  }\n\n  return MapTypecheckError;\n}();\n/**\r\n * @description Michelson Map is an abstraction over the michelson native map. It supports complex Pair as key\r\n */\n\n\nvar MichelsonMap =\n/** @class */\nfunction () {\n  /**\r\n   * @param mapType If specified key and value will be type-checked before being added to the map\r\n   *\r\n   * @example new MichelsonMap({ prim: \"map\", args: [{prim: \"string\"}, {prim: \"int\"}]})\r\n   */\n  function MichelsonMap(mapType) {\n    this.valueMap = new Map();\n    this.keyMap = new Map();\n    this[_a$1] = true;\n\n    if (mapType) {\n      this.setType(mapType);\n    }\n  } // Used to check if an object is a michelson map.\n  // Using instanceof was not working for project that had multiple instance of taquito dependencies\n  // as the class constructor is different\n\n\n  MichelsonMap.isMichelsonMap = function (obj) {\n    return obj && obj[michelsonMapTypeSymbol] === true;\n  };\n\n  MichelsonMap.prototype.setType = function (mapType) {\n    if (!isMapType(mapType)) {\n      throw new Error('mapType is not a valid michelson map type');\n    }\n\n    this.keySchema = new Schema(mapType.args[0]);\n    this.valueSchema = new Schema(mapType.args[1]);\n  };\n\n  MichelsonMap.prototype.removeType = function () {\n    this.keySchema = undefined;\n    this.valueSchema = undefined;\n  };\n\n  MichelsonMap.fromLiteral = function (obj, mapType) {\n    var map = new MichelsonMap(mapType);\n    Object.keys(obj).forEach(function (key) {\n      map.set(key, obj[key]);\n    });\n    return map;\n  };\n\n  MichelsonMap.prototype.typecheckKey = function (key) {\n    if (this.keySchema) {\n      return this.keySchema.Typecheck(key);\n    }\n\n    return true;\n  };\n\n  MichelsonMap.prototype.typecheckValue = function (value) {\n    if (this.valueSchema) {\n      return this.valueSchema.Typecheck(value);\n    }\n\n    return true;\n  };\n\n  MichelsonMap.prototype.assertTypecheckValue = function (value) {\n    if (!this.typecheckValue(value)) {\n      throw new MapTypecheckError(value, this.valueSchema, 'value');\n    }\n  };\n\n  MichelsonMap.prototype.assertTypecheckKey = function (key) {\n    if (!this.typecheckKey(key)) {\n      throw new MapTypecheckError(key, this.keySchema, 'key');\n    }\n  };\n\n  MichelsonMap.prototype.serializeDeterministically = function (key) {\n    return stringify(key);\n  };\n\n  MichelsonMap.prototype.keys = function () {\n    var _b, _c, _d, key, e_1_1;\n\n    var e_1, _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _f.trys.push([0, 5, 6, 7]);\n\n          _b = __values(this.entries()), _c = _b.next();\n          _f.label = 1;\n\n        case 1:\n          if (!!_c.done) return [3\n          /*break*/\n          , 4];\n          _d = __read(_c.value, 1), key = _d[0];\n          return [4\n          /*yield*/\n          , key];\n\n        case 2:\n          _f.sent();\n\n          _f.label = 3;\n\n        case 3:\n          _c = _b.next();\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [3\n          /*break*/\n          , 7];\n\n        case 5:\n          e_1_1 = _f.sent();\n          e_1 = {\n            error: e_1_1\n          };\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          try {\n            if (_c && !_c.done && (_e = _b.return)) _e.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n\n          return [7\n          /*endfinally*/\n          ];\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n\n  MichelsonMap.prototype.values = function () {\n    var _b, _c, _d, value, e_2_1;\n\n    var e_2, _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _f.trys.push([0, 5, 6, 7]);\n\n          _b = __values(this.entries()), _c = _b.next();\n          _f.label = 1;\n\n        case 1:\n          if (!!_c.done) return [3\n          /*break*/\n          , 4];\n          _d = __read(_c.value, 2), value = _d[1];\n          return [4\n          /*yield*/\n          , value];\n\n        case 2:\n          _f.sent();\n\n          _f.label = 3;\n\n        case 3:\n          _c = _b.next();\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [3\n          /*break*/\n          , 7];\n\n        case 5:\n          e_2_1 = _f.sent();\n          e_2 = {\n            error: e_2_1\n          };\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          try {\n            if (_c && !_c.done && (_e = _b.return)) _e.call(_b);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n\n          return [7\n          /*endfinally*/\n          ];\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n\n  MichelsonMap.prototype.entries = function () {\n    var _b, _c, key, e_3_1;\n\n    var e_3, _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _e.trys.push([0, 5, 6, 7]);\n\n          _b = __values(this.valueMap.keys()), _c = _b.next();\n          _e.label = 1;\n\n        case 1:\n          if (!!_c.done) return [3\n          /*break*/\n          , 4];\n          key = _c.value;\n          return [4\n          /*yield*/\n          , [this.keyMap.get(key), this.valueMap.get(key)]];\n\n        case 2:\n          _e.sent();\n\n          _e.label = 3;\n\n        case 3:\n          _c = _b.next();\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [3\n          /*break*/\n          , 7];\n\n        case 5:\n          e_3_1 = _e.sent();\n          e_3 = {\n            error: e_3_1\n          };\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          try {\n            if (_c && !_c.done && (_d = _b.return)) _d.call(_b);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n\n          return [7\n          /*endfinally*/\n          ];\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n\n  MichelsonMap.prototype.get = function (key) {\n    this.assertTypecheckKey(key);\n    var strKey = this.serializeDeterministically(key);\n    return this.valueMap.get(strKey);\n  };\n  /**\r\n   *\r\n   * @description Set a key and a value in the MichelsonMap. If the key already exists, override the current value.\r\n   *\r\n   * @example map.set(\"myKey\", \"myValue\") // Using a string as key\r\n   *\r\n   * @example map.set({0: \"test\", 1: \"test1\"}, \"myValue\") // Using a pair as key\r\n   *\r\n   * @warn The same key can be represented in multiple ways, depending on the type of the key. This duplicate key situation will cause a runtime error (duplicate key) when sending the map data to the Tezos RPC node.\r\n   *\r\n   * For example, consider a contract with a map whose key is of type boolean.  If you set the following values in MichelsonMap: map.set(false, \"myValue\") and map.set(null, \"myValue\").\r\n   *\r\n   * You will get two unique entries in the MichelsonMap. These values will both be evaluated as falsy by the MichelsonEncoder and ultimately rejected by the Tezos RPC.\r\n   */\n\n\n  MichelsonMap.prototype.set = function (key, value) {\n    this.assertTypecheckKey(key);\n    this.assertTypecheckValue(value);\n    var strKey = this.serializeDeterministically(key);\n    this.keyMap.set(strKey, key);\n    this.valueMap.set(strKey, value);\n  };\n\n  MichelsonMap.prototype.delete = function (key) {\n    this.assertTypecheckKey(key);\n    this.keyMap.delete(this.serializeDeterministically(key));\n    this.valueMap.delete(this.serializeDeterministically(key));\n  };\n\n  MichelsonMap.prototype.has = function (key) {\n    this.assertTypecheckKey(key);\n    var strKey = this.serializeDeterministically(key);\n    return this.keyMap.has(strKey) && this.valueMap.has(strKey);\n  };\n\n  MichelsonMap.prototype.clear = function () {\n    this.keyMap.clear();\n    this.valueMap.clear();\n  };\n\n  Object.defineProperty(MichelsonMap.prototype, \"size\", {\n    get: function () {\n      return this.keyMap.size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MichelsonMap.prototype.forEach = function (cb) {\n    var e_4, _b;\n\n    try {\n      for (var _c = __values(this.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var _e = __read(_d.value, 2),\n            key = _e[0],\n            value = _e[1];\n\n        cb(value, key, this);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n  };\n\n  return MichelsonMap;\n}();\n\n_a$1 = michelsonMapTypeSymbol;\n\nvar TokenValidationError =\n/** @class */\nfunction () {\n  function TokenValidationError(value, token, baseMessage) {\n    this.value = value;\n    this.token = token;\n    this.name = 'ValidationError';\n    var annot = this.token.annot();\n    var annotText = annot ? \"[\" + annot + \"] \" : '';\n    this.message = \"\" + annotText + baseMessage;\n  }\n\n  return TokenValidationError;\n}();\n\nvar Token =\n/** @class */\nfunction () {\n  function Token(val, idx, fac) {\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n    this.createToken = this.fac;\n  }\n\n  Token.prototype.typeWithoutAnnotations = function () {\n    var removeArgsRec = function (val) {\n      if (val.args) {\n        return {\n          prim: val.prim,\n          args: val.args.map(function (x) {\n            return removeArgsRec(x);\n          })\n        };\n      } else {\n        return {\n          prim: val.prim\n        };\n      }\n    };\n\n    return removeArgsRec(this.val);\n  };\n\n  Token.prototype.annot = function () {\n    return (Array.isArray(this.val.annots) && this.val.annots.length > 0 ? this.val.annots[0] : String(this.idx)).replace(/(%|\\:)(_Liq_entry_)?/, '');\n  };\n\n  Token.prototype.hasAnnotations = function () {\n    return Array.isArray(this.val.annots) && this.val.annots.length;\n  };\n\n  Token.prototype.ExtractSignature = function () {\n    return [[this.ExtractSchema()]];\n  };\n\n  return Token;\n}();\n\nvar ComparableToken =\n/** @class */\nfunction (_super) {\n  __extends(ComparableToken, _super);\n\n  function ComparableToken() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ComparableToken.prototype.compare = function (o1, o2) {\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  };\n\n  return ComparableToken;\n}(Token);\n\nvar BigMapValidationError =\n/** @class */\nfunction (_super) {\n  __extends(BigMapValidationError, _super);\n\n  function BigMapValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'BigMapValidationError';\n    return _this;\n  }\n\n  return BigMapValidationError;\n}(TokenValidationError);\n\nvar BigMapToken =\n/** @class */\nfunction (_super) {\n  __extends(BigMapToken, _super);\n\n  function BigMapToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  Object.defineProperty(BigMapToken.prototype, \"ValueSchema\", {\n    get: function () {\n      return this.createToken(this.val.args[1], 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BigMapToken.prototype, \"KeySchema\", {\n    get: function () {\n      return this.createToken(this.val.args[0], 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BigMapToken.prototype.ExtractSchema = function () {\n    var _a;\n\n    return _a = {}, _a[this.KeySchema.ExtractSchema()] = this.ValueSchema.ExtractSchema(), _a;\n  };\n\n  BigMapToken.prototype.isValid = function (value) {\n    if (MichelsonMap.isMichelsonMap(value)) {\n      return null;\n    }\n\n    return new BigMapValidationError(value, this, 'Value must be a MichelsonMap');\n  };\n\n  BigMapToken.prototype.Encode = function (args) {\n    var _this = this;\n\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys()).sort(function (a, b) {\n      return _this.KeySchema.compare(a, b);\n    }).map(function (key) {\n      return {\n        prim: 'Elt',\n        args: [_this.KeySchema.EncodeObject(key), _this.ValueSchema.EncodeObject(val.get(key))]\n      };\n    });\n  };\n\n  BigMapToken.prototype.EncodeObject = function (args) {\n    var _this = this;\n\n    var val = args;\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys()).sort(function (a, b) {\n      return _this.KeySchema.compare(a, b);\n    }).map(function (key) {\n      return {\n        prim: 'Elt',\n        args: [_this.KeySchema.EncodeObject(key), _this.ValueSchema.EncodeObject(val.get(key))]\n      };\n    });\n  };\n\n  BigMapToken.prototype.Execute = function (val, semantic) {\n    var _this = this;\n\n    if (semantic && semantic[BigMapToken.prim]) {\n      return semantic[BigMapToken.prim](val, this.val);\n    }\n\n    if (Array.isArray(val)) {\n      // Athens is returning an empty array for big map in storage\n      // Internal: In taquito v5 it is still used to decode big map diff (as if they were a regular map)\n      var map_1 = new MichelsonMap(this.val);\n      val.forEach(function (current) {\n        map_1.set(_this.KeySchema.ToKey(current.args[0]), _this.ValueSchema.Execute(current.args[1]));\n      });\n      return map_1;\n    } else if ('int' in val) {\n      // Babylon is returning an int with the big map id in contract storage\n      return val.int;\n    } else {\n      // Unknown case\n      throw new Error(\"Big map is expecting either an array (Athens) or an object with an int property (Babylon). Got \" + JSON.stringify(val));\n    }\n  };\n\n  BigMapToken.prim = 'big_map';\n  return BigMapToken;\n}(Token);\n\nvar OrToken =\n/** @class */\nfunction (_super) {\n  __extends(OrToken, _super);\n\n  function OrToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  OrToken.prototype.Encode = function (args) {\n    var label = args[args.length - 1];\n    var leftToken = this.createToken(this.val.args[0], this.idx);\n    var keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    var rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n      args.pop();\n      return {\n        prim: 'Left',\n        args: [leftToken.Encode(args)]\n      };\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n      args.pop();\n      return {\n        prim: 'Right',\n        args: [rightToken.Encode(args)]\n      };\n    } else {\n      if (leftToken instanceof OrToken) {\n        var val = leftToken.Encode(args);\n\n        if (val) {\n          return {\n            prim: 'Left',\n            args: [val]\n          };\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        var val = rightToken.Encode(args);\n\n        if (val) {\n          return {\n            prim: 'Right',\n            args: [val]\n          };\n        }\n      }\n\n      return null;\n    }\n  };\n\n  OrToken.prototype.ExtractSignature = function () {\n    var e_1, _a, e_2, _b;\n\n    var leftToken = this.createToken(this.val.args[0], this.idx);\n    var keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    var rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n    var newSig = [];\n\n    if (leftToken instanceof OrToken) {\n      newSig.push.apply(newSig, __spreadArray([], __read(leftToken.ExtractSignature())));\n    } else {\n      try {\n        for (var _c = __values(leftToken.ExtractSignature()), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var sig = _d.value;\n          newSig.push(__spreadArray([leftToken.annot()], __read(sig)));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    if (rightToken instanceof OrToken) {\n      newSig.push.apply(newSig, __spreadArray([], __read(rightToken.ExtractSignature())));\n    } else {\n      try {\n        for (var _e = __values(rightToken.ExtractSignature()), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var sig = _f.value;\n          newSig.push(__spreadArray([rightToken.annot()], __read(sig)));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n\n    return newSig;\n  };\n\n  OrToken.prototype.EncodeObject = function (args) {\n    var label = Object.keys(args)[0];\n    var leftToken = this.createToken(this.val.args[0], this.idx);\n    var keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    var rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n      return {\n        prim: 'Left',\n        args: [leftToken.EncodeObject(args[label])]\n      };\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n      return {\n        prim: 'Right',\n        args: [rightToken.EncodeObject(args[label])]\n      };\n    } else {\n      if (leftToken instanceof OrToken) {\n        var val = leftToken.EncodeObject(args);\n\n        if (val) {\n          return {\n            prim: 'Left',\n            args: [val]\n          };\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        var val = rightToken.EncodeObject(args);\n\n        if (val) {\n          return {\n            prim: 'Right',\n            args: [val]\n          };\n        }\n      }\n\n      return null;\n    }\n  };\n\n  OrToken.prototype.Execute = function (val, semantics) {\n    var _a, _b;\n\n    var leftToken = this.createToken(this.val.args[0], this.idx);\n    var keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    var rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (val.prim === 'Right') {\n      if (rightToken instanceof OrToken) {\n        return rightToken.Execute(val.args[0], semantics);\n      } else {\n        return _a = {}, _a[rightToken.annot()] = rightToken.Execute(val.args[0], semantics), _a;\n      }\n    } else if (val.prim === 'Left') {\n      if (leftToken instanceof OrToken) {\n        return leftToken.Execute(val.args[0], semantics);\n      }\n\n      return _b = {}, _b[leftToken.annot()] = leftToken.Execute(val.args[0], semantics), _b;\n    } else {\n      throw new Error(\"Was expecting Left or Right prim but got: \" + val.prim);\n    }\n  };\n\n  OrToken.prototype.traversal = function (getLeftValue, getRightValue, concat) {\n    var _a, _b;\n\n    var leftToken = this.createToken(this.val.args[0], this.idx);\n    var keyCount = 1;\n    var leftValue;\n\n    if (leftToken instanceof OrToken && !leftToken.hasAnnotations()) {\n      leftValue = getLeftValue(leftToken);\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    } else {\n      leftValue = (_a = {}, _a[leftToken.annot()] = getLeftValue(leftToken), _a);\n    }\n\n    var rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n    var rightValue;\n\n    if (rightToken instanceof OrToken && !rightToken.hasAnnotations()) {\n      rightValue = getRightValue(rightToken);\n    } else {\n      rightValue = (_b = {}, _b[rightToken.annot()] = getRightValue(rightToken), _b);\n    }\n\n    var res = concat(leftValue, rightValue);\n    return res;\n  };\n\n  OrToken.prototype.ExtractSchema = function () {\n    return this.traversal(function (leftToken) {\n      return leftToken.ExtractSchema();\n    }, function (rightToken) {\n      return rightToken.ExtractSchema();\n    }, function (leftValue, rightValue) {\n      return __assign(__assign({}, leftValue), rightValue);\n    });\n  };\n\n  OrToken.prototype.findToken = function (label) {\n    var leftToken = this.createToken(this.val.args[0], this.idx);\n    var keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    var rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken) && leftToken instanceof ComparableToken) {\n      return leftToken;\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken) && rightToken instanceof ComparableToken) {\n      return rightToken;\n    } else {\n      if (leftToken instanceof OrToken) {\n        var tok = leftToken.findToken(label);\n\n        if (tok) {\n          return tok;\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        var tok = rightToken.findToken(label);\n\n        if (tok) {\n          return tok;\n        }\n      }\n\n      return null;\n    }\n  };\n\n  OrToken.prototype.compare = function (val1, val2) {\n    var labelVal1 = Object.keys(val1)[0];\n    var labelVal2 = Object.keys(val2)[0];\n\n    if (labelVal1 === labelVal2) {\n      var token = this.findToken(labelVal1);\n\n      if (token instanceof ComparableToken) {\n        return token.compare(val1[labelVal1], val2[labelVal1]);\n      }\n    } else {\n      var encoded1 = JSON.stringify(this.EncodeObject(val1));\n      var encoded2 = JSON.stringify(this.EncodeObject(val2));\n      return encoded1 < encoded2 ? -1 : 1;\n    }\n  };\n\n  OrToken.prototype.ToKey = function (val) {\n    return this.Execute(val);\n  };\n\n  OrToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations()\n    };\n  };\n\n  OrToken.prim = 'or';\n  return OrToken;\n}(ComparableToken); // collapse comb pair\n\n\nfunction collapse$1(val, prim) {\n  if (prim === void 0) {\n    prim = PairToken.prim;\n  }\n\n  if (Array.isArray(val)) {\n    return collapse$1({\n      prim: prim,\n      args: val\n    }, prim);\n  }\n\n  if (val.args === undefined) {\n    throw new Error('Token has no arguments');\n  }\n\n  if (val.args.length > 2) {\n    return [val.args[0], {\n      prim: prim,\n      args: val.args.slice(1)\n    }];\n  }\n\n  return [val.args[0], val.args[1]];\n}\n\nvar PairToken =\n/** @class */\nfunction (_super) {\n  __extends(PairToken, _super);\n\n  function PairToken(val, idx, fac) {\n    return _super.call(this, Array.isArray(val) ? {\n      prim: PairToken.prim,\n      args: val\n    } : val, idx, fac) || this;\n  }\n\n  PairToken.prototype.args = function () {\n    // collapse comb pair\n    return collapse$1(this.val);\n  };\n\n  PairToken.prototype.tokens = function () {\n    var _this = this;\n\n    var cnt = 0;\n    return this.args().map(function (a) {\n      var tok = _this.createToken(a, _this.idx + cnt);\n\n      if (tok instanceof PairToken) {\n        cnt += Object.keys(tok.ExtractSchema()).length;\n      } else {\n        cnt++;\n      }\n\n      return tok;\n    });\n  };\n\n  PairToken.prototype.Encode = function (args) {\n    return {\n      prim: 'Pair',\n      args: this.tokens().map(function (t) {\n        return t.Encode(args);\n      })\n    };\n  };\n\n  PairToken.prototype.ExtractSignature = function () {\n    var e_1, _a, e_2, _b;\n\n    var args = this.args();\n    var leftToken = this.createToken(args[0], this.idx);\n    var keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    var rightToken = this.createToken(args[1], this.idx + keyCount);\n    var newSig = [];\n\n    try {\n      for (var _c = __values(leftToken.ExtractSignature()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var leftSig = _d.value;\n\n        try {\n          for (var _e = (e_2 = void 0, __values(rightToken.ExtractSignature())), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var rightSig = _f.value;\n            newSig.push(__spreadArray(__spreadArray([], __read(leftSig)), __read(rightSig)));\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return newSig;\n  };\n\n  PairToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations()\n    };\n  };\n\n  PairToken.prototype.ToKey = function (val) {\n    return this.Execute(val);\n  };\n\n  PairToken.prototype.EncodeObject = function (args) {\n    var _a = __read(this.tokens(), 2),\n        leftToken = _a[0],\n        rightToken = _a[1];\n\n    var leftValue;\n\n    if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n      leftValue = args;\n    } else {\n      leftValue = args[leftToken.annot()];\n    }\n\n    var rightValue;\n\n    if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n      rightValue = args;\n    } else {\n      rightValue = args[rightToken.annot()];\n    }\n\n    return {\n      prim: 'Pair',\n      args: [leftToken.EncodeObject(leftValue), rightToken.EncodeObject(rightValue)]\n    };\n  };\n\n  PairToken.prototype.traversal = function (getLeftValue, getRightValue) {\n    var _a, _b;\n\n    var args = this.args();\n    var leftToken = this.createToken(args[0], this.idx);\n    var keyCount = 1;\n    var leftValue;\n\n    if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n      leftValue = getLeftValue(leftToken);\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    } else {\n      leftValue = (_a = {}, _a[leftToken.annot()] = getLeftValue(leftToken), _a);\n    }\n\n    var rightToken = this.createToken(args[1], this.idx + keyCount);\n    var rightValue;\n\n    if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n      rightValue = getRightValue(rightToken);\n    } else {\n      rightValue = (_b = {}, _b[rightToken.annot()] = getRightValue(rightToken), _b);\n    }\n\n    var res = __assign(__assign({}, leftValue), rightValue);\n\n    return res;\n  };\n\n  PairToken.prototype.Execute = function (val, semantics) {\n    var args = collapse$1(val, 'Pair');\n    return this.traversal(function (leftToken) {\n      return leftToken.Execute(args[0], semantics);\n    }, function (rightToken) {\n      return rightToken.Execute(args[1], semantics);\n    });\n  };\n\n  PairToken.prototype.ExtractSchema = function () {\n    return this.traversal(function (leftToken) {\n      return leftToken.ExtractSchema();\n    }, function (rightToken) {\n      return rightToken.ExtractSchema();\n    });\n  };\n\n  PairToken.prototype.compare = function (val1, val2) {\n    var _a = __read(this.tokens(), 2),\n        leftToken = _a[0],\n        rightToken = _a[1];\n\n    var getValue = function (token, args) {\n      if (token instanceof PairToken && !token.hasAnnotations()) {\n        return args;\n      } else {\n        return args[token.annot()];\n      }\n    };\n\n    if (leftToken instanceof ComparableToken && rightToken instanceof ComparableToken) {\n      var result = leftToken.compare(getValue(leftToken, val1), getValue(leftToken, val2));\n\n      if (result === 0) {\n        return rightToken.compare(getValue(rightToken, val1), getValue(rightToken, val2));\n      }\n\n      return result;\n    }\n\n    throw new Error('Not a comparable pair');\n  };\n\n  PairToken.prim = 'pair';\n  return PairToken;\n}(ComparableToken);\n\nvar NatValidationError =\n/** @class */\nfunction (_super) {\n  __extends(NatValidationError, _super);\n\n  function NatValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'NatValidationError';\n    return _this;\n  }\n\n  return NatValidationError;\n}(TokenValidationError);\n\nvar NatToken =\n/** @class */\nfunction (_super) {\n  __extends(NatToken, _super);\n\n  function NatToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  NatToken.prototype.Execute = function (val) {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  };\n\n  NatToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      int: new BigNumber(val).toFixed()\n    };\n  };\n\n  NatToken.prototype.isValid = function (val) {\n    var bigNumber = new BigNumber(val);\n\n    if (bigNumber.isNaN()) {\n      return new NatValidationError(val, this, \"Value is not a number: \" + val);\n    } else if (bigNumber.isNegative()) {\n      return new NatValidationError(val, this, \"Value cannot be negative: \" + val);\n    } else {\n      return null;\n    }\n  };\n\n  NatToken.prototype.EncodeObject = function (val) {\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      int: new BigNumber(val).toFixed()\n    };\n  };\n\n  NatToken.prototype.ExtractSchema = function () {\n    return NatToken.prim;\n  };\n\n  NatToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: {\n        int: String(val)\n      },\n      type: {\n        prim: NatToken.prim\n      }\n    };\n  };\n\n  NatToken.prototype.ToKey = function (_a) {\n    var int = _a.int;\n    return int;\n  };\n\n  NatToken.prototype.compare = function (nat1, nat2) {\n    var o1 = Number(nat1);\n    var o2 = Number(nat2);\n\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  };\n\n  NatToken.prim = 'nat';\n  return NatToken;\n}(ComparableToken);\n\nvar StringToken =\n/** @class */\nfunction (_super) {\n  __extends(StringToken, _super);\n\n  function StringToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  StringToken.prototype.Execute = function (val) {\n    return val[Object.keys(val)[0]];\n  };\n\n  StringToken.prototype.ExtractSchema = function () {\n    return StringToken.prim;\n  };\n\n  StringToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    return {\n      string: val\n    };\n  };\n\n  StringToken.prototype.EncodeObject = function (val) {\n    return {\n      string: val\n    };\n  }; // tslint:disable-next-line: variable-name\n\n\n  StringToken.prototype.ToKey = function (_a) {\n    var string = _a.string;\n    return string;\n  };\n\n  StringToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: StringToken.prim\n      }\n    };\n  };\n\n  StringToken.prim = 'string';\n  return StringToken;\n}(ComparableToken);\n\nvar AddressValidationError =\n/** @class */\nfunction (_super) {\n  __extends(AddressValidationError, _super);\n\n  function AddressValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'AddressValidationError';\n    return _this;\n  }\n\n  return AddressValidationError;\n}(TokenValidationError);\n\nvar AddressToken =\n/** @class */\nfunction (_super) {\n  __extends(AddressToken, _super);\n\n  function AddressToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  AddressToken.prototype.ToBigMapKey = function (val) {\n    var decoded = b58decode(val);\n    return {\n      key: {\n        bytes: decoded\n      },\n      type: {\n        prim: 'bytes'\n      }\n    };\n  };\n\n  AddressToken.prototype.isValid = function (value) {\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      return new AddressValidationError(value, this, \"Address is not valid: \" + value);\n    }\n\n    return null;\n  };\n\n  AddressToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  };\n\n  AddressToken.prototype.EncodeObject = function (val) {\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  }; // tslint:disable-next-line: variable-name\n\n\n  AddressToken.prototype.Execute = function (val) {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodePubKey(val.bytes);\n  };\n\n  AddressToken.prototype.ExtractSchema = function () {\n    return AddressToken.prim;\n  }; // tslint:disable-next-line: variable-name\n\n\n  AddressToken.prototype.ToKey = function (_a) {\n    var bytes = _a.bytes,\n        string = _a.string;\n\n    if (string) {\n      return string;\n    }\n\n    return encodePubKey(bytes);\n  };\n\n  AddressToken.prototype.compare = function (address1, address2) {\n    var isImplicit = function (address) {\n      return address.startsWith('tz');\n    };\n\n    if (isImplicit(address1) && isImplicit(address2)) {\n      return _super.prototype.compare.call(this, address1, address2);\n    } else if (isImplicit(address1)) {\n      return -1;\n    } else if (isImplicit(address2)) {\n      return 1;\n    } else {\n      return _super.prototype.compare.call(this, address1, address2);\n    }\n  };\n\n  AddressToken.prim = 'address';\n  return AddressToken;\n}(ComparableToken);\n\nvar MapValidationError =\n/** @class */\nfunction (_super) {\n  __extends(MapValidationError, _super);\n\n  function MapValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'MapValidationError';\n    return _this;\n  }\n\n  return MapValidationError;\n}(TokenValidationError);\n\nvar MapToken =\n/** @class */\nfunction (_super) {\n  __extends(MapToken, _super);\n\n  function MapToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  Object.defineProperty(MapToken.prototype, \"ValueSchema\", {\n    get: function () {\n      return this.createToken(this.val.args[1], 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MapToken.prototype, \"KeySchema\", {\n    get: function () {\n      return this.createToken(this.val.args[0], 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MapToken.prototype.isValid = function (value) {\n    if (MichelsonMap.isMichelsonMap(value)) {\n      return null;\n    }\n\n    return new MapValidationError(value, this, 'Value must be a MichelsonMap');\n  };\n\n  MapToken.prototype.Execute = function (val, semantics) {\n    var _this = this;\n\n    var map = new MichelsonMap(this.val);\n    val.forEach(function (current) {\n      map.set(_this.KeySchema.ToKey(current.args[0]), _this.ValueSchema.Execute(current.args[1], semantics));\n    });\n    return map;\n  };\n\n  MapToken.prototype.Encode = function (args) {\n    var _this = this;\n\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys()).sort(function (a, b) {\n      return _this.KeySchema.compare(a, b);\n    }).map(function (key) {\n      return {\n        prim: 'Elt',\n        args: [_this.KeySchema.EncodeObject(key), _this.ValueSchema.EncodeObject(val.get(key))]\n      };\n    });\n  };\n\n  MapToken.prototype.EncodeObject = function (args) {\n    var _this = this;\n\n    var val = args;\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys()).sort(function (a, b) {\n      return _this.KeySchema.compare(a, b);\n    }).map(function (key) {\n      return {\n        prim: 'Elt',\n        args: [_this.KeySchema.EncodeObject(key), _this.ValueSchema.EncodeObject(val.get(key))]\n      };\n    });\n  };\n\n  MapToken.prototype.ExtractSchema = function () {\n    return {\n      map: {\n        key: this.KeySchema.ExtractSchema(),\n        value: this.ValueSchema.ExtractSchema()\n      }\n    };\n  };\n\n  MapToken.prim = 'map';\n  return MapToken;\n}(Token);\n\nvar BoolToken =\n/** @class */\nfunction (_super) {\n  __extends(BoolToken, _super);\n\n  function BoolToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  BoolToken.prototype.Execute = function (val) {\n    return String(val.prim).toLowerCase() === 'true' ? true : false;\n  };\n\n  BoolToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    return {\n      prim: val ? 'True' : 'False'\n    };\n  };\n\n  BoolToken.prototype.EncodeObject = function (val) {\n    return {\n      prim: val ? 'True' : 'False'\n    };\n  };\n\n  BoolToken.prototype.ExtractSchema = function () {\n    return BoolToken.prim;\n  };\n\n  BoolToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: this.EncodeObject(val),\n      type: {\n        prim: BoolToken.prim\n      }\n    };\n  };\n\n  BoolToken.prototype.ToKey = function (val) {\n    return this.EncodeObject(val);\n  };\n\n  BoolToken.prototype.compare = function (val1, val2) {\n    if (val1 && val2 || !val1 && !val2) {\n      return 0;\n    } else if (val1) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  BoolToken.prim = 'bool';\n  return BoolToken;\n}(ComparableToken);\n\nvar ContractValidationError =\n/** @class */\nfunction (_super) {\n  __extends(ContractValidationError, _super);\n\n  function ContractValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'ContractValidationError';\n    return _this;\n  }\n\n  return ContractValidationError;\n}(TokenValidationError);\n\nvar ContractToken =\n/** @class */\nfunction (_super) {\n  __extends(ContractToken, _super);\n\n  function ContractToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  ContractToken.prototype.isValid = function (value) {\n    // tz1,tz2 and tz3 seems to be valid contract values (for Unit contract)\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      return new ContractValidationError(value, this, 'Contract address is not valid');\n    }\n\n    return null;\n  };\n\n  ContractToken.prototype.Execute = function (val) {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodePubKey(val.bytes);\n  };\n\n  ContractToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  };\n\n  ContractToken.prototype.EncodeObject = function (val) {\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  };\n\n  ContractToken.prototype.ExtractSchema = function () {\n    return ContractToken.prim;\n  };\n\n  ContractToken.prim = 'contract';\n  return ContractToken;\n}(Token);\n\nvar ListValidationError =\n/** @class */\nfunction (_super) {\n  __extends(ListValidationError, _super);\n\n  function ListValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'ListValidationError';\n    return _this;\n  }\n\n  return ListValidationError;\n}(TokenValidationError);\n\nvar ListToken =\n/** @class */\nfunction (_super) {\n  __extends(ListToken, _super);\n\n  function ListToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  ListToken.prototype.isValid = function (value) {\n    if (Array.isArray(value)) {\n      return null;\n    }\n\n    return new ListValidationError(value, this, 'Value must be an array');\n  };\n\n  ListToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    var schema = this.createToken(this.val.args[0], 0);\n    return val.reduce(function (prev, current) {\n      return __spreadArray(__spreadArray([], __read(prev)), [schema.EncodeObject(current)]);\n    }, []);\n  };\n\n  ListToken.prototype.Execute = function (val, semantics) {\n    var schema = this.createToken(this.val.args[0], 0);\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return val.reduce(function (prev, current) {\n      return __spreadArray(__spreadArray([], __read(prev)), [schema.Execute(current, semantics)]);\n    }, []);\n  };\n\n  ListToken.prototype.EncodeObject = function (args) {\n    var schema = this.createToken(this.val.args[0], 0);\n    var err = this.isValid(args);\n\n    if (err) {\n      throw err;\n    }\n\n    return args.reduce(function (prev, current) {\n      return __spreadArray(__spreadArray([], __read(prev)), [schema.EncodeObject(current)]);\n    }, []);\n  };\n\n  ListToken.prototype.ExtractSchema = function () {\n    return ListToken.prim;\n  };\n\n  ListToken.prim = 'list';\n  return ListToken;\n}(Token);\n\nvar MutezValidationError =\n/** @class */\nfunction (_super) {\n  __extends(MutezValidationError, _super);\n\n  function MutezValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'MutezValidationError';\n    return _this;\n  }\n\n  return MutezValidationError;\n}(TokenValidationError);\n\nvar MutezToken =\n/** @class */\nfunction (_super) {\n  __extends(MutezToken, _super);\n\n  function MutezToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  MutezToken.prototype.Execute = function (val) {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  };\n\n  MutezToken.prototype.ExtractSchema = function () {\n    return MutezToken.prim;\n  };\n\n  MutezToken.prototype.isValid = function (val) {\n    var bigNumber = new BigNumber(val);\n\n    if (bigNumber.isNaN()) {\n      return new MutezValidationError(val, this, \"Value is not a number: \" + val);\n    } else {\n      return null;\n    }\n  };\n\n  MutezToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      int: String(val).toString()\n    };\n  };\n\n  MutezToken.prototype.EncodeObject = function (val) {\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      int: String(val).toString()\n    };\n  };\n\n  MutezToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: {\n        int: String(val)\n      },\n      type: {\n        prim: MutezToken.prim\n      }\n    };\n  };\n\n  MutezToken.prototype.ToKey = function (_a) {\n    var int = _a.int;\n    return int;\n  };\n\n  MutezToken.prototype.compare = function (mutez1, mutez2) {\n    var o1 = Number(mutez1);\n    var o2 = Number(mutez2);\n\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  };\n\n  MutezToken.prim = 'mutez';\n  return MutezToken;\n}(ComparableToken);\n\nvar BytesValidationError =\n/** @class */\nfunction (_super) {\n  __extends(BytesValidationError, _super);\n\n  function BytesValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'BytesValidationError';\n    return _this;\n  }\n\n  return BytesValidationError;\n}(TokenValidationError);\n\nvar BytesToken =\n/** @class */\nfunction (_super) {\n  __extends(BytesToken, _super);\n\n  function BytesToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  BytesToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: {\n        bytes: val\n      },\n      type: {\n        prim: BytesToken.prim\n      }\n    };\n  };\n\n  BytesToken.prototype.isValid = function (val) {\n    if (typeof val === 'string' && /^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new BytesValidationError(val, this, \"Invalid bytes: \" + val);\n    }\n  };\n\n  BytesToken.prototype.convertUint8ArrayToHexString = function (val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  };\n\n  BytesToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: String(val).toString()\n    };\n  };\n\n  BytesToken.prototype.EncodeObject = function (val) {\n    val = this.convertUint8ArrayToHexString(val);\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: String(val).toString()\n    };\n  };\n\n  BytesToken.prototype.Execute = function (val) {\n    return val.bytes;\n  };\n\n  BytesToken.prototype.ExtractSchema = function () {\n    return BytesToken.prim;\n  }; // tslint:disable-next-line: variable-name\n\n\n  BytesToken.prototype.ToKey = function (_a) {\n    var bytes = _a.bytes,\n        string = _a.string;\n\n    if (string) {\n      return string;\n    }\n\n    return bytes;\n  };\n\n  BytesToken.prim = 'bytes';\n  return BytesToken;\n}(ComparableToken);\n\nvar OptionToken =\n/** @class */\nfunction (_super) {\n  __extends(OptionToken, _super);\n\n  function OptionToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  OptionToken.prototype.subToken = function () {\n    return this.createToken(this.val.args[0], this.idx);\n  };\n\n  OptionToken.prototype.annot = function () {\n    return Array.isArray(this.val.annots) ? _super.prototype.annot.call(this) : this.createToken(this.val.args[0], this.idx).annot();\n  };\n\n  OptionToken.prototype.Encode = function (args) {\n    var value = args;\n\n    if (value === undefined || value === null) {\n      return {\n        prim: 'None'\n      };\n    } else if (Array.isArray(value) && (value[value.length - 1] === undefined || value[value.length - 1] === null)) {\n      value.pop();\n      return {\n        prim: 'None'\n      };\n    }\n\n    var schema = this.createToken(this.val.args[0], 0);\n    return {\n      prim: 'Some',\n      args: [schema.Encode(args)]\n    };\n  };\n\n  OptionToken.prototype.EncodeObject = function (args) {\n    var schema = this.createToken(this.val.args[0], 0);\n    var value = args;\n\n    if (value === undefined || value === null) {\n      return {\n        prim: 'None'\n      };\n    }\n\n    return {\n      prim: 'Some',\n      args: [schema.EncodeObject(value)]\n    };\n  };\n\n  OptionToken.prototype.Execute = function (val, semantics) {\n    if (val.prim === 'None') {\n      return null;\n    }\n\n    var schema = this.createToken(this.val.args[0], 0);\n    return schema.Execute(val.args[0], semantics);\n  };\n\n  OptionToken.prototype.ExtractSchema = function () {\n    var schema = this.createToken(this.val.args[0], 0);\n    return schema.ExtractSchema();\n  };\n\n  OptionToken.prototype.ExtractSignature = function () {\n    var schema = this.createToken(this.val.args[0], 0);\n    return __spreadArray(__spreadArray([], __read(schema.ExtractSignature())), [[]]);\n  };\n\n  Object.defineProperty(OptionToken.prototype, \"KeySchema\", {\n    get: function () {\n      return this.createToken(this.val.args[0], 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  OptionToken.prototype.compare = function (val1, val2) {\n    if (!val1) {\n      return -1;\n    } else if (!val2) {\n      return 1;\n    }\n\n    return this.KeySchema.compare(val1, val2);\n  };\n\n  OptionToken.prototype.ToKey = function (val) {\n    return this.Execute(val);\n  };\n\n  OptionToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations()\n    };\n  };\n\n  OptionToken.prim = 'option';\n  return OptionToken;\n}(ComparableToken);\n\nvar TimestampToken =\n/** @class */\nfunction (_super) {\n  __extends(TimestampToken, _super);\n\n  function TimestampToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  TimestampToken.prototype.Execute = function (val) {\n    if (val.string) {\n      return new Date(val.string).toISOString();\n    } else if (val.int) {\n      return new Date(Number(val.int) * 1000).toISOString();\n    }\n  };\n\n  TimestampToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    return {\n      string: val\n    };\n  };\n\n  TimestampToken.prototype.EncodeObject = function (val) {\n    return {\n      string: val\n    };\n  };\n\n  TimestampToken.prototype.ExtractSchema = function () {\n    return TimestampToken.prim;\n  }; // tslint:disable-next-line: variable-name\n\n\n  TimestampToken.prototype.ToKey = function (_a) {\n    var string = _a.string;\n    return string;\n  };\n\n  TimestampToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: TimestampToken.prim\n      }\n    };\n  };\n\n  TimestampToken.prim = 'timestamp';\n  return TimestampToken;\n}(ComparableToken);\n\nvar IntValidationError =\n/** @class */\nfunction (_super) {\n  __extends(IntValidationError, _super);\n\n  function IntValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'IntValidationError';\n    return _this;\n  }\n\n  return IntValidationError;\n}(TokenValidationError);\n\nvar IntToken =\n/** @class */\nfunction (_super) {\n  __extends(IntToken, _super);\n\n  function IntToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  IntToken.prototype.Execute = function (val) {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  };\n\n  IntToken.prototype.ExtractSchema = function () {\n    return IntToken.prim;\n  };\n\n  IntToken.prototype.isValid = function (val) {\n    var bigNumber = new BigNumber(val);\n\n    if (bigNumber.isNaN()) {\n      return new IntValidationError(val, this, \"Value is not a number: \" + val);\n    } else {\n      return null;\n    }\n  };\n\n  IntToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      int: new BigNumber(val).toFixed()\n    };\n  };\n\n  IntToken.prototype.EncodeObject = function (val) {\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      int: new BigNumber(val).toFixed()\n    };\n  };\n\n  IntToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: {\n        int: String(val)\n      },\n      type: {\n        prim: IntToken.prim\n      }\n    };\n  };\n\n  IntToken.prototype.ToKey = function (_a) {\n    var int = _a.int;\n    return int;\n  };\n\n  IntToken.prototype.compare = function (int1, int2) {\n    var o1 = Number(int1);\n    var o2 = Number(int2);\n\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  };\n\n  IntToken.prim = 'int';\n  return IntToken;\n}(ComparableToken);\n\nvar UnitToken =\n/** @class */\nfunction (_super) {\n  __extends(UnitToken, _super);\n\n  function UnitToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  UnitToken.prototype.Encode = function (args) {\n    args.pop();\n    return {\n      prim: 'Unit'\n    };\n  };\n\n  UnitToken.prototype.EncodeObject = function (_val) {\n    return {\n      prim: 'Unit'\n    };\n  };\n\n  UnitToken.prototype.Execute = function (_val) {\n    return UnitValue;\n  };\n\n  UnitToken.prototype.ExtractSchema = function () {\n    return UnitToken.prim;\n  };\n\n  UnitToken.prototype.compare = function (_val1, _val2) {\n    return 0;\n  };\n\n  UnitToken.prototype.ToKey = function (_val) {\n    return UnitValue;\n  };\n\n  UnitToken.prototype.ToBigMapKey = function (_val) {\n    return {\n      key: {\n        prim: 'Unit'\n      },\n      type: {\n        prim: UnitToken.prim\n      }\n    };\n  };\n\n  UnitToken.prim = 'unit';\n  return UnitToken;\n}(ComparableToken);\n\nvar KeyValidationError =\n/** @class */\nfunction (_super) {\n  __extends(KeyValidationError, _super);\n\n  function KeyValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'KeyValidationError';\n    return _this;\n  }\n\n  return KeyValidationError;\n}(TokenValidationError);\n\nvar KeyToken =\n/** @class */\nfunction (_super) {\n  __extends(KeyToken, _super);\n\n  function KeyToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  KeyToken.prototype.Execute = function (val) {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodeKey(val.bytes);\n  };\n\n  KeyToken.prototype.isValid = function (value) {\n    if (validatePublicKey(value) !== ValidationResult.VALID) {\n      return new KeyValidationError(value, this, 'Key is not valid');\n    }\n\n    return null;\n  };\n\n  KeyToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  };\n\n  KeyToken.prototype.EncodeObject = function (val) {\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  };\n\n  KeyToken.prototype.ExtractSchema = function () {\n    return KeyToken.prim;\n  };\n\n  KeyToken.prototype.ToKey = function (val) {\n    return this.Execute(val);\n  };\n\n  KeyToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: KeyToken.prim\n      }\n    };\n  };\n\n  KeyToken.prim = 'key';\n  return KeyToken;\n}(ComparableToken);\n\nvar KeyHashValidationError =\n/** @class */\nfunction (_super) {\n  __extends(KeyHashValidationError, _super);\n\n  function KeyHashValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'KeyHashValidationError';\n    return _this;\n  }\n\n  return KeyHashValidationError;\n}(TokenValidationError);\n\nvar KeyHashToken =\n/** @class */\nfunction (_super) {\n  __extends(KeyHashToken, _super);\n\n  function KeyHashToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  KeyHashToken.prototype.Execute = function (val) {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodeKeyHash(val.bytes);\n  };\n\n  KeyHashToken.prototype.isValid = function (value) {\n    if (validateKeyHash(value) !== ValidationResult.VALID) {\n      return new KeyHashValidationError(value, this, \"KeyHash is not valid: \" + value);\n    }\n\n    return null;\n  };\n\n  KeyHashToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  };\n\n  KeyHashToken.prototype.EncodeObject = function (val) {\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  };\n\n  KeyHashToken.prototype.ExtractSchema = function () {\n    return KeyHashToken.prim;\n  }; // tslint:disable-next-line: variable-name\n\n\n  KeyHashToken.prototype.ToKey = function (_a) {\n    var string = _a.string,\n        bytes = _a.bytes;\n\n    if (string) {\n      return string;\n    }\n\n    return encodeKeyHash(bytes);\n  };\n\n  KeyHashToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: KeyHashToken.prim\n      }\n    };\n  };\n\n  KeyHashToken.prim = 'key_hash';\n  return KeyHashToken;\n}(ComparableToken);\n\nvar SignatureValidationError =\n/** @class */\nfunction (_super) {\n  __extends(SignatureValidationError, _super);\n\n  function SignatureValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'SignatureValidationError';\n    return _this;\n  }\n\n  return SignatureValidationError;\n}(TokenValidationError);\n\nvar SignatureToken =\n/** @class */\nfunction (_super) {\n  __extends(SignatureToken, _super);\n\n  function SignatureToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  SignatureToken.prototype.Execute = function (val) {\n    return val.string;\n  };\n\n  SignatureToken.prototype.isValid = function (value) {\n    if (validateSignature(value) !== ValidationResult.VALID) {\n      return new SignatureValidationError(value, this, 'Signature is not valid');\n    }\n\n    return null;\n  };\n\n  SignatureToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  };\n\n  SignatureToken.prototype.EncodeObject = function (val) {\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  };\n\n  SignatureToken.prototype.ExtractSchema = function () {\n    return SignatureToken.prim;\n  };\n\n  SignatureToken.prototype.ToKey = function (val) {\n    return this.Execute(val);\n  };\n\n  SignatureToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: SignatureToken.prim\n      }\n    };\n  };\n\n  SignatureToken.prim = 'signature';\n  return SignatureToken;\n}(ComparableToken);\n\nvar LambdaToken =\n/** @class */\nfunction (_super) {\n  __extends(LambdaToken, _super);\n\n  function LambdaToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  LambdaToken.prototype.Execute = function (val) {\n    if (val.string) {\n      return val.string;\n    } else {\n      return val;\n    }\n  };\n\n  LambdaToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    return val;\n  };\n\n  LambdaToken.prototype.EncodeObject = function (val) {\n    return val;\n  };\n\n  LambdaToken.prototype.ExtractSchema = function () {\n    var _a;\n\n    var leftToken = this.createToken(this.val.args[0], this.idx);\n    var rightToken = this.createToken(this.val.args[1], this.idx + 1);\n    return _a = {}, _a[LambdaToken.prim] = {\n      parameters: leftToken.ExtractSchema(),\n      returns: rightToken.ExtractSchema()\n    }, _a;\n  };\n\n  LambdaToken.prim = 'lambda';\n  return LambdaToken;\n}(Token);\n\nvar OperationToken =\n/** @class */\nfunction (_super) {\n  __extends(OperationToken, _super);\n\n  function OperationToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  OperationToken.prototype.Execute = function (val) {\n    return val.string;\n  };\n\n  OperationToken.prototype.Encode = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var val = args.pop();\n    return {\n      string: val\n    };\n  };\n\n  OperationToken.prototype.EncodeObject = function (val) {\n    return {\n      string: val\n    };\n  };\n\n  OperationToken.prototype.ExtractSchema = function () {\n    return OperationToken.prim;\n  };\n\n  OperationToken.prim = 'operation';\n  return OperationToken;\n}(Token);\n\nvar SetValidationError =\n/** @class */\nfunction (_super) {\n  __extends(SetValidationError, _super);\n\n  function SetValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'SetValidationError';\n    return _this;\n  }\n\n  return SetValidationError;\n}(TokenValidationError);\n\nvar SetToken =\n/** @class */\nfunction (_super) {\n  __extends(SetToken, _super);\n\n  function SetToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  Object.defineProperty(SetToken.prototype, \"KeySchema\", {\n    get: function () {\n      return this.createToken(this.val.args[0], 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SetToken.prototype.isValid = function (value) {\n    if (Array.isArray(value)) {\n      return null;\n    }\n\n    return new SetValidationError(value, this, 'Value must be an array');\n  };\n\n  SetToken.prototype.Encode = function (args) {\n    var _this = this;\n\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return val.sort(function (a, b) {\n      return _this.KeySchema.compare(a, b);\n    }).reduce(function (prev, current) {\n      return __spreadArray(__spreadArray([], __read(prev)), [_this.KeySchema.EncodeObject(current)]);\n    }, []);\n  };\n\n  SetToken.prototype.Execute = function (val, semantics) {\n    var _this = this;\n\n    return val.reduce(function (prev, current) {\n      return __spreadArray(__spreadArray([], __read(prev)), [_this.KeySchema.Execute(current, semantics)]);\n    }, []);\n  };\n\n  SetToken.prototype.EncodeObject = function (args) {\n    var _this = this;\n\n    var err = this.isValid(args);\n\n    if (err) {\n      throw err;\n    }\n\n    return args.sort(function (a, b) {\n      return _this.KeySchema.compare(a, b);\n    }).reduce(function (prev, current) {\n      return __spreadArray(__spreadArray([], __read(prev)), [_this.KeySchema.EncodeObject(current)]);\n    }, []);\n  };\n\n  SetToken.prototype.ExtractSchema = function () {\n    return SetToken.prim;\n  };\n\n  SetToken.prim = 'set';\n  return SetToken;\n}(Token);\n\nvar ChainIDValidationError =\n/** @class */\nfunction (_super) {\n  __extends(ChainIDValidationError, _super);\n\n  function ChainIDValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'ChainIDValidationError';\n    return _this;\n  }\n\n  return ChainIDValidationError;\n}(TokenValidationError);\n\nvar ChainIDToken =\n/** @class */\nfunction (_super) {\n  __extends(ChainIDToken, _super);\n\n  function ChainIDToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  ChainIDToken.prototype.isValid = function (value) {\n    if (validateChain(value) !== ValidationResult.VALID) {\n      return new ChainIDValidationError(value, this, 'ChainID is not valid');\n    }\n\n    return null;\n  };\n\n  ChainIDToken.prototype.Execute = function (val) {\n    return val[Object.keys(val)[0]];\n  };\n\n  ChainIDToken.prototype.ExtractSchema = function () {\n    return ChainIDToken.prim;\n  };\n\n  ChainIDToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  };\n\n  ChainIDToken.prototype.EncodeObject = function (val) {\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  }; // tslint:disable-next-line: variable-name\n\n\n  ChainIDToken.prototype.ToKey = function (_a) {\n    var string = _a.string;\n    return string;\n  };\n\n  ChainIDToken.prototype.ToBigMapKey = function (val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: ChainIDToken.prim\n      }\n    };\n  };\n\n  ChainIDToken.prim = 'chain_id';\n  return ChainIDToken;\n}(ComparableToken);\n\nvar EncodeTicketError =\n/** @class */\nfunction () {\n  function EncodeTicketError() {\n    this.name = 'TicketEncodeError';\n    this.message = 'Tickets cannot be sent to the blockchain; they are created on-chain';\n  }\n\n  return EncodeTicketError;\n}();\n\nvar ticketerType = {\n  \"prim\": \"contract\"\n};\nvar amountType = {\n  \"prim\": \"int\"\n};\n\nvar TicketToken =\n/** @class */\nfunction (_super) {\n  __extends(TicketToken, _super);\n\n  function TicketToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  TicketToken.prototype.Encode = function (_args) {\n    throw new EncodeTicketError();\n  };\n\n  TicketToken.prototype.EncodeObject = function (_args) {\n    throw new EncodeTicketError();\n  };\n\n  TicketToken.prototype.Execute = function (val, semantics) {\n    if (semantics && semantics[TicketToken.prim]) {\n      return semantics[TicketToken.prim](val, this.val);\n    }\n\n    var ticketer = this.createToken(ticketerType, this.idx);\n    var value = this.createToken(this.val.args[0], this.idx);\n    var amount = this.createToken(amountType, this.idx);\n    return {\n      ticketer: ticketer.Execute(val.args[0], semantics),\n      value: value.Execute(val.args[1], semantics),\n      amount: amount.Execute(val.args[2], semantics)\n    };\n  };\n\n  TicketToken.prototype.ExtractSchema = function () {\n    var valueSchema = this.createToken(this.val.args[0], this.idx);\n    return {\n      ticketer: ContractToken.prim,\n      value: valueSchema.ExtractSchema(),\n      amount: IntToken.prim\n    };\n  };\n\n  TicketToken.prim = 'ticket';\n  return TicketToken;\n}(Token);\n\nvar NeverTokenError =\n/** @class */\nfunction (_super) {\n  __extends(NeverTokenError, _super);\n\n  function NeverTokenError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'NeverTokenError';\n    return _this;\n  }\n\n  return NeverTokenError;\n}(TokenValidationError);\n\nvar NeverToken =\n/** @class */\nfunction (_super) {\n  __extends(NeverToken, _super);\n\n  function NeverToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  NeverToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    throw new NeverTokenError(val, this, 'Assigning a value to the type never is forbidden.');\n  };\n\n  NeverToken.prototype.EncodeObject = function (val) {\n    throw new NeverTokenError(val, this, 'Assigning a value to the type never is forbidden.');\n  };\n\n  NeverToken.prototype.Execute = function (val) {\n    throw new NeverTokenError(val, this, 'There is no literal value for the type never.');\n  };\n\n  NeverToken.prototype.ExtractSchema = function () {\n    return NeverToken.prim;\n  };\n\n  NeverToken.prim = 'never';\n  return NeverToken;\n}(Token);\n\nvar SaplingStateValidationError =\n/** @class */\nfunction (_super) {\n  __extends(SaplingStateValidationError, _super);\n\n  function SaplingStateValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'SaplingStateValidationError';\n    return _this;\n  }\n\n  return SaplingStateValidationError;\n}(TokenValidationError);\n\nvar SaplingStateToken =\n/** @class */\nfunction (_super) {\n  __extends(SaplingStateToken, _super);\n\n  function SaplingStateToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  SaplingStateToken.prototype.isValid = function (val) {\n    return typeof val === 'object' && Object.keys(val).length === 0;\n  };\n\n  SaplingStateToken.prototype.Execute = function (val, semantic) {\n    if (semantic && semantic[SaplingStateToken.prim]) {\n      return semantic[SaplingStateToken.prim](val, this.val);\n    }\n\n    if ('int' in val) {\n      return val.int;\n    } else {\n      // Unknown case\n      throw new Error(\"Sapling state is expecting an object with an int property. Got \" + JSON.stringify(val));\n    }\n  };\n\n  SaplingStateToken.prototype.Encode = function (args) {\n    var val = args.pop();\n\n    if (this.isValid(val)) {\n      return [];\n    } else {\n      throw new SaplingStateValidationError(val, this, \"Invalid sapling_state. Received: \" + val + \" while expecting: {}\");\n    }\n  };\n\n  SaplingStateToken.prototype.EncodeObject = function (val) {\n    if (this.isValid(val)) {\n      return [];\n    } else {\n      throw new SaplingStateValidationError(val, this, \"Invalid sapling_state. Received: \" + val + \" while expecting: {}\");\n    }\n  };\n\n  SaplingStateToken.prototype.ExtractSchema = function () {\n    var _a;\n\n    return _a = {}, _a[SaplingStateToken.prim] = {\n      'memo-size': Number(this.val.args[0]['int'])\n    }, _a;\n  };\n\n  SaplingStateToken.prim = 'sapling_state';\n  return SaplingStateToken;\n}(Token);\n\nvar SaplingTransactionValidationError =\n/** @class */\nfunction (_super) {\n  __extends(SaplingTransactionValidationError, _super);\n\n  function SaplingTransactionValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'SaplingTransactionValidationError';\n    return _this;\n  }\n\n  return SaplingTransactionValidationError;\n}(TokenValidationError);\n\nvar SaplingTransactionToken =\n/** @class */\nfunction (_super) {\n  __extends(SaplingTransactionToken, _super);\n\n  function SaplingTransactionToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  SaplingTransactionToken.prototype.Execute = function (_val) {\n    throw new Error('There is no literal value for the sapling_transaction type.');\n  };\n\n  SaplingTransactionToken.prototype.validateBytes = function (val) {\n    var bytes = /^(0x|0X)?([0-9a-fA-F]*$)/.exec(val);\n\n    if (bytes && bytes[2].length % 2 === 0) {\n      return bytes[2];\n    } else {\n      throw new SaplingTransactionValidationError(val, this, \"Invalid bytes: \" + val);\n    }\n  };\n\n  SaplingTransactionToken.prototype.convertUint8ArrayToHexString = function (val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  };\n\n  SaplingTransactionToken.prototype.Encode = function (args) {\n    var val = args.pop();\n    val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n    return {\n      bytes: String(val).toString()\n    };\n  };\n\n  SaplingTransactionToken.prototype.EncodeObject = function (val) {\n    val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n    return {\n      bytes: String(val).toString()\n    };\n  };\n\n  SaplingTransactionToken.prototype.ExtractSchema = function () {\n    var _a;\n\n    return _a = {}, _a[SaplingTransactionToken.prim] = {\n      'memo-size': Number(this.val.args[0]['int'])\n    }, _a;\n  };\n\n  SaplingTransactionToken.prim = 'sapling_transaction';\n  return SaplingTransactionToken;\n}(Token);\n\nvar Bls12381frValidationError =\n/** @class */\nfunction (_super) {\n  __extends(Bls12381frValidationError, _super);\n\n  function Bls12381frValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'Bls12381frValidationError';\n    return _this;\n  }\n\n  return Bls12381frValidationError;\n}(TokenValidationError);\n\nvar Bls12381frToken =\n/** @class */\nfunction (_super) {\n  __extends(Bls12381frToken, _super);\n\n  function Bls12381frToken(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  Bls12381frToken.prototype.isValid = function (val) {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381frValidationError(val, this, \"Invalid bytes: \" + val);\n    }\n  };\n\n  Bls12381frToken.prototype.convertUint8ArrayToHexString = function (val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  };\n\n  Bls12381frToken.prototype.Encode = function (args) {\n    var val = args.pop();\n\n    if (typeof val === 'number') {\n      return {\n        int: val.toString()\n      };\n    } else {\n      val = this.convertUint8ArrayToHexString(val);\n      var err = this.isValid(val);\n\n      if (err) {\n        throw err;\n      }\n\n      return {\n        bytes: val\n      };\n    }\n  };\n\n  Bls12381frToken.prototype.EncodeObject = function (val) {\n    if (typeof val === 'number') {\n      return {\n        int: val.toString()\n      };\n    } else {\n      val = this.convertUint8ArrayToHexString(val);\n      var err = this.isValid(val);\n\n      if (err) {\n        throw err;\n      }\n\n      return {\n        bytes: val\n      };\n    }\n  };\n\n  Bls12381frToken.prototype.Execute = function (val) {\n    return val.bytes;\n  };\n\n  Bls12381frToken.prototype.ExtractSchema = function () {\n    return Bls12381frToken.prim;\n  }; // An element of the BLS12-381 scalar field Fr\n  // see https://tezos.gitlab.io/michelson-reference/#type-bls12_381_fr\n\n\n  Bls12381frToken.prim = 'bls12_381_fr';\n  return Bls12381frToken;\n}(Token);\n\nvar Bls12381g1ValidationError =\n/** @class */\nfunction (_super) {\n  __extends(Bls12381g1ValidationError, _super);\n\n  function Bls12381g1ValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'Bls12381g1ValidationError';\n    return _this;\n  }\n\n  return Bls12381g1ValidationError;\n}(TokenValidationError);\n\nvar Bls12381g1Token =\n/** @class */\nfunction (_super) {\n  __extends(Bls12381g1Token, _super);\n\n  function Bls12381g1Token(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  Bls12381g1Token.prototype.isValid = function (val) {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381g1ValidationError(val, this, \"Invalid bytes: \" + val);\n    }\n  };\n\n  Bls12381g1Token.prototype.convertUint8ArrayToHexString = function (val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  };\n\n  Bls12381g1Token.prototype.Encode = function (args) {\n    var val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: val\n    };\n  };\n\n  Bls12381g1Token.prototype.EncodeObject = function (val) {\n    val = this.convertUint8ArrayToHexString(val);\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: val\n    };\n  };\n\n  Bls12381g1Token.prototype.Execute = function (val) {\n    return val.bytes;\n  };\n\n  Bls12381g1Token.prototype.ExtractSchema = function () {\n    return Bls12381g1Token.prim;\n  }; // A point on the BLS12-381 curve G1\n  // See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g1\n\n\n  Bls12381g1Token.prim = 'bls12_381_g1';\n  return Bls12381g1Token;\n}(Token);\n\nvar Bls12381g2ValidationError =\n/** @class */\nfunction (_super) {\n  __extends(Bls12381g2ValidationError, _super);\n\n  function Bls12381g2ValidationError(value, token, message) {\n    var _this = _super.call(this, value, token, message) || this;\n\n    _this.value = value;\n    _this.token = token;\n    _this.name = 'Bls12381g2ValidationError';\n    return _this;\n  }\n\n  return Bls12381g2ValidationError;\n}(TokenValidationError);\n\nvar Bls12381g2Token =\n/** @class */\nfunction (_super) {\n  __extends(Bls12381g2Token, _super);\n\n  function Bls12381g2Token(val, idx, fac) {\n    var _this = _super.call(this, val, idx, fac) || this;\n\n    _this.val = val;\n    _this.idx = idx;\n    _this.fac = fac;\n    return _this;\n  }\n\n  Bls12381g2Token.prototype.isValid = function (val) {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381g2ValidationError(val, this, \"Invalid bytes: \" + val);\n    }\n  };\n\n  Bls12381g2Token.prototype.convertUint8ArrayToHexString = function (val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  };\n\n  Bls12381g2Token.prototype.Encode = function (args) {\n    var val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: val\n    };\n  };\n\n  Bls12381g2Token.prototype.EncodeObject = function (val) {\n    val = this.convertUint8ArrayToHexString(val);\n    var err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: val\n    };\n  };\n\n  Bls12381g2Token.prototype.Execute = function (val) {\n    return val.bytes;\n  };\n\n  Bls12381g2Token.prototype.ExtractSchema = function () {\n    return Bls12381g2Token.prim;\n  }; // A point on the BLS12-381 curve G2\n  // See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g2\n\n\n  Bls12381g2Token.prim = 'bls12_381_g2';\n  return Bls12381g2Token;\n}(Token);\n\nvar tokens = [PairToken, NatToken, StringToken, BigMapToken, AddressToken, MapToken, BoolToken, OrToken, ContractToken, ListToken, MutezToken, BytesToken, OptionToken, TimestampToken, IntToken, UnitToken, KeyToken, KeyHashToken, SignatureToken, LambdaToken, OperationToken, SetToken, ChainIDToken, TicketToken, NeverToken, SaplingStateToken, SaplingTransactionToken, Bls12381frToken, Bls12381g1Token, Bls12381g2Token];\n\nvar InvalidTokenError =\n/** @class */\nfunction () {\n  function InvalidTokenError(message, data) {\n    this.message = message;\n    this.data = data;\n    this.name = 'Invalid token error';\n  }\n\n  return InvalidTokenError;\n}();\n\nfunction createToken(val, idx) {\n  if (Array.isArray(val)) {\n    return new PairToken(val, idx, createToken);\n  }\n\n  var t = tokens.find(function (x) {\n    return x.prim === val.prim;\n  });\n\n  if (!t) {\n    throw new InvalidTokenError('Malformed data expected a value with a valid prim property', val);\n  }\n\n  return new t(val, idx, createToken);\n}\n\nvar _a;\n\nvar schemaTypeSymbol = Symbol.for('taquito-schema-type-symbol'); // collapse comb pair\n\nfunction collapse(val, prim) {\n  var _b, _c;\n\n  if (prim === void 0) {\n    prim = PairToken.prim;\n  }\n\n  if (Array.isArray(val)) {\n    return collapse({\n      prim: prim,\n      args: val\n    }, prim);\n  }\n\n  if (val.prim === prim && ((_b = val.args) === null || _b === void 0 ? void 0 : _b.length) > 2) {\n    return __assign(__assign({}, val), {\n      args: [val.args[0], {\n        prim: prim,\n        args: (_c = val.args) === null || _c === void 0 ? void 0 : _c.slice(1)\n      }]\n    });\n  }\n\n  return val;\n}\n\nfunction deepEqual(a, b) {\n  var ac = collapse(a);\n  var bc = collapse(b);\n  return ac.prim === bc.prim && (ac.args === undefined && bc.args === undefined || ac.args !== undefined && bc.args !== undefined && ac.args.length === bc.args.length && ac.args.every(function (v, i) {\n    var _b;\n\n    return deepEqual(v, (_b = bc.args) === null || _b === void 0 ? void 0 : _b[i]);\n  })) && (ac.annots === undefined && bc.annots === undefined || ac.annots !== undefined && bc.annots !== undefined && ac.annots.length === bc.annots.length && ac.annots.every(function (v, i) {\n    var _b;\n\n    return v === ((_b = bc.annots) === null || _b === void 0 ? void 0 : _b[i]);\n  }));\n}\n/**\r\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\r\n */\n\n\nvar Schema =\n/** @class */\nfunction () {\n  function Schema(val) {\n    this[_a] = true;\n    this.root = createToken(val, 0);\n\n    if (this.root instanceof BigMapToken) {\n      this.bigMap = this.root;\n    } else if (this.isExpressionExtended(val) && val.prim === 'pair') {\n      var exp = val.args[0];\n\n      if (this.isExpressionExtended(exp) && exp.prim === 'big_map') {\n        this.bigMap = new BigMapToken(exp, 0, createToken);\n      }\n    }\n  }\n\n  Schema.isSchema = function (obj) {\n    return obj && obj[schemaTypeSymbol] === true;\n  };\n\n  Schema.fromRPCResponse = function (val) {\n    var storage = val && val.script && Array.isArray(val.script.code) && val.script.code.find(function (x) {\n      return x.prim === 'storage';\n    });\n\n    if (!storage || !Array.isArray(storage.args)) {\n      throw new Error('Invalid rpc response passed as arguments');\n    }\n\n    return new Schema(storage.args[0]);\n  };\n\n  Schema.prototype.isExpressionExtended = function (val) {\n    return 'prim' in val && Array.isArray(val.args);\n  };\n\n  Schema.prototype.removeTopLevelAnnotation = function (obj) {\n    // PairToken and OrToken can have redundant top level annotation in their storage\n    if (this.root instanceof PairToken || this.root instanceof OrToken) {\n      if (this.root.hasAnnotations() && typeof obj === 'object' && Object.keys(obj).length === 1) {\n        return obj[Object.keys(obj)[0]];\n      }\n    }\n\n    return obj;\n  };\n\n  Schema.prototype.Execute = function (val, semantics) {\n    var storage = this.root.Execute(val, semantics);\n    return this.removeTopLevelAnnotation(storage);\n  };\n\n  Schema.prototype.Typecheck = function (val) {\n    if (this.root instanceof BigMapToken && Number.isInteger(Number(val))) {\n      return true;\n    }\n\n    try {\n      this.root.EncodeObject(val);\n      return true;\n    } catch (ex) {\n      return false;\n    }\n  };\n\n  Schema.prototype.ExecuteOnBigMapDiff = function (diff, semantics) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    if (!Array.isArray(diff)) {\n      throw new Error('Invalid big map diff. It must be an array');\n    }\n\n    var eltFormat = diff.map(function (_b) {\n      var key = _b.key,\n          value = _b.value;\n      return {\n        args: [key, value]\n      };\n    });\n    return this.bigMap.Execute(eltFormat, semantics);\n  };\n\n  Schema.prototype.ExecuteOnBigMapValue = function (key, semantics) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    return this.bigMap.ValueSchema.Execute(key, semantics);\n  };\n\n  Schema.prototype.EncodeBigMapKey = function (key) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    try {\n      return this.bigMap.KeySchema.ToBigMapKey(key);\n    } catch (ex) {\n      throw new Error('Unable to encode big map key: ' + ex);\n    }\n  };\n\n  Schema.prototype.Encode = function (_value) {\n    try {\n      return this.root.EncodeObject(_value);\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new Error(\"Unable to encode storage object. \" + ex);\n    }\n  };\n\n  Schema.prototype.ExtractSchema = function () {\n    return this.removeTopLevelAnnotation(this.root.ExtractSchema());\n  };\n  /**\r\n   * @deprecated\r\n   */\n\n\n  Schema.prototype.ComputeState = function (tx, state) {\n    var _b;\n\n    var _this = this;\n\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    var bigMap = tx.reduce(function (prev, current) {\n      return __assign(__assign({}, prev), _this.ExecuteOnBigMapDiff(current.contents[0].metadata.operation_result.big_map_diff));\n    }, {});\n    return __assign(__assign({}, this.Execute(state)), (_b = {}, _b[this.bigMap.annot()] = bigMap, _b));\n  };\n  /**\r\n   * @description Look up in top-level pairs of the storage to find a value matching the specified type\r\n   *\r\n   * @returns The first value found that match the type or `undefined` if no value is found\r\n   *\r\n   * @param storage storage to parse to find the value\r\n   * @param valueType type of value to look for\r\n   *\r\n   */\n\n\n  Schema.prototype.FindFirstInTopLevelPair = function (storage, valueType) {\n    return this.findValue(this.root['val'], storage, valueType);\n  };\n\n  Schema.prototype.findValue = function (schema, storage, valueToFind) {\n    if (deepEqual(valueToFind, schema)) {\n      return storage;\n    }\n\n    if (Array.isArray(schema) || schema['prim'] === 'pair') {\n      var sch = collapse(schema);\n      var str = collapse(storage, 'Pair');\n\n      if (sch.args === undefined || str.args === undefined) {\n        throw new Error('Tokens have no arguments'); // unlikely\n      }\n\n      return this.findValue(sch.args[0], str.args[0], valueToFind) || this.findValue(sch.args[1], str.args[1], valueToFind);\n    }\n  };\n\n  return Schema;\n}();\n\n_a = schemaTypeSymbol;\n/**\r\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\r\n */\n\nvar ParameterSchema =\n/** @class */\nfunction () {\n  function ParameterSchema(val) {\n    this.root = createToken(val, 0);\n  }\n\n  ParameterSchema.fromRPCResponse = function (val) {\n    var parameter = val && val.script && Array.isArray(val.script.code) && val.script.code.find(function (x) {\n      return x.prim === 'parameter';\n    });\n\n    if (!parameter || !Array.isArray(parameter.args)) {\n      throw new Error('Invalid rpc response passed as arguments');\n    }\n\n    return new ParameterSchema(parameter.args[0]);\n  };\n\n  Object.defineProperty(ParameterSchema.prototype, \"isMultipleEntryPoint\", {\n    get: function () {\n      return this.root instanceof OrToken || this.root instanceof OptionToken && this.root.subToken() instanceof OrToken;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParameterSchema.prototype, \"hasAnnotation\", {\n    get: function () {\n      if (this.isMultipleEntryPoint) {\n        return Object.keys(this.ExtractSchema())[0] !== '0';\n      } else {\n        return true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ParameterSchema.prototype.Execute = function (val, semantics) {\n    return this.root.Execute(val, semantics);\n  };\n\n  ParameterSchema.prototype.Encode = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    try {\n      return this.root.Encode(args.reverse());\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new Error(\"Unable to encode storage object. \" + ex);\n    }\n  };\n\n  ParameterSchema.prototype.ExtractSchema = function () {\n    return this.root.ExtractSchema();\n  };\n\n  ParameterSchema.prototype.ExtractSignatures = function () {\n    return this.root.ExtractSignature();\n  };\n\n  return ParameterSchema;\n}(); // IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n\n/* tslint:disable */\n\n\nvar VERSION = {\n  \"commitHash\": \"a8e9548e650215186f661033b59299ace72c9ee6\",\n  \"version\": \"9.2.0\"\n};\n/* tslint:enable */\n\n/**\r\n * @packageDocumentation\r\n * @module @taquito/michelson-encoder\r\n */\n\nvar UnitValue = Symbol();\nvar SaplingStateValue = {};\nexport { AddressValidationError, BigMapValidationError, BytesValidationError, ChainIDValidationError, ContractValidationError, EncodeTicketError, IntValidationError, KeyHashValidationError, KeyValidationError, ListValidationError, MapTypecheckError, MapValidationError, MichelsonMap, MutezValidationError, NatValidationError, ParameterSchema, SaplingStateValue, Schema, SetValidationError, SignatureValidationError, UnitValue, VERSION };","map":{"version":3,"sources":["../src/michelson-map.ts","../src/tokens/token.ts","../src/tokens/bigmap.ts","../src/tokens/or.ts","../src/tokens/pair.ts","../src/tokens/comparable/nat.ts","../src/tokens/comparable/string.ts","../src/tokens/comparable/address.ts","../src/tokens/map.ts","../src/tokens/comparable/bool.ts","../src/tokens/contract.ts","../src/tokens/list.ts","../src/tokens/comparable/mutez.ts","../src/tokens/comparable/bytes.ts","../src/tokens/option.ts","../src/tokens/comparable/timestamp.ts","../src/tokens/comparable/int.ts","../src/tokens/unit.ts","../src/tokens/key.ts","../src/tokens/comparable/key_hash.ts","../src/tokens/signature.ts","../src/tokens/lambda.ts","../src/tokens/operation.ts","../src/tokens/set.ts","../src/tokens/chain-id.ts","../src/tokens/ticket.ts","../src/tokens/never.ts","../src/tokens/sapling-state.ts","../src/tokens/sapling-transaction.ts","../src/tokens/bls12-381-fr.ts","../src/tokens/bls12-381-g1.ts","../src/tokens/bls12-381-g2.ts","../src/tokens/tokens.ts","../src/tokens/createToken.ts","../src/schema/storage.ts","../src/schema/parameter.ts","../src/version.ts","../src/taquito-michelson-encoder.ts"],"names":["collapse"],"mappings":"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","sourcesContent":["import { MichelsonV1Expression } from '@taquito/rpc';\nimport { Schema } from './schema/storage';\nimport stringify from 'fast-json-stable-stringify';\n\n// Retrieve a unique symbol associated with the key from the environment\n// Used in order to identify all object that are of type MichelsonMap even if they come from different module\nconst michelsonMapTypeSymbol = Symbol.for('taquito-michelson-map-type-symbol');\n\nexport type MichelsonMapKey = Array<any> | Object | string | boolean | number;\n\nconst isMapType = (\n  value: MichelsonV1Expression\n): value is { prim: 'map' | 'big_map'; args: [MichelsonV1Expression, MichelsonV1Expression] } => {\n  return 'args' in value && Array.isArray(value.args) && value.args.length === 2;\n};\n\nexport class MapTypecheckError implements Error {\n  name: string = 'MapTypecheckError';\n  message: string;\n\n  constructor(public readonly value: any, public readonly type: any, errorType: 'key' | 'value') {\n    this.message = `${errorType} not compliant with underlying michelson type`;\n  }\n}\n\n/**\n * @description Michelson Map is an abstraction over the michelson native map. It supports complex Pair as key\n */\nexport class MichelsonMap<K extends MichelsonMapKey, T extends any> {\n  private valueMap = new Map<string, T>();\n  private keyMap = new Map<string, K>();\n\n  public [michelsonMapTypeSymbol] = true;\n\n  // Used to check if an object is a michelson map.\n  // Using instanceof was not working for project that had multiple instance of taquito dependencies\n  // as the class constructor is different\n  static isMichelsonMap(obj: any): obj is MichelsonMap<any, any> {\n    return obj && obj[michelsonMapTypeSymbol] === true;\n  }\n\n  private keySchema?: Schema;\n  private valueSchema?: Schema;\n\n  /**\n   * @param mapType If specified key and value will be type-checked before being added to the map\n   *\n   * @example new MichelsonMap({ prim: \"map\", args: [{prim: \"string\"}, {prim: \"int\"}]})\n   */\n  constructor(mapType?: MichelsonV1Expression) {\n    if (mapType) {\n      this.setType(mapType);\n    }\n  }\n\n  setType(mapType: MichelsonV1Expression) {\n    if (!isMapType(mapType)) {\n      throw new Error('mapType is not a valid michelson map type');\n    }\n\n    this.keySchema = new Schema(mapType.args[0]);\n    this.valueSchema = new Schema(mapType.args[1]);\n  }\n\n  removeType() {\n    this.keySchema = undefined;\n    this.valueSchema = undefined;\n  }\n\n  static fromLiteral(obj: { [key: string]: any }, mapType?: MichelsonV1Expression) {\n    const map = new MichelsonMap(mapType);\n    Object.keys(obj).forEach(key => {\n      map.set(key, obj[key]);\n    });\n    return map;\n  }\n\n  private typecheckKey(key: K) {\n    if (this.keySchema) {\n      return this.keySchema.Typecheck(key);\n    }\n\n    return true;\n  }\n\n  private typecheckValue(value: T) {\n    if (this.valueSchema) {\n      return this.valueSchema.Typecheck(value);\n    }\n\n    return true;\n  }\n\n  private assertTypecheckValue(value: T) {\n    if (!this.typecheckValue(value)) {\n      throw new MapTypecheckError(value, this.valueSchema, 'value');\n    }\n  }\n\n  private assertTypecheckKey(key: K) {\n    if (!this.typecheckKey(key)) {\n      throw new MapTypecheckError(key, this.keySchema, 'key');\n    }\n  }\n\n  private serializeDeterministically(key: K): string {\n    return stringify(key);\n  }\n\n  *keys(): Generator<K> {\n    for (const [key] of this.entries()) {\n      yield key;\n    }\n  }\n\n  *values(): Generator<T> {\n    for (const [, value] of this.entries()) {\n      yield value;\n    }\n  }\n\n  *entries(): Generator<[K, T]> {\n    for (const key of this.valueMap.keys()) {\n      yield [this.keyMap.get(key)!, this.valueMap.get(key)!];\n    }\n  }\n\n  get(key: K): T | undefined {\n    this.assertTypecheckKey(key);\n\n    const strKey = this.serializeDeterministically(key);\n    return this.valueMap.get(strKey);\n  }\n\n  /**\n   *\n   * @description Set a key and a value in the MichelsonMap. If the key already exists, override the current value.\n   *\n   * @example map.set(\"myKey\", \"myValue\") // Using a string as key\n   *\n   * @example map.set({0: \"test\", 1: \"test1\"}, \"myValue\") // Using a pair as key\n   *\n   * @warn The same key can be represented in multiple ways, depending on the type of the key. This duplicate key situation will cause a runtime error (duplicate key) when sending the map data to the Tezos RPC node.\n   *\n   * For example, consider a contract with a map whose key is of type boolean.  If you set the following values in MichelsonMap: map.set(false, \"myValue\") and map.set(null, \"myValue\").\n   *\n   * You will get two unique entries in the MichelsonMap. These values will both be evaluated as falsy by the MichelsonEncoder and ultimately rejected by the Tezos RPC.\n   */\n  set(key: K, value: T) {\n    this.assertTypecheckKey(key);\n    this.assertTypecheckValue(value);\n\n    const strKey = this.serializeDeterministically(key);\n    this.keyMap.set(strKey, key);\n    this.valueMap.set(strKey, value);\n  }\n\n  delete(key: K) {\n    this.assertTypecheckKey(key);\n\n    this.keyMap.delete(this.serializeDeterministically(key));\n    this.valueMap.delete(this.serializeDeterministically(key));\n  }\n\n  has(key: K) {\n    this.assertTypecheckKey(key);\n\n    const strKey = this.serializeDeterministically(key);\n    return this.keyMap.has(strKey) && this.valueMap.has(strKey);\n  }\n\n  clear(): void {\n    this.keyMap.clear();\n    this.valueMap.clear();\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  forEach(cb: (value: T, key: K, map: MichelsonMap<K, T>) => void) {\n    for (const [key, value] of this.entries()) {\n      cb(value, key, this);\n    }\n  }\n}\n","import { MichelsonV1Expression } from '@taquito/rpc';\n\nexport abstract class TokenValidationError implements Error {\n  name: string = 'ValidationError';\n  public message: string;\n\n  constructor(public value: any, public token: Token, baseMessage: string) {\n    const annot = this.token.annot();\n    const annotText = annot ? `[${annot}] ` : '';\n    this.message = `${annotText}${baseMessage}`;\n  }\n}\n\nexport type TokenFactory = (val: any, idx: number) => Token;\n\nexport interface Semantic {\n  [key: string]: (value: MichelsonV1Expression, schema: MichelsonV1Expression) => any;\n}\n\nexport abstract class Token {\n  constructor(\n    protected val: { prim: string; args?: any[]; annots?: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) { }\n\n  protected typeWithoutAnnotations() {\n    const removeArgsRec = (val: Token['val']): { prim: string; args?: any[] } => {\n      if (val.args) {\n        return {\n          prim: val.prim,\n          args: val.args.map(x => removeArgsRec(x)),\n        };\n      } else {\n        return {\n          prim: val.prim,\n        };\n      }\n    };\n\n    return removeArgsRec(this.val);\n  }\n\n  annot() {\n    return (Array.isArray(this.val.annots) && this.val.annots.length > 0\n      ? this.val.annots[0]\n      : String(this.idx)\n    ).replace(/(%|\\:)(_Liq_entry_)?/, '');\n  }\n\n  hasAnnotations() {\n    return Array.isArray(this.val.annots) && this.val.annots.length;\n  }\n\n  public createToken = this.fac;\n\n  public abstract ExtractSchema(): any;\n\n  public abstract Execute(val: any, semantics?: Semantic): any;\n\n  public abstract Encode(_args: any[]): any;\n\n  public abstract EncodeObject(args: any): any;\n\n  public ExtractSignature() {\n    return [[this.ExtractSchema()]];\n  }\n}\n\nexport type BigMapKeyType = string | number | object;\n\nexport abstract class ComparableToken extends Token {\n  abstract ToBigMapKey(\n    val: BigMapKeyType\n  ): {\n    key: { [key: string]: string | object[] };\n    type: { prim: string, args?: object[] };\n  };\n\n  abstract ToKey(val: string): any;\n\n  compare(o1: string, o2: string): number {\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n}\n","import { MichelsonMap } from '../michelson-map';\nimport { ComparableToken, Semantic, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class BigMapValidationError extends TokenValidationError {\n  name: string = 'BigMapValidationError';\n  constructor(public value: any, public token: BigMapToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class BigMapToken extends Token {\n  static prim = 'big_map';\n  constructor(\n    protected val: { prim: string; args: any[]; annots?: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get ValueSchema() {\n    return this.createToken(this.val.args[1], 0);\n  }\n\n  get KeySchema(): ComparableToken {\n    return (this.createToken(this.val.args[0], 0) as unknown) as ComparableToken;\n  }\n\n  public ExtractSchema() {\n    return {\n      [this.KeySchema.ExtractSchema()]: this.ValueSchema.ExtractSchema(),\n    };\n  }\n\n  private isValid(value: any): BigMapValidationError | null {\n    if (MichelsonMap.isMichelsonMap(value)) {\n      return null;\n    }\n\n    return new BigMapValidationError(value, this, 'Value must be a MichelsonMap');\n  }\n\n  public Encode(args: any[]): any {\n    const val: MichelsonMap<any, any> = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys())\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .map(key => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n        };\n      });\n  }\n\n  public EncodeObject(args: any): any {\n    const val: MichelsonMap<any, any> = args;\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys())\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .map(key => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n        };\n      });\n  }\n\n  public Execute(val: any[] | { int: string }, semantic?: Semantic) {\n    if (semantic && semantic[BigMapToken.prim]) {\n      return semantic[BigMapToken.prim](val as any, this.val);\n    }\n\n    if (Array.isArray(val)) {\n      // Athens is returning an empty array for big map in storage\n      // Internal: In taquito v5 it is still used to decode big map diff (as if they were a regular map)\n      const map = new MichelsonMap(this.val);\n      val.forEach(current => {\n        map.set(this.KeySchema.ToKey(current.args[0]), this.ValueSchema.Execute(current.args[1]));\n      });\n      return map;\n    } else if ('int' in val) {\n      // Babylon is returning an int with the big map id in contract storage\n      return val.int;\n    } else {\n      // Unknown case\n      throw new Error(\n        `Big map is expecting either an array (Athens) or an object with an int property (Babylon). Got ${JSON.stringify(\n          val\n        )}`\n      );\n    }\n  }\n}\n","import { Token, TokenFactory, Semantic, ComparableToken } from './token';\n\nexport class OrToken extends ComparableToken {\n  static prim = 'or';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Encode(args: any[]): any {\n    const label = args[args.length - 1];\n\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n      args.pop();\n      return { prim: 'Left', args: [leftToken.Encode(args)] };\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n      args.pop();\n      return { prim: 'Right', args: [rightToken.Encode(args)] };\n    } else {\n      if (leftToken instanceof OrToken) {\n        let val = leftToken.Encode(args);\n        if (val) {\n          return { prim: 'Left', args: [val] };\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        let val = rightToken.Encode(args);\n        if (val) {\n          return { prim: 'Right', args: [val] };\n        }\n      }\n      return null;\n    }\n  }\n\n  public ExtractSignature(): any {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    const newSig = [];\n\n    if (leftToken instanceof OrToken) {\n      newSig.push(...leftToken.ExtractSignature());\n    } else {\n      for (const sig of leftToken.ExtractSignature()) {\n        newSig.push([leftToken.annot(), ...sig]);\n      }\n    }\n\n    if (rightToken instanceof OrToken) {\n      newSig.push(...rightToken.ExtractSignature());\n    } else {\n      for (const sig of rightToken.ExtractSignature()) {\n        newSig.push([rightToken.annot(), ...sig]);\n      }\n    }\n\n    return newSig;\n  }\n\n  public EncodeObject(args: any): any {\n    const label = Object.keys(args)[0];\n\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n      return { prim: 'Left', args: [leftToken.EncodeObject(args[label])] };\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n      return { prim: 'Right', args: [rightToken.EncodeObject(args[label])] };\n    } else {\n      if (leftToken instanceof OrToken) {\n        let val = leftToken.EncodeObject(args);\n        if (val) {\n          return { prim: 'Left', args: [val] };\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        let val = rightToken.EncodeObject(args);\n        if (val) {\n          return { prim: 'Right', args: [val] };\n        }\n      }\n      return null;\n    }\n  }\n\n  public Execute(val: any, semantics?: Semantic): any {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (val.prim === 'Right') {\n      if (rightToken instanceof OrToken) {\n        return rightToken.Execute(val.args[0], semantics)\n      } else {\n        return {\n          [rightToken.annot()]: rightToken.Execute(val.args[0], semantics),\n        };\n      }\n    } else if (val.prim === 'Left') {\n      if (leftToken instanceof OrToken) {\n        return leftToken.Execute(val.args[0], semantics)\n      }\n      return {\n        [leftToken.annot()]: leftToken.Execute(val.args[0], semantics),\n      };\n    } else {\n      throw new Error(`Was expecting Left or Right prim but got: ${val.prim}`);\n    }\n  }\n\n  private traversal(\n    getLeftValue: (token: Token) => any,\n    getRightValue: (token: Token) => any,\n    concat: (left: any, right: any) => any\n  ) {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    let leftValue;\n    if (leftToken instanceof OrToken && !leftToken.hasAnnotations()) {\n      leftValue = getLeftValue(leftToken);\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    } else {\n      leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n    let rightValue;\n    if (rightToken instanceof OrToken && !rightToken.hasAnnotations()) {\n      rightValue = getRightValue(rightToken);\n    } else {\n      rightValue = { [rightToken.annot()]: getRightValue(rightToken) };\n    }\n\n    const res = concat(leftValue, rightValue);\n\n    return res;\n  }\n  public ExtractSchema(): any {\n    return this.traversal(\n      leftToken => leftToken.ExtractSchema(),\n      rightToken => rightToken.ExtractSchema(),\n      (leftValue, rightValue) => ({\n        ...leftValue,\n        ...rightValue,\n      })\n    );\n  }\n\n  private findToken(label: any): Token | null {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken) && leftToken instanceof ComparableToken) {\n      return leftToken\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken) && rightToken instanceof ComparableToken) {\n      return rightToken\n    } else {\n      if (leftToken instanceof OrToken) {\n        const tok = leftToken.findToken(label);\n        if (tok) { return tok }\n      }\n\n      if (rightToken instanceof OrToken) {\n        const tok = rightToken.findToken(label)\n        if (tok) { return tok }\n      }\n      return null;\n    }\n  }\n\n  compare(val1: any, val2: any): any {\n    const labelVal1 = Object.keys(val1)[0];\n    const labelVal2 = Object.keys(val2)[0];\n\n    if (labelVal1 === labelVal2) {\n      const token = this.findToken(labelVal1)\n      if (token instanceof ComparableToken) {\n        return token.compare(val1[labelVal1], val2[labelVal1])\n      }\n\n    } else {\n      const encoded1 = JSON.stringify(this.EncodeObject(val1))\n      const encoded2 = JSON.stringify(this.EncodeObject(val2))\n      return encoded1 < encoded2 ? -1 : 1;\n    }\n  }\n\n  public ToKey(val: any) {\n    return this.Execute(val);\n  }\n\n  public ToBigMapKey(val: any) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations(),\n    };\n  }\n}\n","import { Token, TokenFactory, Semantic, ComparableToken } from './token';\nimport { OrToken } from './or';\n\n// collapse comb pair\nfunction collapse(val: Token['val'] | any[], prim: string = PairToken.prim): [any, any] {\n  if (Array.isArray(val)) {\n    return collapse({\n      prim: prim,\n      args: val,\n    }, prim);\n  }\n  if (val.args === undefined) {\n    throw new Error('Token has no arguments');\n  }\n  if (val.args.length > 2) {\n    return [val.args[0], {\n      prim: prim,\n      args: val.args.slice(1),\n    }];\n  }\n  return [val.args[0], val.args[1]];\n}\nexport class PairToken extends ComparableToken {\n  static prim = 'pair';\n\n  constructor(\n    val: { prim: string; args: any[]; annots: any[] } | any[],\n    idx: number,\n    fac: TokenFactory\n  ) {\n    super(Array.isArray(val) ? {\n      prim: PairToken.prim,\n      args: val,\n    } : val, idx, fac);\n  }\n\n  private args(): [any, any] {\n    // collapse comb pair\n    return collapse(this.val);\n  }\n\n  private tokens(): [Token, Token] {\n    let cnt = 0;\n    return this.args().map(a => {\n      const tok = this.createToken(a, this.idx + cnt);\n      if (tok instanceof PairToken) {\n        cnt += Object.keys(tok.ExtractSchema()).length;\n      } else {\n        cnt++;\n      }\n      return tok;\n    }) as [Token, Token];\n  }\n\n  public Encode(args: any[]): any {\n    return {\n      prim: 'Pair',\n      args: this.tokens().map(t => t.Encode(args)),\n    };\n  }\n\n  public ExtractSignature(): any {\n    const args = this.args();\n    const leftToken = this.createToken(args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(args[1], this.idx + keyCount);\n\n    const newSig = [];\n\n    for (const leftSig of leftToken.ExtractSignature()) {\n      for (const rightSig of rightToken.ExtractSignature()) {\n        newSig.push([...leftSig, ...rightSig]);\n      }\n    }\n\n    return newSig;\n  }\n\n  public ToBigMapKey(val: any) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations(),\n    };\n  }\n\n  public ToKey(val: any) {\n    return this.Execute(val);\n  }\n\n  public EncodeObject(args: any): any {\n    const [leftToken, rightToken] = this.tokens();\n\n    let leftValue;\n    if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n      leftValue = args;\n    } else {\n      leftValue = args[leftToken.annot()];\n    }\n\n    let rightValue;\n    if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n      rightValue = args;\n    } else {\n      rightValue = args[rightToken.annot()];\n    }\n\n    return {\n      prim: 'Pair',\n      args: [leftToken.EncodeObject(leftValue), rightToken.EncodeObject(rightValue)],\n    };\n  }\n\n  private traversal(getLeftValue: (token: Token) => any, getRightValue: (token: Token) => any) {\n    const args = this.args();\n\n    const leftToken = this.createToken(args[0], this.idx);\n    let keyCount = 1;\n    let leftValue;\n    if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n      leftValue = getLeftValue(leftToken);\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    } else {\n      leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };\n    }\n\n    const rightToken = this.createToken(args[1], this.idx + keyCount);\n    let rightValue;\n    if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n      rightValue = getRightValue(rightToken);\n    } else {\n      rightValue = { [rightToken.annot()]: getRightValue(rightToken) };\n    }\n\n    const res = {\n      ...leftValue,\n      ...rightValue,\n    };\n\n    return res;\n  }\n\n  public Execute(val: any, semantics?: Semantic): { [key: string]: any } {\n    const args = collapse(val, 'Pair');\n    return this.traversal(\n      leftToken => leftToken.Execute(args[0], semantics),\n      rightToken => rightToken.Execute(args[1], semantics)\n    );\n  }\n\n  public ExtractSchema(): any {\n    return this.traversal(\n      leftToken => leftToken.ExtractSchema(),\n      rightToken => rightToken.ExtractSchema()\n    );\n  }\n\n  public compare(val1: any, val2: any) {\n    const [leftToken, rightToken] = this.tokens();\n\n    const getValue = (token: Token, args: any) => {\n      if (token instanceof PairToken && !token.hasAnnotations()) {\n        return args;\n      } else {\n        return args[token.annot()];\n      }\n    };\n\n    if (leftToken instanceof ComparableToken && rightToken instanceof ComparableToken) {\n      const result: number = leftToken.compare(\n        getValue(leftToken, val1),\n        getValue(leftToken, val2)\n      );\n\n      if (result === 0) {\n        return rightToken.compare(getValue(rightToken, val1), getValue(rightToken, val2));\n      }\n\n      return result;\n    }\n\n    throw new Error('Not a comparable pair');\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\nimport BigNumber from 'bignumber.js';\n\nexport class NatValidationError extends TokenValidationError {\n  name: string = 'NatValidationError';\n  constructor(public value: any, public token: NatToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class NatToken extends ComparableToken {\n  static prim = 'nat';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): { [key: string]: any } {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: new BigNumber(val).toFixed() };\n  }\n\n  private isValid(val: any): NatValidationError | null {\n    const bigNumber = new BigNumber(val);\n    if (bigNumber.isNaN()) {\n      return new NatValidationError(val, this, `Value is not a number: ${val}`);\n    } else if (bigNumber.isNegative()) {\n      return new NatValidationError(val, this, `Value cannot be negative: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: new BigNumber(val).toFixed() };\n  }\n\n  public ExtractSchema() {\n    return NatToken.prim;\n  }\n\n  public ToBigMapKey(val: string | number) {\n    return {\n      key: { int: String(val) },\n      type: { prim: NatToken.prim },\n    };\n  }\n\n  public ToKey({ int }: any) {\n    return int;\n  }\n\n  compare(nat1: string | number, nat2: string | number) {\n    const o1 = Number(nat1);\n    const o2 = Number(nat2);\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n}\n","import { Token, TokenFactory, ComparableToken } from '../token';\n\nexport class StringToken extends ComparableToken {\n  static prim = 'string';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): string {\n    return val[Object.keys(val)[0]];\n  }\n\n  public ExtractSchema() {\n    return StringToken.prim;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    return { string: val };\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ string }: any) {\n    return string;\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: StringToken.prim },\n    };\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\nimport { b58decode, encodePubKey, validateAddress, ValidationResult } from '@taquito/utils';\n\nexport class AddressValidationError extends TokenValidationError {\n  name: string = 'AddressValidationError';\n  constructor(public value: any, public token: AddressToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class AddressToken extends ComparableToken {\n  static prim = 'address';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public ToBigMapKey(val: any) {\n    const decoded = b58decode(val);\n    return {\n      key: { bytes: decoded },\n      type: { prim: 'bytes' },\n    };\n  }\n\n  private isValid(value: any): AddressValidationError | null {\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      return new AddressValidationError(value, this, `Address is not valid: ${value}`);\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  // tslint:disable-next-line: variable-name\n  public Execute(val: { bytes: string; string: string }): string {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodePubKey(val.bytes);\n  }\n\n  public ExtractSchema() {\n    return AddressToken.prim;\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ bytes, string }: any) {\n    if (string) {\n      return string;\n    }\n\n    return encodePubKey(bytes);\n  }\n\n  compare(address1: string, address2: string) {\n    const isImplicit = (address: string) => {\n      return address.startsWith('tz');\n    };\n\n    if (isImplicit(address1) && isImplicit(address2)) {\n      return super.compare(address1, address2);\n    } else if (isImplicit(address1)) {\n      return -1;\n    } else if (isImplicit(address2)) {\n      return 1;\n    } else {\n      return super.compare(address1, address2);\n    }\n  }\n}\n","import { MichelsonMap } from '../michelson-map';\nimport { ComparableToken, Semantic, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class MapValidationError extends TokenValidationError {\n  name: string = 'MapValidationError';\n  constructor(public value: any, public token: MapToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class MapToken extends Token {\n  static prim = 'map';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get ValueSchema() {\n    return this.createToken(this.val.args[1], 0);\n  }\n\n  get KeySchema(): ComparableToken {\n    return this.createToken(this.val.args[0], 0) as any;\n  }\n\n  private isValid(value: any): MapValidationError | null {\n    if (MichelsonMap.isMichelsonMap(value)) {\n      return null;\n    }\n\n    return new MapValidationError(value, this, 'Value must be a MichelsonMap');\n  }\n\n  public Execute(val: any[], semantics?: Semantic): { [key: string]: any } {\n    const map = new MichelsonMap(this.val);\n\n    val.forEach(current => {\n      map.set(\n        this.KeySchema.ToKey(current.args[0]),\n        this.ValueSchema.Execute(current.args[1], semantics)\n      );\n    });\n    return map;\n  }\n\n  public Encode(args: any[]): any {\n    const val: MichelsonMap<any, any> = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys())\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .map(key => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n        };\n      });\n  }\n\n  public EncodeObject(args: any): any {\n    const val: MichelsonMap<any, any> = args;\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys())\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .map(key => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n        };\n      });\n  }\n\n  public ExtractSchema() {\n    return {\n      map: {\n        key: this.KeySchema.ExtractSchema(),\n        value: this.ValueSchema.ExtractSchema(),\n      },\n    };\n  }\n}\n","import { Token, TokenFactory, ComparableToken } from '../token';\n\nexport class BoolToken extends ComparableToken {\n  static prim = 'bool';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): boolean {\n    return String(val.prim).toLowerCase() === 'true' ? true : false;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return { prim: val ? 'True' : 'False' };\n  }\n\n  public EncodeObject(val: any) {\n    return { prim: val ? 'True' : 'False' };\n  }\n\n  public ExtractSchema() {\n    return BoolToken.prim;\n  }\n\n  ToBigMapKey(val: string): { key: { [key: string]: string }; type: { prim: string } } {\n    return {\n      key: this.EncodeObject(val),\n      type: { prim: BoolToken.prim },\n    };\n  }\n\n  ToKey(val: string) {\n    return this.EncodeObject(val);\n  }\n\n  compare(val1: any, val2: any) {\n    if ((val1 && val2) || (!val1 && !val2)) {\n      return 0;\n    } else if (val1) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { encodePubKey, validateAddress, ValidationResult } from '@taquito/utils';\nimport { Token, TokenFactory, TokenValidationError } from './token';\n\nexport class ContractValidationError extends TokenValidationError {\n  name: string = 'ContractValidationError';\n  constructor(public value: any, public token: ContractToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class ContractToken extends Token {\n  static prim = 'contract';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(value: any): ContractValidationError | null {\n    // tz1,tz2 and tz3 seems to be valid contract values (for Unit contract)\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      return new ContractValidationError(value, this, 'Contract address is not valid');\n    }\n\n    return null;\n  }\n\n  public Execute(val: { bytes: string; string: string }) {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodePubKey(val.bytes);\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return ContractToken.prim;\n  }\n}\n","import { Token, TokenFactory, Semantic, TokenValidationError } from './token';\n\nexport class ListValidationError extends TokenValidationError {\n  name: string = 'ListValidationError';\n  constructor(public value: any, public token: ListToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class ListToken extends Token {\n  static prim = 'list';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(value: any): ListValidationError | null {\n    if (Array.isArray(value)) {\n      return null;\n    }\n\n    return new ListValidationError(value, this, 'Value must be an array');\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    const schema = this.createToken(this.val.args[0], 0);\n    return val.reduce((prev: any, current: any) => {\n      return [...prev, schema.EncodeObject(current)];\n    }, []);\n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    const schema = this.createToken(this.val.args[0], 0);\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return val.reduce((prev: any, current: any) => {\n      return [...prev, schema.Execute(current, semantics)];\n    }, []);\n  }\n\n  public EncodeObject(args: any): any {\n    const schema = this.createToken(this.val.args[0], 0);\n\n    const err = this.isValid(args);\n    if (err) {\n      throw err;\n    }\n\n    return args.reduce((prev: any, current: any) => {\n      return [...prev, schema.EncodeObject(current)];\n    }, []);\n  }\n\n  public ExtractSchema() {\n    return ListToken.prim;\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\nimport BigNumber from 'bignumber.js';\n\nexport class MutezValidationError extends TokenValidationError {\n  name: string = 'MutezValidationError';\n  constructor(public value: any, public token: MutezToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class MutezToken extends ComparableToken {\n  static prim = 'mutez';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any) {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n\n  public ExtractSchema() {\n    return MutezToken.prim;\n  }\n\n  private isValid(val: any): MutezValidationError | null {\n    const bigNumber = new BigNumber(val);\n    if (bigNumber.isNaN()) {\n      return new MutezValidationError(val, this, `Value is not a number: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: String(val).toString() };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: String(val).toString() };\n  }\n\n  public ToBigMapKey(val: string | number) {\n    return {\n      key: { int: String(val) },\n      type: { prim: MutezToken.prim },\n    };\n  }\n\n  public ToKey({ int }: any) {\n    return int;\n  }\n\n  compare(mutez1: string | number, mutez2: string | number) {\n    const o1 = Number(mutez1);\n    const o2 = Number(mutez2);\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n}\n","import { TokenFactory, ComparableToken, TokenValidationError } from '../token';\n\nexport class BytesValidationError extends TokenValidationError {\n  name: string = 'BytesValidationError';\n  constructor(public value: any, public token: BytesToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class BytesToken extends ComparableToken {\n  static prim = 'bytes';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { bytes: val },\n      type: { prim: BytesToken.prim },\n    };\n  }\n\n  private isValid(val: any): BytesValidationError | null {\n    if (typeof val === 'string' && /^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new BytesValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: any) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  public Encode(args: any[]): any {\n    let val = args.pop();\n\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { bytes: String(val).toString() };\n  }\n\n  public EncodeObject(val: string | Uint8Array) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { bytes: String(val).toString() };\n  }\n\n  public Execute(val: any): string {\n    return val.bytes;\n  }\n\n  public ExtractSchema() {\n    return BytesToken.prim;\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ bytes, string }: any) {\n    if (string) {\n      return string;\n    }\n\n    return bytes;\n  }\n}\n","import { Token, TokenFactory, Semantic, ComparableToken } from './token';\n\nexport class OptionToken extends ComparableToken {\n  static prim = 'option';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public subToken(): Token {\n    return this.createToken(this.val.args[0], this.idx);\n  }\n\n  annot(): string {\n    return Array.isArray(this.val.annots)\n      ? super.annot()\n      : this.createToken(this.val.args[0], this.idx).annot();\n  }\n\n  public Encode(args: any): any {\n    const value = args;\n    if (\n      value === undefined ||\n      value === null\n    ) {\n      return { prim: 'None' };\n    }\n    else if ((Array.isArray(value) && (value[value.length - 1] === undefined || value[value.length - 1] === null))) {\n      value.pop();\n      return { prim: 'None' };\n    }\n\n    const schema = this.createToken(this.val.args[0], 0);\n    return { prim: 'Some', args: [schema.Encode(args)] };\n  }\n\n  public EncodeObject(args: any): any {\n    const schema = this.createToken(this.val.args[0], 0);\n    const value = args;\n\n    if (value === undefined || value === null) {\n      return { prim: 'None' };\n    }\n\n    return { prim: 'Some', args: [schema.EncodeObject(value)] };\n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    if (val.prim === 'None') {\n      return null;\n    }\n\n    const schema = this.createToken(this.val.args[0], 0);\n    return schema.Execute(val.args[0], semantics);\n  }\n\n  public ExtractSchema() {\n    const schema = this.createToken(this.val.args[0], 0);\n    return schema.ExtractSchema();\n  }\n\n  public ExtractSignature() {\n    const schema = this.createToken(this.val.args[0], 0);\n    return [...schema.ExtractSignature(), []];\n  }\n\n  get KeySchema(): ComparableToken {\n    return this.createToken(this.val.args[0], 0) as any;\n  }\n\n  compare(val1: any, val2: any) {\n    if (!val1) {\n      return -1\n    } else if (!val2) {\n      return 1\n    }\n    return this.KeySchema.compare(val1, val2)\n  }\n\n  public ToKey(val: any) {\n    return this.Execute(val);\n  }\n\n  public ToBigMapKey(val: any) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations(),\n    };\n  }\n}\n","import { Token, TokenFactory, ComparableToken } from '../token';\n\nexport class TimestampToken extends ComparableToken {\n  static prim = 'timestamp';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { string?: string; int?: string }) {\n    if (val.string) {\n      return new Date(val.string).toISOString();\n    } else if (val.int) {\n      return new Date(Number(val.int) * 1000).toISOString();\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return TimestampToken.prim;\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ string }: any) {\n    return string;\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: TimestampToken.prim },\n    };\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\nimport BigNumber from 'bignumber.js';\n\nexport class IntValidationError extends TokenValidationError {\n  name: string = 'IntValidationError';\n  constructor(public value: any, public token: IntToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class IntToken extends ComparableToken {\n  static prim = 'int';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { [key: string]: string }): { [key: string]: any } {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n\n  public ExtractSchema() {\n    return IntToken.prim;\n  }\n\n  private isValid(val: any): IntValidationError | null {\n    const bigNumber = new BigNumber(val);\n    if (bigNumber.isNaN()) {\n      return new IntValidationError(val, this, `Value is not a number: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: new BigNumber(val).toFixed() };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: new BigNumber(val).toFixed() };\n  }\n\n  public ToBigMapKey(val: string | number) {\n    return {\n      key: { int: String(val) },\n      type: { prim: IntToken.prim },\n    };\n  }\n\n  public ToKey({ int }: any) {\n    return int;\n  }\n\n  compare(int1: string | number, int2: string | number) {\n    const o1 = Number(int1);\n    const o2 = Number(int2);\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n}\n","import { ComparableToken, TokenFactory } from './token';\nimport { UnitValue } from '../taquito-michelson-encoder';\n\nexport class UnitToken extends ComparableToken {\n  static prim = 'unit';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Encode(args: any[]): any {\n    args.pop();\n    return { prim: 'Unit' };\n  }\n\n  public EncodeObject(_val: any): any {\n    return { prim: 'Unit' };\n  }\n\n  public Execute(_val: { prim: string }) {\n    return UnitValue;\n  }\n\n  public ExtractSchema() {\n    return UnitToken.prim;\n  }\n\n  compare(_val1: any, _val2: any) {\n    return 0;\n  }\n\n  ToKey(_val: any) {\n    return UnitValue;\n  }\n\n  ToBigMapKey(_val: any) {\n    return {\n      key: { prim: 'Unit' },\n      type: { prim: UnitToken.prim },\n    };\n  }\n}\n","import { ComparableToken, TokenFactory, TokenValidationError } from './token';\nimport { encodeKey, validatePublicKey, ValidationResult } from '@taquito/utils';\n\nexport class KeyValidationError extends TokenValidationError {\n  name: string = 'KeyValidationError';\n  constructor(public value: any, public token: KeyToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class KeyToken extends ComparableToken {\n  static prim = 'key';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { bytes: string; string: string }): string {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodeKey(val.bytes);\n  }\n\n  private isValid(value: any): KeyValidationError | null {\n    if (validatePublicKey(value) !== ValidationResult.VALID) {\n      return new KeyValidationError(value, this, 'Key is not valid');\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return KeyToken.prim;\n  }\n\n  ToKey(val: any) {\n    return this.Execute(val);\n  }\n\n  ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: KeyToken.prim },\n    };\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from '../token';\nimport { encodeKeyHash, validateKeyHash, ValidationResult } from '@taquito/utils';\n\nexport class KeyHashValidationError extends TokenValidationError {\n  name: string = 'KeyHashValidationError';\n  constructor(public value: any, public token: KeyHashToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class KeyHashToken extends ComparableToken {\n  static prim = 'key_hash';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { bytes: string; string: string }): string {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodeKeyHash(val.bytes);\n  }\n\n  private isValid(value: any): KeyHashValidationError | null {\n    if (validateKeyHash(value) !== ValidationResult.VALID) {\n      return new KeyHashValidationError(value, this, `KeyHash is not valid: ${value}`);\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return KeyHashToken.prim;\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ string, bytes }: any) {\n    if (string) {\n      return string;\n    }\n\n    return encodeKeyHash(bytes);\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: KeyHashToken.prim },\n    };\n  }\n}\n","import { ComparableToken, TokenFactory, TokenValidationError } from './token';\nimport { validateSignature, ValidationResult } from '@taquito/utils';\n\nexport class SignatureValidationError extends TokenValidationError {\n  name: string = 'SignatureValidationError';\n  constructor(public value: any, public token: SignatureToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class SignatureToken extends ComparableToken {\n  static prim = 'signature';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): { [key: string]: any } {\n    return val.string;\n  }\n\n  private isValid(value: any): SignatureValidationError | null {\n    if (validateSignature(value) !== ValidationResult.VALID) {\n      return new SignatureValidationError(value, this, 'Signature is not valid');\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return SignatureToken.prim;\n  }\n\n  ToKey(val: any) {\n    return this.Execute(val);\n  }\n\n  ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: SignatureToken.prim },\n    };\n  }\n}\n","import { Token, TokenFactory } from './token';\n\nexport class LambdaToken extends Token {\n  static prim = 'lambda';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any) {\n    if (val.string) {\n      return val.string;\n    } else {\n      return val;\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return val;\n  }\n\n  public EncodeObject(val: any): any {\n    return val;\n  }\n\n  public ExtractSchema() {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    const rightToken = this.createToken(this.val.args[1], this.idx + 1);\n    return {\n      [LambdaToken.prim]: {\n        parameters: leftToken.ExtractSchema(),\n        returns: rightToken.ExtractSchema(),\n      },\n    };\n  }\n}\n","import { Token, TokenFactory } from './token';\n\nexport class OperationToken extends Token {\n  static prim = 'operation';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): { [key: string]: any } {\n    return val.string;\n  }\n\n  public Encode(...args: any[]): any {\n    const val = args.pop();\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    return { string: val };\n  }\n\n  public ExtractSchema() {\n    return OperationToken.prim;\n  }\n}\n","import { Token, TokenFactory, Semantic, TokenValidationError, ComparableToken } from './token';\n\nexport class SetValidationError extends TokenValidationError {\n  name: string = 'SetValidationError';\n  constructor(public value: any, public token: SetToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class SetToken extends Token {\n  static prim = 'set';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get KeySchema(): ComparableToken {\n    return this.createToken(this.val.args[0], 0) as any;\n  }\n\n  private isValid(value: any): SetValidationError | null {\n    if (Array.isArray(value)) {\n      return null;\n    }\n\n    return new SetValidationError(value, this, 'Value must be an array');\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return val\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .reduce((prev: any, current: any) => {\n        return [...prev, this.KeySchema.EncodeObject(current)];\n      }, []);\n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    return val.reduce((prev: any, current: any) => {\n      return [...prev, this.KeySchema.Execute(current, semantics)];\n    }, []);\n  }\n\n  public EncodeObject(args: any): any {\n    const err = this.isValid(args);\n    if (err) {\n      throw err;\n    }\n\n    return args\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .reduce((prev: any, current: any) => {\n        return [...prev, this.KeySchema.EncodeObject(current)];\n      }, []);\n  }\n\n  public ExtractSchema() {\n    return SetToken.prim;\n  }\n}\n","import { Token, TokenFactory, ComparableToken, TokenValidationError } from './token';\nimport { validateChain, ValidationResult } from '@taquito/utils';\n\nexport class ChainIDValidationError extends TokenValidationError {\n  name: string = 'ChainIDValidationError';\n  constructor(public value: any, public token: ChainIDToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class ChainIDToken extends ComparableToken {\n  static prim = 'chain_id';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(value: any): ChainIDValidationError | null {\n    if (validateChain(value) !== ValidationResult.VALID) {\n      return new ChainIDValidationError(value, this, 'ChainID is not valid');\n    }\n\n    return null;\n  }\n\n  public Execute(val: any): string {\n    return val[Object.keys(val)[0]];\n  }\n\n  public ExtractSchema() {\n    return ChainIDToken.prim;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  // tslint:disable-next-line: variable-name\n  public ToKey({ string }: any) {\n    return string;\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: ChainIDToken.prim },\n    };\n  }\n}\n","import { IntToken } from './comparable/int';\nimport { ContractToken } from './contract';\nimport { Token, TokenFactory, Semantic } from './token';\n\nexport class EncodeTicketError implements Error {\n  name = 'TicketEncodeError';\n  message = 'Tickets cannot be sent to the blockchain; they are created on-chain';\n}\n\nconst ticketerType = { \"prim\": \"contract\" };\nconst amountType = { \"prim\": \"int\" };\n\nexport class TicketToken extends Token {\n  static prim = 'ticket';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Encode(_args: any[]): any {\n    throw new EncodeTicketError()\n  }\n\n  public EncodeObject(_args: any): any {\n    throw new EncodeTicketError()  \n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    if (semantics && semantics[TicketToken.prim]) {\n      return semantics[TicketToken.prim](val, this.val);\n    }\n    const ticketer = this.createToken(ticketerType, this.idx);\n    const value = this.createToken(this.val.args[0], this.idx);\n    const amount = this.createToken(amountType, this.idx);\n    return {\n      ticketer: ticketer.Execute(val.args[0], semantics),\n      value: value.Execute(val.args[1], semantics),\n      amount: amount.Execute(val.args[2], semantics)\n    }\n  }\n\n  public ExtractSchema() {\n    const valueSchema = this.createToken(this.val.args[0], this.idx);\n    return {\n      ticketer: ContractToken.prim,\n      value: valueSchema.ExtractSchema(),\n      amount: IntToken.prim\n    }\n  }\n}\n","import { Token, TokenFactory, TokenValidationError } from './token';\n\nexport class NeverTokenError extends TokenValidationError {\n    name: string = 'NeverTokenError';\n    constructor(public value: any, public token: NeverToken, message: string) {\n      super(value, token, message);\n    }\n  }\n\nexport class NeverToken extends Token {\n  static prim = 'never';\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    throw new NeverTokenError(val, this, 'Assigning a value to the type never is forbidden.');\n  }\n  public EncodeObject(val: any): any {\n    throw new NeverTokenError(val, this, 'Assigning a value to the type never is forbidden.');\n  }\n  public Execute(val: any) {\n    throw new NeverTokenError(val, this, 'There is no literal value for the type never.');\n  }\n  public ExtractSchema() {\n    return NeverToken.prim;\n  }\n}","import { Semantic, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class SaplingStateValidationError extends TokenValidationError {\n  name: string = 'SaplingStateValidationError';\n  constructor(public value: any, public token: SaplingStateToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class SaplingStateToken extends Token {\n  static prim = 'sapling_state';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(val: any) {\n    return typeof val === 'object' && Object.keys(val).length === 0;\n  }\n\n  Execute(val: { int: string }, semantic?: Semantic) {\n    if (semantic && semantic[SaplingStateToken.prim]) {\n      return semantic[SaplingStateToken.prim](val, this.val);\n    }\n    if ('int' in val) {\n      return val.int;\n    } else {\n      // Unknown case\n      throw new Error(\n        `Sapling state is expecting an object with an int property. Got ${JSON.stringify(val)}`\n      );\n    }\n  }\n\n  Encode(args: any[]): any {\n    const val = args.pop();\n    if (this.isValid(val)) {\n      return [];\n    } else {\n      throw new SaplingStateValidationError(\n        val,\n        this,\n        `Invalid sapling_state. Received: ${val} while expecting: {}`\n      );\n    }\n  }\n\n  EncodeObject(val: any): any {\n    if (this.isValid(val)) {\n      return [];\n    } else {\n      throw new SaplingStateValidationError(\n        val,\n        this,\n        `Invalid sapling_state. Received: ${val} while expecting: {}`\n      );\n    }\n  }\n\n  ExtractSchema() {\n    return {\n      [SaplingStateToken.prim]: {\n        'memo-size': Number(this.val.args[0]['int']),\n      },\n    };\n  }\n}\n","import { Token, TokenFactory, TokenValidationError } from './token';\n\nexport class SaplingTransactionValidationError extends TokenValidationError {\n  name: string = 'SaplingTransactionValidationError';\n  constructor(public value: any, public token: SaplingTransactionToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class SaplingTransactionToken extends Token {\n  static prim = 'sapling_transaction';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  Execute(_val: any) {\n    throw new Error('There is no literal value for the sapling_transaction type.');\n  }\n\n  private validateBytes(val: any) {\n    const bytes = /^(0x|0X)?([0-9a-fA-F]*$)/.exec(val);\n    if (bytes && bytes[2].length % 2 === 0) {\n      return bytes[2];\n    } else {\n      throw new SaplingTransactionValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: Uint8Array | string) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args: any[]): any {\n    let val = args.pop();\n    val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n    return { bytes: String(val).toString() };\n  }\n\n  EncodeObject(val: string | Uint8Array) {\n    val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n    return { bytes: String(val).toString() };\n  }\n\n  ExtractSchema() {\n    return {\n      [SaplingTransactionToken.prim]: {\n        'memo-size': Number(this.val.args[0]['int']),\n      },\n    };\n  }\n}\n","import { Token, TokenFactory, TokenValidationError } from './token';\n\nexport class Bls12381frValidationError extends TokenValidationError {\n  name: string = 'Bls12381frValidationError';\n  constructor(public value: any, public token: Bls12381frToken, message: string) {\n    super(value, token, message);\n  }\n}\nexport class Bls12381frToken extends Token {\n  // An element of the BLS12-381 scalar field Fr\n  // see https://tezos.gitlab.io/michelson-reference/#type-bls12_381_fr\n  static prim = 'bls12_381_fr';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(val: any): Bls12381frValidationError | null {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381frValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: any) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args: any[]) {\n    let val = args.pop();\n    if (typeof val === 'number') {\n      return { int: val.toString() };\n    } else {\n      val = this.convertUint8ArrayToHexString(val);\n      const err = this.isValid(val);\n      if (err) {\n        throw err;\n      }\n      return { bytes: val };\n    }\n  }\n\n  EncodeObject(val: string | Uint8Array | number) {\n    if (typeof val === 'number') {\n      return { int: val.toString() };\n    } else {\n      val = this.convertUint8ArrayToHexString(val);\n      const err = this.isValid(val);\n      if (err) {\n        throw err;\n      }\n      return { bytes: val };\n    }\n  }\n\n  Execute(val: any): string {\n    return val.bytes;\n  }\n\n  public ExtractSchema() {\n    return Bls12381frToken.prim;\n  }\n}\n","import { Token, TokenFactory, TokenValidationError } from './token';\n\nexport class Bls12381g1ValidationError extends TokenValidationError {\n  name: string = 'Bls12381g1ValidationError';\n  constructor(public value: any, public token: Bls12381g1Token, message: string) {\n    super(value, token, message);\n  }\n}\nexport class Bls12381g1Token extends Token {\n  // A point on the BLS12-381 curve G1\n  // See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g1\n  static prim = 'bls12_381_g1';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(val: any): Bls12381g1ValidationError | null {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381g1ValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: any) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args: any[]) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { bytes: val };\n  }\n\n  EncodeObject(val: string | Uint8Array) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { bytes: val };\n  }\n\n  Execute(val: any): string {\n    return val.bytes;\n  }\n\n  public ExtractSchema() {\n    return Bls12381g1Token.prim;\n  }\n}\n","import { Token, TokenFactory, TokenValidationError } from './token';\n\nexport class Bls12381g2ValidationError extends TokenValidationError {\n  name: string = 'Bls12381g2ValidationError';\n  constructor(public value: any, public token: Bls12381g2Token, message: string) {\n    super(value, token, message);\n  }\n}\nexport class Bls12381g2Token extends Token {\n  // A point on the BLS12-381 curve G2\n  // See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g2\n  static prim = 'bls12_381_g2';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(val: any): Bls12381g2ValidationError | null {\n    if ( /^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381g2ValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: any) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args: any[]) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { bytes: val };\n  }\n\n  EncodeObject(val: string | Uint8Array) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { bytes: val };\n  }\n\n  Execute(val: any): string {\n    return val.bytes;\n  }\n\n  public ExtractSchema() {\n    return Bls12381g2Token.prim;\n  }\n}\n","import { PairToken } from './pair';\n\nimport { NatToken } from './comparable/nat';\n\nimport { StringToken } from './comparable/string';\n\nimport { BigMapToken } from './bigmap';\n\nimport { AddressToken } from './comparable/address';\n\nimport { MapToken } from './map';\n\nimport { BoolToken } from './comparable/bool';\n\nimport { OrToken } from './or';\n\nimport { ContractToken } from './contract';\n\nimport { ListToken } from './list';\nimport { MutezToken } from './comparable/mutez';\nimport { BytesToken } from './comparable/bytes';\nimport { OptionToken } from './option';\nimport { TimestampToken } from './comparable/timestamp';\nimport { IntToken } from './comparable/int';\nimport { UnitToken } from './unit';\nimport { KeyToken } from './key';\nimport { KeyHashToken } from './comparable/key_hash';\nimport { SignatureToken } from './signature';\nimport { LambdaToken } from './lambda';\nimport { OperationToken } from './operation';\nimport { SetToken } from './set';\nimport { ChainIDToken } from './chain-id';\nimport { TicketToken } from './ticket';\nimport { NeverToken } from './never';\nimport { SaplingStateToken } from './sapling-state';\nimport { SaplingTransactionToken } from './sapling-transaction';\nimport { Bls12381frToken } from './bls12-381-fr';\nimport { Bls12381g1Token } from './bls12-381-g1';\nimport { Bls12381g2Token } from './bls12-381-g2';\n\nexport const tokens = [\n  PairToken,\n  NatToken,\n  StringToken,\n  BigMapToken,\n  AddressToken,\n  MapToken,\n  BoolToken,\n  OrToken,\n  ContractToken,\n  ListToken,\n  MutezToken,\n  BytesToken,\n  OptionToken,\n  TimestampToken,\n  IntToken,\n  UnitToken,\n  KeyToken,\n  KeyHashToken,\n  SignatureToken,\n  LambdaToken,\n  OperationToken,\n  SetToken,\n  ChainIDToken,\n  TicketToken,\n  NeverToken,\n  SaplingStateToken,\n  SaplingTransactionToken,\n  Bls12381frToken,\n  Bls12381g1Token,\n  Bls12381g2Token\n];\n","import { tokens } from './tokens';\nimport { Token } from './token';\nimport { PairToken } from './pair';\n\nexport class InvalidTokenError implements Error {\n  name: string = 'Invalid token error';\n  constructor(public message: string, public data: any) { }\n}\n\nexport function createToken(val: any, idx: number): Token {\n  if (Array.isArray(val)) {\n    return new PairToken(val, idx, createToken);\n  }\n\n  const t = tokens.find(x => x.prim === val.prim);\n  if (!t) {\n    throw new InvalidTokenError('Malformed data expected a value with a valid prim property', val);\n  }\n  return new t(val, idx, createToken);\n}\n","import { MichelsonV1Expression, MichelsonV1ExpressionExtended, ScriptResponse } from '@taquito/rpc';\nimport { BigMapToken } from '../tokens/bigmap';\nimport { createToken } from '../tokens/createToken';\nimport { OrToken } from '../tokens/or';\nimport { PairToken } from '../tokens/pair';\nimport { BigMapKeyType, Semantic, Token, TokenValidationError } from '../tokens/token';\nimport { RpcTransaction } from './model';\nimport { Falsy } from './types';\n\nconst schemaTypeSymbol = Symbol.for('taquito-schema-type-symbol');\n\n// collapse comb pair\nfunction collapse(val: Token['val'] | any[], prim: string = PairToken.prim): Token['val'] {\n  if (Array.isArray(val)) {\n    return collapse({\n      prim: prim,\n      args: val,\n    }, prim);\n  }\n  if (val.prim === prim && val.args?.length! > 2) {\n    return {\n      ...val,\n      args: [val.args![0], {\n        prim: prim,\n        args: val.args?.slice(1),\n      }],\n    };\n  }\n  return val;\n}\n\nfunction deepEqual(a: Token['val'] | any[], b: Token['val'] | any[]): boolean {\n  const ac = collapse(a);\n  const bc = collapse(b);\n  return ac.prim === bc.prim &&\n    (ac.args === undefined && bc.args === undefined ||\n      ac.args !== undefined && bc.args !== undefined &&\n      ac.args.length === bc.args.length &&\n      ac.args.every((v, i) => deepEqual(v, bc.args?.[i]))) &&\n    (ac.annots === undefined && bc.annots === undefined ||\n      ac.annots !== undefined && bc.annots !== undefined &&\n      ac.annots.length === bc.annots.length &&\n      ac.annots.every((v, i) => v === bc.annots?.[i]));\n}\n\n/**\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\n */\nexport class Schema {\n  private root: Token;\n\n  public [schemaTypeSymbol] = true;\n\n  public static isSchema(obj: any): obj is Schema {\n    return obj && obj[schemaTypeSymbol] === true;\n  }\n\n  // TODO: Should we deprecate this?\n  private bigMap?: BigMapToken;\n\n  static fromRPCResponse(val: { script: ScriptResponse }) {\n    const storage: Falsy<MichelsonV1ExpressionExtended> =\n      val &&\n      val.script &&\n      Array.isArray(val.script.code) &&\n      (val.script.code.find((x: any) => x.prim === 'storage') as MichelsonV1ExpressionExtended);\n\n    if (!storage || !Array.isArray(storage.args)) {\n      throw new Error('Invalid rpc response passed as arguments');\n    }\n\n    return new Schema(storage.args[0]);\n  }\n\n  private isExpressionExtended(\n    val: any\n  ): val is Required<Pick<MichelsonV1ExpressionExtended, 'prim' | 'args'>> {\n    return 'prim' in val && Array.isArray(val.args);\n  }\n\n  constructor(val: MichelsonV1Expression) {\n    this.root = createToken(val, 0);\n\n    if (this.root instanceof BigMapToken) {\n      this.bigMap = this.root;\n    } else if (this.isExpressionExtended(val) && val.prim === 'pair') {\n      const exp = val.args[0];\n      if (this.isExpressionExtended(exp) && exp.prim === 'big_map') {\n        this.bigMap = new BigMapToken(exp, 0, createToken);\n      }\n    }\n  }\n\n  private removeTopLevelAnnotation(obj: any) {\n    // PairToken and OrToken can have redundant top level annotation in their storage\n    if (this.root instanceof PairToken || this.root instanceof OrToken) {\n      if (this.root.hasAnnotations() && typeof obj === 'object' && Object.keys(obj).length === 1) {\n        return obj[Object.keys(obj)[0]];\n      }\n    }\n\n    return obj;\n  }\n\n  Execute(val: any, semantics?: Semantic) {\n    const storage = this.root.Execute(val, semantics);\n\n    return this.removeTopLevelAnnotation(storage);\n  }\n\n  Typecheck(val: any) {\n    if (this.root instanceof BigMapToken && Number.isInteger(Number(val))) {\n      return true;\n    }\n    try {\n      this.root.EncodeObject(val);\n      return true;\n    } catch (ex) {\n      return false;\n    }\n  }\n\n  ExecuteOnBigMapDiff(diff: any[], semantics?: Semantic) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    if (!Array.isArray(diff)) {\n      throw new Error('Invalid big map diff. It must be an array');\n    }\n\n    const eltFormat = diff.map(({ key, value }) => ({ args: [key, value] }));\n\n    return this.bigMap.Execute(eltFormat, semantics);\n  }\n\n  ExecuteOnBigMapValue(key: any, semantics?: Semantic) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    return this.bigMap.ValueSchema.Execute(key, semantics);\n  }\n\n  EncodeBigMapKey(key: BigMapKeyType) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    try {\n      return this.bigMap.KeySchema.ToBigMapKey(key);\n    } catch (ex) {\n      throw new Error('Unable to encode big map key: ' + ex);\n    }\n  }\n\n  Encode(_value?: any) {\n    try {\n      return this.root.EncodeObject(_value);\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new Error(`Unable to encode storage object. ${ex}`);\n    }\n  }\n\n  ExtractSchema() {\n    return this.removeTopLevelAnnotation(this.root.ExtractSchema());\n  }\n\n  /**\n   * @deprecated\n   */\n  ComputeState(tx: RpcTransaction[], state: any) {\n    if (!this.bigMap) {\n      throw new Error('No big map schema');\n    }\n\n    const bigMap = tx.reduce((prev, current) => {\n      return {\n        ...prev,\n        ...this.ExecuteOnBigMapDiff(current.contents[0].metadata.operation_result.big_map_diff),\n      };\n    }, {});\n\n    return {\n      ...this.Execute(state),\n      [this.bigMap.annot()]: bigMap,\n    };\n  }\n\n  /**\n   * @description Look up in top-level pairs of the storage to find a value matching the specified type\n   *\n   * @returns The first value found that match the type or `undefined` if no value is found\n   * \n   * @param storage storage to parse to find the value\n   * @param valueType type of value to look for\n   *\n   */\n  FindFirstInTopLevelPair<T extends MichelsonV1Expression>(storage: any, valueType: any) {\n    return this.findValue(this.root['val'], storage, valueType) as T | undefined;\n  }\n\n  private findValue(schema: Token['val'] | any[], storage: any, valueToFind: any): any {\n    if (deepEqual(valueToFind, schema)) {\n      return storage;\n    }\n    if (Array.isArray(schema) || schema['prim'] === 'pair') {\n      const sch = collapse(schema);\n      const str = collapse(storage, 'Pair');\n      if (sch.args === undefined || str.args === undefined) {\n        throw new Error('Tokens have no arguments'); // unlikely\n      }\n      return this.findValue(sch.args[0], str.args[0], valueToFind) ||\n        this.findValue(sch.args[1], str.args[1], valueToFind);\n    }\n  }\n}\n","import { createToken } from '../tokens/createToken';\nimport { Token, Semantic, TokenValidationError } from '../tokens/token';\nimport { OrToken } from '../tokens/or';\nimport { OptionToken } from '../tokens/option';\nimport { ScriptResponse, MichelsonV1ExpressionExtended, MichelsonV1Expression } from '@taquito/rpc';\nimport { Falsy } from './types';\n\n/**\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\n */\nexport class ParameterSchema {\n  private root: Token;\n\n  static fromRPCResponse(val: { script: ScriptResponse }) {\n    const parameter: Falsy<MichelsonV1ExpressionExtended> =\n      val &&\n      val.script &&\n      Array.isArray(val.script.code) &&\n      (val.script.code.find((x: any) => x.prim === 'parameter') as MichelsonV1ExpressionExtended);\n    if (!parameter || !Array.isArray(parameter.args)) {\n      throw new Error('Invalid rpc response passed as arguments');\n    }\n\n    return new ParameterSchema(parameter.args[0]);\n  }\n\n  get isMultipleEntryPoint() {\n    return (\n      this.root instanceof OrToken ||\n      (this.root instanceof OptionToken && this.root.subToken() instanceof OrToken)\n    );\n  }\n\n  get hasAnnotation() {\n    if (this.isMultipleEntryPoint) {\n      return Object.keys(this.ExtractSchema())[0] !== '0';\n    } else {\n      return true;\n    }\n  }\n\n  constructor(val: MichelsonV1Expression) {\n    this.root = createToken(val, 0);\n  }\n\n  Execute(val: any, semantics?: Semantic) {\n    return this.root.Execute(val, semantics);\n  }\n\n  Encode(...args: any[]) {\n    try {\n      return this.root.Encode(args.reverse());\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new Error(`Unable to encode storage object. ${ex}`);\n    }\n  }\n\n  ExtractSchema() {\n    return this.root.ExtractSchema();\n  }\n\n  ExtractSignatures() {\n    return this.root.ExtractSignature();\n  }\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"commitHash\": \"a8e9548e650215186f661033b59299ace72c9ee6\",\n    \"version\": \"9.2.0\"\n};\n/* tslint:enable */\n","/**\n * @packageDocumentation\n * @module @taquito/michelson-encoder\n */\n\nexport * from './schema/storage';\nexport * from './schema/parameter';\nexport { Semantic, BigMapKeyType } from './tokens/token';\nexport * from './errors';\n\nexport const UnitValue = Symbol();\nexport const SaplingStateValue = {};\nexport * from './michelson-map';\nexport { VERSION } from './version';\n"]},"metadata":{},"sourceType":"module"}