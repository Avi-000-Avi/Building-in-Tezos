{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BeaconMessageType, PermissionScope } from '..';\nimport { getAccountIdentifier } from '../utils/get-account-identifier';\n/**\n * @internalapi\n *\n * The PermissionValidator is used to check if permissions for a certain message type have been given\n */\n\nexport class PermissionValidator {\n  /**\n   * Check if permissions were given for a certain message type.\n   *\n   * PermissionRequest and BroadcastRequest will always return true.\n   *\n   * @param message Beacon Message\n   */\n  static hasPermission(message, getOne, getAll) {\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (message.type) {\n        case BeaconMessageType.PermissionRequest:\n        case BeaconMessageType.BroadcastRequest:\n          {\n            return true;\n          }\n\n        case BeaconMessageType.OperationRequest:\n          {\n            const accountIdentifier = yield getAccountIdentifier(message.sourceAddress, message.network);\n            const permission = yield getOne(accountIdentifier);\n\n            if (!permission) {\n              return false;\n            }\n\n            return permission.scopes.includes(PermissionScope.OPERATION_REQUEST);\n          }\n\n        case BeaconMessageType.SignPayloadRequest:\n          {\n            const permissions = yield getAll();\n            const filteredPermissions = permissions.filter(permission => permission.address === message.sourceAddress);\n\n            if (filteredPermissions.length === 0) {\n              return false;\n            }\n\n            return filteredPermissions.some(permission => permission.scopes.includes(PermissionScope.SIGN));\n          }\n\n        default:\n          throw new Error('Message not handled');\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/managers/PermissionValidator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAwB,iBAAxB,EAA2C,eAA3C,QAAkE,IAAlE;AAEA,SAAS,oBAAT,QAAqC,iCAArC;AAEA;;;;AAIG;;AACH,OAAM,MAAO,mBAAP,CAA0B;AAC9B;;;;;;AAMG;AAC8B,SAAb,aAAa,CAC/B,OAD+B,EAE/B,MAF+B,EAG/B,MAH+B,EAGU;;AAEzC,cAAQ,OAAO,CAAC,IAAhB;AACE,aAAK,iBAAiB,CAAC,iBAAvB;AACA,aAAK,iBAAiB,CAAC,gBAAvB;AAAyC;AACvC,mBAAO,IAAP;AACD;;AACD,aAAK,iBAAiB,CAAC,gBAAvB;AAAyC;AACvC,kBAAM,iBAAiB,GAAW,MAAM,oBAAoB,CAC1D,OAAO,CAAC,aADkD,EAE1D,OAAO,CAAC,OAFkD,CAA5D;AAKA,kBAAM,UAAU,GAAiC,MAAM,MAAM,CAAC,iBAAD,CAA7D;;AACA,gBAAI,CAAC,UAAL,EAAiB;AACf,qBAAO,KAAP;AACD;;AAED,mBAAO,UAAU,CAAC,MAAX,CAAkB,QAAlB,CAA2B,eAAe,CAAC,iBAA3C,CAAP;AACD;;AACD,aAAK,iBAAiB,CAAC,kBAAvB;AAA2C;AACzC,kBAAM,WAAW,GAAuB,MAAM,MAAM,EAApD;AACA,kBAAM,mBAAmB,GAAuB,WAAW,CAAC,MAAZ,CAC7C,UAAD,IAAkC,UAAU,CAAC,OAAX,KAAuB,OAAO,CAAC,aADnB,CAAhD;;AAIA,gBAAI,mBAAmB,CAAC,MAApB,KAA+B,CAAnC,EAAsC;AACpC,qBAAO,KAAP;AACD;;AAED,mBAAO,mBAAmB,CAAC,IAApB,CAA0B,UAAD,IAC9B,UAAU,CAAC,MAAX,CAAkB,QAAlB,CAA2B,eAAe,CAAC,IAA3C,CADK,CAAP;AAGD;;AACD;AACE,gBAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AAjCJ;AAmCD,K;AAAA;;AAhD6B","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BeaconMessageType, PermissionScope } from '..';\nimport { getAccountIdentifier } from '../utils/get-account-identifier';\n/**\n * @internalapi\n *\n * The PermissionValidator is used to check if permissions for a certain message type have been given\n */\nexport class PermissionValidator {\n    /**\n     * Check if permissions were given for a certain message type.\n     *\n     * PermissionRequest and BroadcastRequest will always return true.\n     *\n     * @param message Beacon Message\n     */\n    static hasPermission(message, getOne, getAll) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (message.type) {\n                case BeaconMessageType.PermissionRequest:\n                case BeaconMessageType.BroadcastRequest: {\n                    return true;\n                }\n                case BeaconMessageType.OperationRequest: {\n                    const accountIdentifier = yield getAccountIdentifier(message.sourceAddress, message.network);\n                    const permission = yield getOne(accountIdentifier);\n                    if (!permission) {\n                        return false;\n                    }\n                    return permission.scopes.includes(PermissionScope.OPERATION_REQUEST);\n                }\n                case BeaconMessageType.SignPayloadRequest: {\n                    const permissions = yield getAll();\n                    const filteredPermissions = permissions.filter((permission) => permission.address === message.sourceAddress);\n                    if (filteredPermissions.length === 0) {\n                        return false;\n                    }\n                    return filteredPermissions.some((permission) => permission.scopes.includes(PermissionScope.SIGN));\n                }\n                default:\n                    throw new Error('Message not handled');\n            }\n        });\n    }\n}\n//# sourceMappingURL=PermissionValidator.js.map"]},"metadata":{},"sourceType":"module"}