{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as sodium from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * Generate a deterministic account identifier based on an address and a network\n *\n * @param address\n * @param network\n */\n\nexport const getAccountIdentifier = (address, network) => __awaiter(void 0, void 0, void 0, function* () {\n  const data = [address, network.type];\n\n  if (network.name) {\n    data.push(`name:${network.name}`);\n  }\n\n  if (network.rpcUrl) {\n    data.push(`rpc:${network.rpcUrl}`);\n  }\n\n  yield sodium.ready;\n  const buffer = Buffer.from(sodium.crypto_generichash(10, data.join('-')));\n  return bs58check.encode(buffer);\n});","map":{"version":3,"sources":["../../../src/utils/get-account-identifier.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,MAAZ,MAAwB,oBAAxB;AACA,OAAO,KAAK,SAAZ,MAA2B,WAA3B;AAGA;;;;;;;AAOG;;AACH,OAAO,MAAM,oBAAoB,GAAG,CAAO,OAAP,EAAwB,OAAxB,KAA6D,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC/F,QAAM,IAAI,GAAa,CAAC,OAAD,EAAU,OAAO,CAAC,IAAlB,CAAvB;;AACA,MAAI,OAAO,CAAC,IAAZ,EAAkB;AAChB,IAAA,IAAI,CAAC,IAAL,CAAU,QAAQ,OAAO,CAAC,IAAI,EAA9B;AACD;;AACD,MAAI,OAAO,CAAC,MAAZ,EAAoB;AAClB,IAAA,IAAI,CAAC,IAAL,CAAU,OAAO,OAAO,CAAC,MAAM,EAA/B;AACD;;AAED,QAAM,MAAM,CAAC,KAAb;AAEA,QAAM,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,kBAAP,CAA0B,EAA1B,EAA8B,IAAI,CAAC,IAAL,CAAU,GAAV,CAA9B,CAAZ,CAAf;AAEA,SAAO,SAAS,CAAC,MAAV,CAAiB,MAAjB,CAAP;AACD,CAdgG,CAA1F","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as sodium from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * Generate a deterministic account identifier based on an address and a network\n *\n * @param address\n * @param network\n */\nexport const getAccountIdentifier = (address, network) => __awaiter(void 0, void 0, void 0, function* () {\n    const data = [address, network.type];\n    if (network.name) {\n        data.push(`name:${network.name}`);\n    }\n    if (network.rpcUrl) {\n        data.push(`rpc:${network.rpcUrl}`);\n    }\n    yield sodium.ready;\n    const buffer = Buffer.from(sodium.crypto_generichash(10, data.join('-')));\n    return bs58check.encode(buffer);\n});\n//# sourceMappingURL=get-account-identifier.js.map"]},"metadata":{},"sourceType":"module"}