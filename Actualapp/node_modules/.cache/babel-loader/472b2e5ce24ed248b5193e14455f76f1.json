{"ast":null,"code":"export var BeaconErrorType;\n\n(function (BeaconErrorType) {\n  /**\n   * {@link BroadcastBeaconError}\n   *\n   * Will be returned if the user chooses that the transaction is broadcast but there is an error (eg. node not available).\n   *\n   * Returned by: Broadcast | Operation Request\n   */\n  BeaconErrorType[\"BROADCAST_ERROR\"] = \"BROADCAST_ERROR\";\n  /**\n   * {@link NetworkNotSupportedBeaconError}\n   *\n   * Will be returned if the selected network is not supported by the wallet / extension.\n   *\n   * Returned by: Permission\n   */\n\n  BeaconErrorType[\"NETWORK_NOT_SUPPORTED\"] = \"NETWORK_NOT_SUPPORTED\";\n  /**\n   * {@link NoAddressBeaconError}\n   *\n   * Will be returned if there is no address present for the protocol / network requested.\n   *\n   * Returned by: Permission\n   */\n\n  BeaconErrorType[\"NO_ADDRESS_ERROR\"] = \"NO_ADDRESS_ERROR\";\n  /**\n   * {@link NoPrivateKeyBeaconError}\n   *\n   * Will be returned if the private key matching the sourceAddress could not be found.\n   *\n   * Returned by: Sign\n   */\n\n  BeaconErrorType[\"NO_PRIVATE_KEY_FOUND_ERROR\"] = \"NO_PRIVATE_KEY_FOUND_ERROR\";\n  /**\n   * {@link NotGrantedBeaconError}\n   *\n   * Will be returned if the signature was blocked // (Not needed?) Permission: Will be returned if the permissions requested by the App were not granted.\n   *\n   * Returned by: Sign\n   */\n\n  BeaconErrorType[\"NOT_GRANTED_ERROR\"] = \"NOT_GRANTED_ERROR\";\n  /**\n   * {@link ParametersInvalidBeaconError}\n   *\n   * Will be returned if any of the parameters are invalid.\n   *\n   * Returned by: Operation Request\n   */\n\n  BeaconErrorType[\"PARAMETERS_INVALID_ERROR\"] = \"PARAMETERS_INVALID_ERROR\";\n  /**\n   * {@link TooManyOperationsBeaconError}\n   *\n   * Will be returned if too many operations were in the request and they were not able to fit into a single operation group.\n   *\n   * Returned by: Operation Request\n   */\n\n  BeaconErrorType[\"TOO_MANY_OPERATIONS\"] = \"TOO_MANY_OPERATIONS\";\n  /**\n   * {@link TransactionInvalidBeaconError}\n   *\n   * Will be returned if the transaction is not parsable or is rejected by the node.\n   *\n   * Returned by: Broadcast\n   */\n\n  BeaconErrorType[\"TRANSACTION_INVALID_ERROR\"] = \"TRANSACTION_INVALID_ERROR\";\n  /**\n   * {@link SignatureTypeNotSupportedBeaconError}\n   *\n   * Will be returned if the signing type is not supported.\n   *\n   * Returned by: Sign\n   */\n\n  BeaconErrorType[\"SIGNATURE_TYPE_NOT_SUPPORTED\"] = \"SIGNATURE_TYPE_NOT_SUPPORTED\"; // TODO: ENCRYPTION\n  // /**\n  //  * {@link EncryptionTypeNotSupportedBeaconError}\n  //  *\n  //  * Will be returned if the encryption type is not supported.\n  //  *\n  //  * Returned by: Encrypt\n  //  */\n  // ENCRYPTION_TYPE_NOT_SUPPORTED = 'ENCRYPTION_TYPE_NOT_SUPPORTED',\n\n  /**\n   * {@link AbortedBeaconError}\n   *\n   * Will be returned if the request was aborted by the user or the wallet.\n   *\n   * Returned by: Permission | Operation Request | Sign Request | Broadcast\n   */\n\n  BeaconErrorType[\"ABORTED_ERROR\"] = \"ABORTED_ERROR\";\n  /**\n   * {@link UnknownBeaconError}\n   *\n   * Used as a wildcard if an unexpected error occured.\n   *\n   * Returned by: Permission | Operation Request | Sign Request | Broadcast\n   */\n\n  BeaconErrorType[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n})(BeaconErrorType || (BeaconErrorType = {}));","map":{"version":3,"sources":["../../../src/types/BeaconErrorType.ts"],"names":[],"mappings":"AAAA,OAAA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACzB;;;;;;AAMG;AACH,EAAA,eAAA,CAAA,iBAAA,CAAA,GAAA,iBAAA;AAEA;;;;;;AAMG;;AACH,EAAA,eAAA,CAAA,uBAAA,CAAA,GAAA,uBAAA;AAEA;;;;;;AAMG;;AACH,EAAA,eAAA,CAAA,kBAAA,CAAA,GAAA,kBAAA;AAEA;;;;;;AAMG;;AACH,EAAA,eAAA,CAAA,4BAAA,CAAA,GAAA,4BAAA;AAEA;;;;;;AAMG;;AACH,EAAA,eAAA,CAAA,mBAAA,CAAA,GAAA,mBAAA;AAEA;;;;;;AAMG;;AACH,EAAA,eAAA,CAAA,0BAAA,CAAA,GAAA,0BAAA;AAEA;;;;;;AAMG;;AACH,EAAA,eAAA,CAAA,qBAAA,CAAA,GAAA,qBAAA;AAEA;;;;;;AAMG;;AACH,EAAA,eAAA,CAAA,2BAAA,CAAA,GAAA,2BAAA;AAEA;;;;;;AAMG;;AACH,EAAA,eAAA,CAAA,8BAAA,CAAA,GAAA,8BAAA,CAhFyB,CAkFzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;AAMG;;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,GAAA,eAAA;AAEA;;;;;;AAMG;;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,GAAA,eAAA;AACD,CA7GD,EAAY,eAAe,KAAf,eAAe,GAAA,EAAA,CAA3B","sourceRoot":"","sourcesContent":["export var BeaconErrorType;\n(function (BeaconErrorType) {\n    /**\n     * {@link BroadcastBeaconError}\n     *\n     * Will be returned if the user chooses that the transaction is broadcast but there is an error (eg. node not available).\n     *\n     * Returned by: Broadcast | Operation Request\n     */\n    BeaconErrorType[\"BROADCAST_ERROR\"] = \"BROADCAST_ERROR\";\n    /**\n     * {@link NetworkNotSupportedBeaconError}\n     *\n     * Will be returned if the selected network is not supported by the wallet / extension.\n     *\n     * Returned by: Permission\n     */\n    BeaconErrorType[\"NETWORK_NOT_SUPPORTED\"] = \"NETWORK_NOT_SUPPORTED\";\n    /**\n     * {@link NoAddressBeaconError}\n     *\n     * Will be returned if there is no address present for the protocol / network requested.\n     *\n     * Returned by: Permission\n     */\n    BeaconErrorType[\"NO_ADDRESS_ERROR\"] = \"NO_ADDRESS_ERROR\";\n    /**\n     * {@link NoPrivateKeyBeaconError}\n     *\n     * Will be returned if the private key matching the sourceAddress could not be found.\n     *\n     * Returned by: Sign\n     */\n    BeaconErrorType[\"NO_PRIVATE_KEY_FOUND_ERROR\"] = \"NO_PRIVATE_KEY_FOUND_ERROR\";\n    /**\n     * {@link NotGrantedBeaconError}\n     *\n     * Will be returned if the signature was blocked // (Not needed?) Permission: Will be returned if the permissions requested by the App were not granted.\n     *\n     * Returned by: Sign\n     */\n    BeaconErrorType[\"NOT_GRANTED_ERROR\"] = \"NOT_GRANTED_ERROR\";\n    /**\n     * {@link ParametersInvalidBeaconError}\n     *\n     * Will be returned if any of the parameters are invalid.\n     *\n     * Returned by: Operation Request\n     */\n    BeaconErrorType[\"PARAMETERS_INVALID_ERROR\"] = \"PARAMETERS_INVALID_ERROR\";\n    /**\n     * {@link TooManyOperationsBeaconError}\n     *\n     * Will be returned if too many operations were in the request and they were not able to fit into a single operation group.\n     *\n     * Returned by: Operation Request\n     */\n    BeaconErrorType[\"TOO_MANY_OPERATIONS\"] = \"TOO_MANY_OPERATIONS\";\n    /**\n     * {@link TransactionInvalidBeaconError}\n     *\n     * Will be returned if the transaction is not parsable or is rejected by the node.\n     *\n     * Returned by: Broadcast\n     */\n    BeaconErrorType[\"TRANSACTION_INVALID_ERROR\"] = \"TRANSACTION_INVALID_ERROR\";\n    /**\n     * {@link SignatureTypeNotSupportedBeaconError}\n     *\n     * Will be returned if the signing type is not supported.\n     *\n     * Returned by: Sign\n     */\n    BeaconErrorType[\"SIGNATURE_TYPE_NOT_SUPPORTED\"] = \"SIGNATURE_TYPE_NOT_SUPPORTED\";\n    // TODO: ENCRYPTION\n    // /**\n    //  * {@link EncryptionTypeNotSupportedBeaconError}\n    //  *\n    //  * Will be returned if the encryption type is not supported.\n    //  *\n    //  * Returned by: Encrypt\n    //  */\n    // ENCRYPTION_TYPE_NOT_SUPPORTED = 'ENCRYPTION_TYPE_NOT_SUPPORTED',\n    /**\n     * {@link AbortedBeaconError}\n     *\n     * Will be returned if the request was aborted by the user or the wallet.\n     *\n     * Returned by: Permission | Operation Request | Sign Request | Broadcast\n     */\n    BeaconErrorType[\"ABORTED_ERROR\"] = \"ABORTED_ERROR\";\n    /**\n     * {@link UnknownBeaconError}\n     *\n     * Used as a wildcard if an unexpected error occured.\n     *\n     * Returned by: Permission | Operation Request | Sign Request | Broadcast\n     */\n    BeaconErrorType[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n})(BeaconErrorType || (BeaconErrorType = {}));\n//# sourceMappingURL=BeaconErrorType.js.map"]},"metadata":{},"sourceType":"module"}