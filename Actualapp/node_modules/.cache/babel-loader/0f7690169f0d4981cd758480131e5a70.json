{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { TransportStatus, StorageKey, PostMessageTransport } from '..';\nimport { Logger } from '../utils/Logger';\nconst logger = new Logger('DappPostMessageTransport');\n/**\n * @internalapi\n *\n *\n */\n\nexport class DappPostMessageTransport extends PostMessageTransport {\n  constructor(name, keyPair, storage) {\n    super(name, keyPair, storage, StorageKey.TRANSPORT_POSTMESSAGE_PEERS_DAPP);\n  }\n\n  startOpenChannelListener() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.client.listenForChannelOpening(peer => __awaiter(this, void 0, void 0, function* () {\n        logger.log('connect', `received PostMessagePairingResponse`, peer);\n        yield this.addPeer(peer);\n        this._isConnected = TransportStatus.CONNECTED;\n\n        if (this.newPeerListener) {\n          this.newPeerListener(peer);\n          this.newPeerListener = undefined; // TODO: Remove this once we use the id\n        }\n      }));\n    });\n  }\n\n  listenForNewPeer(newPeerListener) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('listenForNewPeer');\n      this.newPeerListener = newPeerListener;\n    });\n  }\n\n  stopListeningForNewPeers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('stopListeningForNewPeers');\n      this.newPeerListener = undefined;\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/transports/DappPostMessageTransport.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,eAAT,EAA0B,UAA1B,EAAsC,oBAAtC,QAA2E,IAA3E;AACA,SAAS,MAAT,QAAuB,iBAAvB;AAGA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,0BAAX,CAAf;AAEA;;;;AAIG;;AACH,OAAM,MAAO,wBAAP,SAAwC,oBAAxC,CAGL;AACC,EAAA,WAAA,CAAY,IAAZ,EAA0B,OAA1B,EAAmD,OAAnD,EAAmE;AACjE,UAAM,IAAN,EAAY,OAAZ,EAAqB,OAArB,EAA8B,UAAU,CAAC,gCAAzC;AACD;;AAEY,EAAA,wBAAwB,GAAA;;AACnC,aAAO,KAAK,MAAL,CAAY,uBAAZ,CAA2C,IAAP,IAAmD,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC5F,QAAA,MAAM,CAAC,GAAP,CAAW,SAAX,EAAsB,qCAAtB,EAA6D,IAA7D;AAEA,cAAM,KAAK,OAAL,CAAa,IAAb,CAAN;AAEA,aAAK,YAAL,GAAoB,eAAe,CAAC,SAApC;;AAEA,YAAI,KAAK,eAAT,EAA0B;AACxB,eAAK,eAAL,CAAqB,IAArB;AACA,eAAK,eAAL,GAAuB,SAAvB,CAFwB,CAES;AAClC;AACF,OAX6F,CAAvF,CAAP;AAYD,K;AAAA;;AAEY,EAAA,gBAAgB,CAC3B,eAD2B,EACwC;;AAEnE,MAAA,MAAM,CAAC,GAAP,CAAW,kBAAX;AACA,WAAK,eAAL,GAAuB,eAAvB;AACD,K;AAAA;;AAEY,EAAA,wBAAwB,GAAA;;AACnC,MAAA,MAAM,CAAC,GAAP,CAAW,0BAAX;AACA,WAAK,eAAL,GAAuB,SAAvB;AACD,K;AAAA;;AA9BF","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { TransportStatus, StorageKey, PostMessageTransport } from '..';\nimport { Logger } from '../utils/Logger';\nconst logger = new Logger('DappPostMessageTransport');\n/**\n * @internalapi\n *\n *\n */\nexport class DappPostMessageTransport extends PostMessageTransport {\n    constructor(name, keyPair, storage) {\n        super(name, keyPair, storage, StorageKey.TRANSPORT_POSTMESSAGE_PEERS_DAPP);\n    }\n    startOpenChannelListener() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.client.listenForChannelOpening((peer) => __awaiter(this, void 0, void 0, function* () {\n                logger.log('connect', `received PostMessagePairingResponse`, peer);\n                yield this.addPeer(peer);\n                this._isConnected = TransportStatus.CONNECTED;\n                if (this.newPeerListener) {\n                    this.newPeerListener(peer);\n                    this.newPeerListener = undefined; // TODO: Remove this once we use the id\n                }\n            }));\n        });\n    }\n    listenForNewPeer(newPeerListener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('listenForNewPeer');\n            this.newPeerListener = newPeerListener;\n        });\n    }\n    stopListeningForNewPeers() {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('stopListeningForNewPeers');\n            this.newPeerListener = undefined;\n        });\n    }\n}\n//# sourceMappingURL=DappPostMessageTransport.js.map"]},"metadata":{},"sourceType":"module"}