{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageKey } from '..';\nimport { StorageManager } from './StorageManager';\nimport { PermissionValidator } from './PermissionValidator';\n/**\n * @internalapi\n *\n * The AccountManager provides CRUD functionality for account entities and persists them to the provided storage.\n */\n\nexport class AccountManager {\n  constructor(storage) {\n    this.storageManager = new StorageManager(storage, StorageKey.ACCOUNTS);\n  }\n\n  getAccounts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getAll();\n    });\n  }\n\n  getAccount(accountIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getOne(account => account.accountIdentifier === accountIdentifier);\n    });\n  }\n\n  addAccount(accountInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.addOne(accountInfo, account => account.accountIdentifier === accountInfo.accountIdentifier);\n    });\n  }\n\n  removeAccount(accountIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(account => account.accountIdentifier === accountIdentifier);\n    });\n  }\n\n  removeAccounts(accountIdentifiers) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(account => accountIdentifiers.includes(account.accountIdentifier));\n    });\n  }\n\n  removeAllAccounts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.removeAll();\n    });\n  }\n\n  hasPermission(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return PermissionValidator.hasPermission(message, this.getAccount.bind(this), this.getAccounts.bind(this));\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/managers/AccountManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAkB,UAAlB,QAAgE,IAAhE;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,mBAAT,QAAoC,uBAApC;AAEA;;;;AAIG;;AACH,OAAM,MAAO,cAAP,CAAqB;AAGzB,EAAA,WAAA,CAAY,OAAZ,EAA4B;AAC1B,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB,OAAnB,EAA4B,UAAU,CAAC,QAAvC,CAAtB;AACD;;AAEY,EAAA,WAAW,GAAA;;AACtB,aAAO,KAAK,cAAL,CAAoB,MAApB,EAAP;AACD,K;AAAA;;AAEY,EAAA,UAAU,CAAC,iBAAD,EAA0B;;AAC/C,aAAO,KAAK,cAAL,CAAoB,MAApB,CAA4B,OAAD,IAAa,OAAO,CAAC,iBAAR,KAA8B,iBAAtE,CAAP;AACD,K;AAAA;;AAEY,EAAA,UAAU,CAAC,WAAD,EAAyB;;AAC9C,aAAO,KAAK,cAAL,CAAoB,MAApB,CACL,WADK,EAEJ,OAAD,IAAa,OAAO,CAAC,iBAAR,KAA8B,WAAW,CAAC,iBAFlD,CAAP;AAID,K;AAAA;;AAEY,EAAA,aAAa,CAAC,iBAAD,EAA0B;;AAClD,aAAO,KAAK,cAAL,CAAoB,MAApB,CAA4B,OAAD,IAAa,OAAO,CAAC,iBAAR,KAA8B,iBAAtE,CAAP;AACD,K;AAAA;;AAEY,EAAA,cAAc,CAAC,kBAAD,EAA6B;;AACtD,aAAO,KAAK,cAAL,CAAoB,MAApB,CAA4B,OAAD,IAChC,kBAAkB,CAAC,QAAnB,CAA4B,OAAO,CAAC,iBAApC,CADK,CAAP;AAGD,K;AAAA;;AAEY,EAAA,iBAAiB,GAAA;;AAC5B,aAAO,KAAK,cAAL,CAAoB,SAApB,EAAP;AACD,K;AAAA;;AAEY,EAAA,aAAa,CAAC,OAAD,EAAuB;;AAC/C,aAAO,mBAAmB,CAAC,aAApB,CACL,OADK,EAEL,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAFK,EAGL,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAHK,CAAP;AAKD,K;AAAA;;AA1CwB","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageKey } from '..';\nimport { StorageManager } from './StorageManager';\nimport { PermissionValidator } from './PermissionValidator';\n/**\n * @internalapi\n *\n * The AccountManager provides CRUD functionality for account entities and persists them to the provided storage.\n */\nexport class AccountManager {\n    constructor(storage) {\n        this.storageManager = new StorageManager(storage, StorageKey.ACCOUNTS);\n    }\n    getAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getAll();\n        });\n    }\n    getAccount(accountIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getOne((account) => account.accountIdentifier === accountIdentifier);\n        });\n    }\n    addAccount(accountInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.addOne(accountInfo, (account) => account.accountIdentifier === accountInfo.accountIdentifier);\n        });\n    }\n    removeAccount(accountIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((account) => account.accountIdentifier === accountIdentifier);\n        });\n    }\n    removeAccounts(accountIdentifiers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((account) => accountIdentifiers.includes(account.accountIdentifier));\n        });\n    }\n    removeAllAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.removeAll();\n        });\n    }\n    hasPermission(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return PermissionValidator.hasPermission(message, this.getAccount.bind(this), this.getAccounts.bind(this));\n        });\n    }\n}\n//# sourceMappingURL=AccountManager.js.map"]},"metadata":{},"sourceType":"module"}