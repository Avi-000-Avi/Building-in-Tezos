{"ast":null,"code":"import { Buffer } from 'buffer';\n\nvar _a, _b;\n\nvar Prefix;\n\n(function (Prefix) {\n  Prefix[\"TZ1\"] = \"tz1\";\n  Prefix[\"TZ2\"] = \"tz2\";\n  Prefix[\"TZ3\"] = \"tz3\";\n  Prefix[\"KT\"] = \"KT\";\n  Prefix[\"KT1\"] = \"KT1\";\n  Prefix[\"EDSK2\"] = \"edsk2\";\n  Prefix[\"SPSK\"] = \"spsk\";\n  Prefix[\"P2SK\"] = \"p2sk\";\n  Prefix[\"EDPK\"] = \"edpk\";\n  Prefix[\"SPPK\"] = \"sppk\";\n  Prefix[\"P2PK\"] = \"p2pk\";\n  Prefix[\"EDESK\"] = \"edesk\";\n  Prefix[\"SPESK\"] = \"spesk\";\n  Prefix[\"P2ESK\"] = \"p2esk\";\n  Prefix[\"EDSK\"] = \"edsk\";\n  Prefix[\"EDSIG\"] = \"edsig\";\n  Prefix[\"SPSIG\"] = \"spsig\";\n  Prefix[\"P2SIG\"] = \"p2sig\";\n  Prefix[\"SIG\"] = \"sig\";\n  Prefix[\"NET\"] = \"Net\";\n  Prefix[\"NCE\"] = \"nce\";\n  Prefix[\"B\"] = \"b\";\n  Prefix[\"O\"] = \"o\";\n  Prefix[\"LO\"] = \"Lo\";\n  Prefix[\"LLO\"] = \"LLo\";\n  Prefix[\"P\"] = \"P\";\n  Prefix[\"CO\"] = \"Co\";\n  Prefix[\"ID\"] = \"id\";\n  Prefix[\"EXPR\"] = \"expr\";\n  Prefix[\"TZ\"] = \"TZ\";\n})(Prefix || (Prefix = {}));\n\nvar prefix = (_a = {}, _a[Prefix.TZ1] = new Uint8Array([6, 161, 159]), _a[Prefix.TZ2] = new Uint8Array([6, 161, 161]), _a[Prefix.TZ3] = new Uint8Array([6, 161, 164]), _a[Prefix.KT] = new Uint8Array([2, 90, 121]), _a[Prefix.KT1] = new Uint8Array([2, 90, 121]), _a[Prefix.EDSK] = new Uint8Array([43, 246, 78, 7]), _a[Prefix.EDSK2] = new Uint8Array([13, 15, 58, 7]), _a[Prefix.SPSK] = new Uint8Array([17, 162, 224, 201]), _a[Prefix.P2SK] = new Uint8Array([16, 81, 238, 189]), _a[Prefix.EDPK] = new Uint8Array([13, 15, 37, 217]), _a[Prefix.SPPK] = new Uint8Array([3, 254, 226, 86]), _a[Prefix.P2PK] = new Uint8Array([3, 178, 139, 127]), _a[Prefix.EDESK] = new Uint8Array([7, 90, 60, 179, 41]), _a[Prefix.SPESK] = new Uint8Array([0x09, 0xed, 0xf1, 0xae, 0x96]), _a[Prefix.P2ESK] = new Uint8Array([0x09, 0x30, 0x39, 0x73, 0xab]), _a[Prefix.EDSIG] = new Uint8Array([9, 245, 205, 134, 18]), _a[Prefix.SPSIG] = new Uint8Array([13, 115, 101, 19, 63]), _a[Prefix.P2SIG] = new Uint8Array([54, 240, 44, 52]), _a[Prefix.SIG] = new Uint8Array([4, 130, 43]), _a[Prefix.NET] = new Uint8Array([87, 82, 0]), _a[Prefix.NCE] = new Uint8Array([69, 220, 169]), _a[Prefix.B] = new Uint8Array([1, 52]), _a[Prefix.O] = new Uint8Array([5, 116]), _a[Prefix.LO] = new Uint8Array([133, 233]), _a[Prefix.LLO] = new Uint8Array([29, 159, 109]), _a[Prefix.P] = new Uint8Array([2, 170]), _a[Prefix.CO] = new Uint8Array([79, 179]), _a[Prefix.ID] = new Uint8Array([153, 103]), _a[Prefix.EXPR] = new Uint8Array([13, 44, 64, 27]), // Legacy prefix\n_a[Prefix.TZ] = new Uint8Array([2, 90, 121]), _a);\nvar prefixLength = (_b = {}, _b[Prefix.TZ1] = 20, _b[Prefix.TZ2] = 20, _b[Prefix.TZ3] = 20, _b[Prefix.KT] = 20, _b[Prefix.KT1] = 20, _b[Prefix.EDPK] = 32, _b[Prefix.SPPK] = 33, _b[Prefix.P2PK] = 33, _b[Prefix.EDSIG] = 64, _b[Prefix.SPSIG] = 64, _b[Prefix.P2SIG] = 64, _b[Prefix.SIG] = 64, _b[Prefix.NET] = 4, _b[Prefix.B] = 32, _b[Prefix.P] = 32, _b[Prefix.O] = 32, _b);\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __spreadArray(to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n}\n\nvar bs58check$1 = require('bs58check');\n\nvar ValidationResult;\n\n(function (ValidationResult) {\n  ValidationResult[ValidationResult[\"NO_PREFIX_MATCHED\"] = 0] = \"NO_PREFIX_MATCHED\";\n  ValidationResult[ValidationResult[\"INVALID_CHECKSUM\"] = 1] = \"INVALID_CHECKSUM\";\n  ValidationResult[ValidationResult[\"INVALID_LENGTH\"] = 2] = \"INVALID_LENGTH\";\n  ValidationResult[ValidationResult[\"VALID\"] = 3] = \"VALID\";\n})(ValidationResult || (ValidationResult = {}));\n\nfunction isValidPrefix(value) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  return value in prefix;\n}\n/**\r\n * @description This function is called by the validation functions ([[validateAddress]], [[validateChain]], [[validateContractAddress]], [[validateKeyHash]], [[validateSignature]], [[validatePublicKey]]).\r\n * Verify if the value has the right prefix or return `NO_PREFIX_MATCHED`,\r\n * decode the value using base58 and return `INVALID_CHECKSUM` if it fails,\r\n * check if the length of the value matches the prefix type or return `INVALID_LENGTH`.\r\n * If all checks pass, return `VALID`.\r\n *\r\n * @param value Value to validate\r\n * @param prefixes prefix the value should have\r\n */\n\n\nfunction validatePrefixedValue(value, prefixes) {\n  var match = new RegExp(\"^(\" + prefixes.join('|') + \")\").exec(value);\n\n  if (!match || match.length === 0) {\n    return ValidationResult.NO_PREFIX_MATCHED;\n  }\n\n  var prefixKey = match[0];\n\n  if (!isValidPrefix(prefixKey)) {\n    return ValidationResult.NO_PREFIX_MATCHED;\n  } // Remove annotation from contract address before doing the validation\n\n\n  var contractAddress = /^(KT1\\w{33})(\\%(.*))?/.exec(value);\n\n  if (contractAddress) {\n    value = contractAddress[1];\n  } // decodeUnsafe return undefined if decoding fail\n\n\n  var decoded = bs58check$1.decodeUnsafe(value);\n\n  if (!decoded) {\n    return ValidationResult.INVALID_CHECKSUM;\n  }\n\n  decoded = decoded.slice(prefix[prefixKey].length);\n\n  if (decoded.length !== prefixLength[prefixKey]) {\n    return ValidationResult.INVALID_LENGTH;\n  }\n\n  return ValidationResult.VALID;\n}\n\nvar implicitPrefix = [Prefix.TZ1, Prefix.TZ2, Prefix.TZ3];\nvar contractPrefix = [Prefix.KT1];\nvar signaturePrefix = [Prefix.EDSIG, Prefix.P2SIG, Prefix.SPSIG, Prefix.SIG];\nvar pkPrefix = [Prefix.EDPK, Prefix.SPPK, Prefix.P2PK];\n/**\r\n * @description Used to check if an address or a contract address is valid.\r\n *\r\n * @returns\r\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\r\n *\r\n * @example\r\n * ```\r\n * import { validateAddress } from '@taquito/utils';\r\n * const pkh = 'tz1L9r8mWmRPndRhuvMCWESLGSVeFzQ9NAWx'\r\n * const validation = validateAddress(pkh)\r\n * console.log(validation)\r\n * // This example return 3 which correspond to VALID\r\n * ```\r\n */\n\nfunction validateAddress(value) {\n  return validatePrefixedValue(value, __spreadArray(__spreadArray([], __read(implicitPrefix)), __read(contractPrefix)));\n}\n/**\r\n * @description Used to check if a chain id is valid.\r\n *\r\n * @returns\r\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\r\n *\r\n * @example\r\n * ```\r\n * import { validateChain } from '@taquito/utils';\r\n * const chainId = 'NetXdQprcVkpaWU'\r\n * const validation = validateChain(chainId)\r\n * console.log(validation)\r\n * // This example return 3 which correspond to VALID\r\n * ```\r\n */\n\n\nfunction validateChain(value) {\n  return validatePrefixedValue(value, [Prefix.NET]);\n}\n/**\r\n * @description Used to check if a contract address is valid.\r\n *\r\n * @returns\r\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\r\n *\r\n * @example\r\n * ```\r\n * import { validateContractAddress } from '@taquito/utils';\r\n * const contractAddress = 'KT1JVErLYTgtY8uGGZ4mso2npTSxqVLDRVbC'\r\n * const validation = validateContractAddress(contractAddress)\r\n * console.log(validation)\r\n * // This example return 3 which correspond to VALID\r\n * ```\r\n */\n\n\nfunction validateContractAddress(value) {\n  return validatePrefixedValue(value, contractPrefix);\n}\n/**\r\n * @description Used to check if a key hash is valid.\r\n *\r\n * @returns\r\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\r\n *\r\n * @example\r\n * ```\r\n * import { validateKeyHash } from '@taquito/utils';\r\n * const keyHashWithoutPrefix = '1L9r8mWmRPndRhuvMCWESLGSVeFzQ9NAWx'\r\n * const validation = validateKeyHash(keyHashWithoutPrefix)\r\n * console.log(validation)\r\n * // This example return 0 which correspond to NO_PREFIX_MATCHED\r\n * ```\r\n */\n\n\nfunction validateKeyHash(value) {\n  return validatePrefixedValue(value, implicitPrefix);\n}\n/**\r\n * @description Used to check if a signature is valid.\r\n *\r\n * @returns\r\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\r\n *\r\n * @example\r\n * ```\r\n * import { validateSignature } from '@taquito/utils';\r\n * const signature = 'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg'\r\n * const validation = validateSignature(signature)\r\n * console.log(validation)\r\n * // This example return 3 which correspond to VALID\r\n * ```\r\n */\n\n\nfunction validateSignature(value) {\n  return validatePrefixedValue(value, signaturePrefix);\n}\n/**\r\n * @description Used to check if a signature is valid.\r\n *\r\n * @returns\r\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\r\n *\r\n * @example\r\n * ```\r\n * import { validatePublicKey } from '@taquito/utils';\r\n * const publicKey = 'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg'\r\n * const validation = validatePublicKey(publicKey)\r\n * console.log(validation)\r\n * // This example return 3 which correspond to VALID\r\n * ```\r\n */\n\n\nfunction validatePublicKey(value) {\n  return validatePrefixedValue(value, pkPrefix);\n} // IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n\n/* tslint:disable */\n\n\nvar VERSION = {\n  \"commitHash\": \"a8e9548e650215186f661033b59299ace72c9ee6\",\n  \"version\": \"9.2.0\"\n};\n/* tslint:enable */\n\n/**\r\n * @packageDocumentation\r\n * @module @taquito/utils\r\n */\n\nvar blake = require('blakejs');\n\nvar bs58check = require('bs58check');\n/**\r\n *\r\n * @description Hash a string using the BLAKE2b algorithm, base58 encode the hash obtained and appends the prefix 'expr' to it\r\n *\r\n * @param value Value in hex\r\n */\n\n\nfunction encodeExpr(value) {\n  var blakeHash = blake.blake2b(hex2buf(value), null, 32);\n  return b58cencode(blakeHash, prefix['expr']);\n}\n/**\r\n *\r\n * @description Return the operation hash of a signed operation\r\n * @param value Value in hex of a signed operation\r\n */\n\n\nfunction encodeOpHash(value) {\n  var blakeHash = blake.blake2b(hex2buf(value), null, 32);\n  return b58cencode(blakeHash, prefix.o);\n}\n/**\r\n *\r\n * @description Base58 encode a string or a Uint8Array and append a prefix to it\r\n *\r\n * @param value Value to base58 encode\r\n * @param prefix prefix to append to the encoded string\r\n */\n\n\nfunction b58cencode(value, prefix) {\n  var payloadAr = typeof value === 'string' ? Uint8Array.from(Buffer.from(value, 'hex')) : value;\n  var n = new Uint8Array(prefix.length + payloadAr.length);\n  n.set(prefix);\n  n.set(payloadAr, prefix.length);\n  return bs58check.encode(Buffer.from(n.buffer));\n}\n/**\r\n *\r\n * @description Base58 decode a string and remove the prefix from it\r\n *\r\n * @param value Value to base58 decode\r\n * @param prefix prefix to remove from the decoded string\r\n */\n\n\nvar b58cdecode = function (enc, prefixArg) {\n  return bs58check.decode(enc).slice(prefixArg.length);\n};\n/**\r\n *\r\n * @description Base58 decode a string with predefined prefix\r\n *\r\n * @param value Value to base58 decode\r\n */\n\n\nfunction b58decode(payload) {\n  var _a;\n\n  var buf = bs58check.decode(payload);\n  var prefixMap = (_a = {}, _a[prefix.tz1.toString()] = '0000', _a[prefix.tz2.toString()] = '0001', _a[prefix.tz3.toString()] = '0002', _a);\n  var pref = prefixMap[new Uint8Array(buf.slice(0, 3)).toString()];\n\n  if (pref) {\n    // tz addresses\n    var hex = buf2hex(buf.slice(3));\n    return pref + hex;\n  } else {\n    // other (kt addresses)\n    return '01' + buf2hex(buf.slice(3, 42)) + '00';\n  }\n}\n/**\r\n *\r\n * @description Base58 encode a public key using predefined prefix\r\n *\r\n * @param value Public Key to base58 encode\r\n */\n\n\nfunction encodePubKey(value) {\n  if (value.substring(0, 2) === '00') {\n    var pref = {\n      '0000': prefix.tz1,\n      '0001': prefix.tz2,\n      '0002': prefix.tz3\n    };\n    return b58cencode(value.substring(4), pref[value.substring(0, 4)]);\n  }\n\n  return b58cencode(value.substring(2, 42), prefix.KT);\n}\n/**\r\n *\r\n * @description Base58 encode a key according to its prefix\r\n *\r\n * @param value Key to base58 encode\r\n */\n\n\nfunction encodeKey(value) {\n  if (value[0] === '0') {\n    var pref = {\n      '00': new Uint8Array([13, 15, 37, 217]),\n      '01': new Uint8Array([3, 254, 226, 86]),\n      '02': new Uint8Array([3, 178, 139, 127])\n    };\n    return b58cencode(value.substring(2), pref[value.substring(0, 2)]);\n  }\n}\n/**\r\n *\r\n * @description Base58 encode a key hash according to its prefix\r\n *\r\n * @param value Key to base58 encode\r\n */\n\n\nfunction encodeKeyHash(value) {\n  if (value[0] === '0') {\n    var pref = {\n      '00': new Uint8Array([6, 161, 159]),\n      '01': new Uint8Array([6, 161, 161]),\n      '02': new Uint8Array([6, 161, 164])\n    };\n    return b58cencode(value.substring(2), pref[value.substring(0, 2)]);\n  }\n}\n/**\r\n *\r\n * @description Convert an hex string to a Uint8Array\r\n *\r\n * @param hex Hex string to convert\r\n */\n\n\nvar hex2buf = function (hex) {\n  return new Uint8Array(hex.match(/[\\da-f]{2}/gi).map(function (h) {\n    return parseInt(h, 16);\n  }));\n};\n/**\r\n *\r\n * @description Merge 2 buffers together\r\n *\r\n * @param b1 First buffer\r\n * @param b2 Second buffer\r\n */\n\n\nvar mergebuf = function (b1, b2) {\n  var r = new Uint8Array(b1.length + b2.length);\n  r.set(b1);\n  r.set(b2, b1.length);\n  return r;\n};\n/**\r\n *\r\n * @description Flatten a michelson json representation to an array\r\n *\r\n * @param s michelson json\r\n */\n\n\nvar mic2arr = function me2(s) {\n  var ret = [];\n\n  if (Object.prototype.hasOwnProperty.call(s, 'prim')) {\n    if (s.prim === 'Pair') {\n      ret.push(me2(s.args[0]));\n      ret = ret.concat(me2(s.args[1]));\n    } else if (s.prim === 'Elt') {\n      ret = {\n        key: me2(s.args[0]),\n        val: me2(s.args[1])\n      };\n    } else if (s.prim === 'True') {\n      ret = true;\n    } else if (s.prim === 'False') {\n      ret = false;\n    }\n  } else if (Array.isArray(s)) {\n    var sc = s.length;\n\n    for (var i = 0; i < sc; i++) {\n      var n = me2(s[i]);\n\n      if (typeof n.key !== 'undefined') {\n        if (Array.isArray(ret)) {\n          ret = {\n            keys: [],\n            vals: []\n          };\n        }\n\n        ret.keys.push(n.key);\n        ret.vals.push(n.val);\n      } else {\n        ret.push(n);\n      }\n    }\n  } else if (Object.prototype.hasOwnProperty.call(s, 'string')) {\n    ret = s.string;\n  } else if (Object.prototype.hasOwnProperty.call(s, 'int')) {\n    ret = parseInt(s.int, 10);\n  } else {\n    ret = s;\n  }\n\n  return ret;\n};\n/**\r\n *\r\n * @description Convert a buffer to an hex string\r\n *\r\n * @param buffer Buffer to convert\r\n */\n\n\nvar buf2hex = function (buffer) {\n  var byteArray = new Uint8Array(buffer);\n  var hexParts = [];\n  byteArray.forEach(function (byte) {\n    var hex = byte.toString(16);\n    var paddedHex = (\"00\" + hex).slice(-2);\n    hexParts.push(paddedHex);\n  });\n  return hexParts.join('');\n};\n/**\r\n *\r\n * @description Convert a string to bytes\r\n *\r\n * @param str String to convert\r\n */\n\n\nfunction char2Bytes(str) {\n  return Buffer.from(str, 'utf8').toString('hex');\n}\n/**\r\n *\r\n * @description Convert bytes to a string\r\n *\r\n * @param str Bytes to convert\r\n */\n\n\nfunction bytes2Char(hex) {\n  return Buffer.from(hex2buf(hex)).toString('utf8');\n}\n\nexport { Prefix, VERSION, ValidationResult, b58cdecode, b58cencode, b58decode, buf2hex, bytes2Char, char2Bytes, encodeExpr, encodeKey, encodeKeyHash, encodeOpHash, encodePubKey, hex2buf, isValidPrefix, mergebuf, mic2arr, prefix, prefixLength, validateAddress, validateChain, validateContractAddress, validateKeyHash, validatePublicKey, validateSignature };","map":{"version":3,"sources":["../src/constants.ts","../src/validators.ts","../src/version.ts","../src/taquito-utils.ts"],"names":["bs58check"],"mappings":"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","sourcesContent":["export enum Prefix {\n  TZ1 = 'tz1',\n  TZ2 = 'tz2',\n  TZ3 = 'tz3',\n  KT = 'KT',\n  KT1 = 'KT1',\n\n  EDSK2 = 'edsk2',\n  SPSK = 'spsk',\n  P2SK = 'p2sk',\n\n  EDPK = 'edpk',\n  SPPK = 'sppk',\n  P2PK = 'p2pk',\n\n  EDESK = 'edesk',\n  SPESK = 'spesk',\n  P2ESK = 'p2esk',\n\n  EDSK = 'edsk',\n  EDSIG = 'edsig',\n  SPSIG = 'spsig',\n  P2SIG = 'p2sig',\n  SIG = 'sig',\n\n  NET = 'Net',\n  NCE = 'nce',\n  B = 'b',\n  O = 'o',\n  LO = 'Lo',\n  LLO = 'LLo',\n  P = 'P',\n  CO = 'Co',\n  ID = 'id',\n\n  EXPR = 'expr',\n  TZ = 'TZ',\n}\n\nexport const prefix = {\n  [Prefix.TZ1]: new Uint8Array([6, 161, 159]),\n  [Prefix.TZ2]: new Uint8Array([6, 161, 161]),\n  [Prefix.TZ3]: new Uint8Array([6, 161, 164]),\n  [Prefix.KT]: new Uint8Array([2, 90, 121]),\n  [Prefix.KT1]: new Uint8Array([2, 90, 121]),\n\n  [Prefix.EDSK]: new Uint8Array([43, 246, 78, 7]),\n  [Prefix.EDSK2]: new Uint8Array([13, 15, 58, 7]),\n  [Prefix.SPSK]: new Uint8Array([17, 162, 224, 201]),\n  [Prefix.P2SK]: new Uint8Array([16, 81, 238, 189]),\n\n  [Prefix.EDPK]: new Uint8Array([13, 15, 37, 217]),\n  [Prefix.SPPK]: new Uint8Array([3, 254, 226, 86]),\n  [Prefix.P2PK]: new Uint8Array([3, 178, 139, 127]),\n\n  [Prefix.EDESK]: new Uint8Array([7, 90, 60, 179, 41]),\n  [Prefix.SPESK]: new Uint8Array([0x09, 0xed, 0xf1, 0xae, 0x96]),\n  [Prefix.P2ESK]: new Uint8Array([0x09, 0x30, 0x39, 0x73, 0xab]),\n\n  [Prefix.EDSIG]: new Uint8Array([9, 245, 205, 134, 18]),\n  [Prefix.SPSIG]: new Uint8Array([13, 115, 101, 19, 63]),\n  [Prefix.P2SIG]: new Uint8Array([54, 240, 44, 52]),\n  [Prefix.SIG]: new Uint8Array([4, 130, 43]),\n\n  [Prefix.NET]: new Uint8Array([87, 82, 0]),\n  [Prefix.NCE]: new Uint8Array([69, 220, 169]),\n  [Prefix.B]: new Uint8Array([1, 52]),\n  [Prefix.O]: new Uint8Array([5, 116]),\n  [Prefix.LO]: new Uint8Array([133, 233]),\n  [Prefix.LLO]: new Uint8Array([29, 159, 109]),\n  [Prefix.P]: new Uint8Array([2, 170]),\n  [Prefix.CO]: new Uint8Array([79, 179]),\n  [Prefix.ID]: new Uint8Array([153, 103]),\n\n  [Prefix.EXPR]: new Uint8Array([13, 44, 64, 27]),\n  // Legacy prefix\n  [Prefix.TZ]: new Uint8Array([2, 90, 121]),\n};\n\nexport const prefixLength: { [key: string]: number } = {\n  [Prefix.TZ1]: 20,\n  [Prefix.TZ2]: 20,\n  [Prefix.TZ3]: 20,\n  [Prefix.KT]: 20,\n  [Prefix.KT1]: 20,\n  [Prefix.EDPK]: 32,\n  [Prefix.SPPK]: 33,\n  [Prefix.P2PK]: 33,\n  [Prefix.EDSIG]: 64,\n  [Prefix.SPSIG]: 64,\n  [Prefix.P2SIG]: 64,\n  [Prefix.SIG]: 64,\n  [Prefix.NET]: 4,\n  [Prefix.B]: 32,\n  [Prefix.P]: 32,\n  [Prefix.O]: 32\n};\n","import { prefix, prefixLength, Prefix } from './constants';\n\nconst bs58check = require('bs58check');\n\nexport enum ValidationResult {\n  NO_PREFIX_MATCHED,\n  INVALID_CHECKSUM,\n  INVALID_LENGTH,\n  VALID,\n}\n\nexport function isValidPrefix(value: any): value is Prefix {\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  return value in prefix;\n}\n  /**\n   * @description This function is called by the validation functions ([[validateAddress]], [[validateChain]], [[validateContractAddress]], [[validateKeyHash]], [[validateSignature]], [[validatePublicKey]]).\n   * Verify if the value has the right prefix or return `NO_PREFIX_MATCHED`,\n   * decode the value using base58 and return `INVALID_CHECKSUM` if it fails,\n   * check if the length of the value matches the prefix type or return `INVALID_LENGTH`.\n   * If all checks pass, return `VALID`.\n   *\n   * @param value Value to validate\n   * @param prefixes prefix the value should have\n   */\nfunction validatePrefixedValue(value: any, prefixes: Prefix[]) {\n  const match = new RegExp(`^(${prefixes.join('|')})`).exec(value);\n  if (!match || match.length === 0) {\n    return ValidationResult.NO_PREFIX_MATCHED;\n  }\n\n  const prefixKey = match[0];\n\n  if (!isValidPrefix(prefixKey)) {\n    return ValidationResult.NO_PREFIX_MATCHED;\n  }\n\n  // Remove annotation from contract address before doing the validation\n  const contractAddress = /^(KT1\\w{33})(\\%(.*))?/.exec(value);\n  if (contractAddress) {\n    value = contractAddress[1];\n  }\n\n  // decodeUnsafe return undefined if decoding fail\n  let decoded = bs58check.decodeUnsafe(value);\n  if (!decoded) {\n    return ValidationResult.INVALID_CHECKSUM;\n  }\n\n  decoded = decoded.slice(prefix[prefixKey].length);\n  if (decoded.length !== prefixLength[prefixKey]) {\n    return ValidationResult.INVALID_LENGTH;\n  }\n\n  return ValidationResult.VALID;\n}\n\nconst implicitPrefix = [Prefix.TZ1, Prefix.TZ2, Prefix.TZ3];\nconst contractPrefix = [Prefix.KT1];\nconst signaturePrefix = [Prefix.EDSIG, Prefix.P2SIG, Prefix.SPSIG, Prefix.SIG];\nconst pkPrefix = [Prefix.EDPK, Prefix.SPPK, Prefix.P2PK];\n\n  /**\n   * @description Used to check if an address or a contract address is valid.\n   *\n   * @returns\n   * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n   *\n   * @example\n   * ```\n   * import { validateAddress } from '@taquito/utils';\n   * const pkh = 'tz1L9r8mWmRPndRhuvMCWESLGSVeFzQ9NAWx'\n   * const validation = validateAddress(pkh)\n   * console.log(validation)\n   * // This example return 3 which correspond to VALID\n   * ```\n   */\nexport function validateAddress(value: any): ValidationResult {\n  return validatePrefixedValue(value, [...implicitPrefix, ...contractPrefix]);\n}\n  /**\n   * @description Used to check if a chain id is valid.\n   *\n   * @returns\n   * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n   *\n   * @example\n   * ```\n   * import { validateChain } from '@taquito/utils';\n   * const chainId = 'NetXdQprcVkpaWU'\n   * const validation = validateChain(chainId)\n   * console.log(validation)\n   * // This example return 3 which correspond to VALID\n   * ```\n   */\nexport function validateChain(value: any): ValidationResult {\n  return validatePrefixedValue(value, [Prefix.NET]);\n}\n  /**\n   * @description Used to check if a contract address is valid.\n   *\n   * @returns\n   * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n   *\n   * @example\n   * ```\n   * import { validateContractAddress } from '@taquito/utils';\n   * const contractAddress = 'KT1JVErLYTgtY8uGGZ4mso2npTSxqVLDRVbC'\n   * const validation = validateContractAddress(contractAddress)\n   * console.log(validation)\n   * // This example return 3 which correspond to VALID\n   * ```\n   */\nexport function validateContractAddress(value: any): ValidationResult {\n  return validatePrefixedValue(value, contractPrefix);\n}\n  /**\n   * @description Used to check if a key hash is valid.\n   *\n   * @returns\n   * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n   *\n   * @example\n   * ```\n   * import { validateKeyHash } from '@taquito/utils';\n   * const keyHashWithoutPrefix = '1L9r8mWmRPndRhuvMCWESLGSVeFzQ9NAWx'\n   * const validation = validateKeyHash(keyHashWithoutPrefix)\n   * console.log(validation)\n   * // This example return 0 which correspond to NO_PREFIX_MATCHED\n   * ```\n   */\nexport function validateKeyHash(value: any): ValidationResult {\n  return validatePrefixedValue(value, implicitPrefix);\n}\n  /**\n   * @description Used to check if a signature is valid.\n   *\n   * @returns\n   * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n   *\n   * @example\n   * ```\n   * import { validateSignature } from '@taquito/utils';\n   * const signature = 'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg'\n   * const validation = validateSignature(signature)\n   * console.log(validation)\n   * // This example return 3 which correspond to VALID\n   * ```\n   */\nexport function validateSignature(value: any): ValidationResult {\n  return validatePrefixedValue(value, signaturePrefix);\n}\n  /**\n   * @description Used to check if a signature is valid.\n   *\n   * @returns\n   * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n   *\n   * @example\n   * ```\n   * import { validatePublicKey } from '@taquito/utils';\n   * const publicKey = 'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg'\n   * const validation = validatePublicKey(publicKey)\n   * console.log(validation)\n   * // This example return 3 which correspond to VALID\n   * ```\n   */\nexport function validatePublicKey(value: any): ValidationResult {\n  return validatePrefixedValue(value, pkPrefix);\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"commitHash\": \"a8e9548e650215186f661033b59299ace72c9ee6\",\n    \"version\": \"9.2.0\"\n};\n/* tslint:enable */\n","/**\n * @packageDocumentation\n * @module @taquito/utils\n */\n\n/*\n * Some code in this file is originally from sotez and eztz\n * Copyright (c) 2018 Andrew Kishino\n * Copyright (c) 2017 Stephen Andrews\n */\n\nimport { Buffer } from 'buffer';\nimport { prefix } from './constants';\nconst blake = require('blakejs');\nconst bs58check = require('bs58check');\n\nexport * from './validators';\nexport { VERSION } from './version';\n\nexport { prefix, Prefix, prefixLength } from './constants';\n\n/**\n *\n * @description Hash a string using the BLAKE2b algorithm, base58 encode the hash obtained and appends the prefix 'expr' to it\n *\n * @param value Value in hex\n */\nexport function encodeExpr(value: string) {\n  const blakeHash = blake.blake2b(hex2buf(value), null, 32);\n  return b58cencode(blakeHash, prefix['expr']);\n}\n\n/**\n *\n * @description Return the operation hash of a signed operation \n * @param value Value in hex of a signed operation\n */\n export function encodeOpHash(value: string) {\n  const blakeHash = blake.blake2b(hex2buf(value), null, 32);\n  return b58cencode(blakeHash, prefix.o);\n}\n\n/**\n *\n * @description Base58 encode a string or a Uint8Array and append a prefix to it\n *\n * @param value Value to base58 encode\n * @param prefix prefix to append to the encoded string\n */\nexport function b58cencode(value: string | Uint8Array, prefix: Uint8Array) {\n  const payloadAr = typeof value === 'string' ? Uint8Array.from(Buffer.from(value, 'hex')) : value;\n\n  const n = new Uint8Array(prefix.length + payloadAr.length);\n  n.set(prefix);\n  n.set(payloadAr, prefix.length);\n\n  return bs58check.encode(Buffer.from(n.buffer));\n}\n\n/**\n *\n * @description Base58 decode a string and remove the prefix from it\n *\n * @param value Value to base58 decode\n * @param prefix prefix to remove from the decoded string\n */\nexport const b58cdecode = (enc: string, prefixArg: Uint8Array): Uint8Array =>\n  bs58check.decode(enc).slice(prefixArg.length);\n\n/**\n *\n * @description Base58 decode a string with predefined prefix\n *\n * @param value Value to base58 decode\n */\nexport function b58decode(payload: string) {\n  const buf: Buffer = bs58check.decode(payload);\n\n  const prefixMap = {\n    [prefix.tz1.toString()]: '0000',\n    [prefix.tz2.toString()]: '0001',\n    [prefix.tz3.toString()]: '0002',\n  };\n\n  let pref = prefixMap[new Uint8Array(buf.slice(0, 3)).toString()];\n  if (pref) {\n    // tz addresses\n    const hex = buf2hex(buf.slice(3));\n    return pref + hex;\n  } else {\n    // other (kt addresses)\n    return '01' + buf2hex(buf.slice(3, 42)) + '00';\n  }\n}\n\n/**\n *\n * @description Base58 encode a public key using predefined prefix\n *\n * @param value Public Key to base58 encode\n */\nexport function encodePubKey(value: string) {\n  if (value.substring(0, 2) === '00') {\n    const pref: { [key: string]: Uint8Array } = {\n      '0000': prefix.tz1,\n      '0001': prefix.tz2,\n      '0002': prefix.tz3,\n    };\n\n    return b58cencode(value.substring(4), pref[value.substring(0, 4)]);\n  }\n\n  return b58cencode(value.substring(2, 42), prefix.KT);\n}\n\n/**\n *\n * @description Base58 encode a key according to its prefix\n *\n * @param value Key to base58 encode\n */\nexport function encodeKey(value: string) {\n  if (value[0] === '0') {\n    const pref: { [key: string]: Uint8Array } = {\n      '00': new Uint8Array([13, 15, 37, 217]),\n      '01': new Uint8Array([3, 254, 226, 86]),\n      '02': new Uint8Array([3, 178, 139, 127]),\n    };\n\n    return b58cencode(value.substring(2), pref[value.substring(0, 2)]);\n  }\n}\n\n/**\n *\n * @description Base58 encode a key hash according to its prefix\n *\n * @param value Key to base58 encode\n */\nexport function encodeKeyHash(value: string) {\n  if (value[0] === '0') {\n    const pref: { [key: string]: Uint8Array } = {\n      '00': new Uint8Array([6, 161, 159]),\n      '01': new Uint8Array([6, 161, 161]),\n      '02': new Uint8Array([6, 161, 164]),\n    };\n\n    return b58cencode(value.substring(2), pref[value.substring(0, 2)]);\n  }\n}\n\n/**\n *\n * @description Convert an hex string to a Uint8Array\n *\n * @param hex Hex string to convert\n */\nexport const hex2buf = (hex: string): Uint8Array => {\n  return new Uint8Array(hex.match(/[\\da-f]{2}/gi)!.map((h) => parseInt(h, 16)));\n};\n\n/**\n *\n * @description Merge 2 buffers together\n *\n * @param b1 First buffer\n * @param b2 Second buffer\n */\nexport const mergebuf = (b1: Uint8Array, b2: Uint8Array): Uint8Array => {\n  const r = new Uint8Array(b1.length + b2.length);\n  r.set(b1);\n  r.set(b2, b1.length);\n  return r;\n};\n\n/**\n *\n * @description Flatten a michelson json representation to an array\n *\n * @param s michelson json\n */\nexport const mic2arr = function me2(s: any): any {\n  let ret: any = [];\n  if (Object.prototype.hasOwnProperty.call(s, 'prim')) {\n    if (s.prim === 'Pair') {\n      ret.push(me2(s.args[0]));\n      ret = ret.concat(me2(s.args[1]));\n    } else if (s.prim === 'Elt') {\n      ret = {\n        key: me2(s.args[0]),\n        val: me2(s.args[1]),\n      };\n    } else if (s.prim === 'True') {\n      ret = true;\n    } else if (s.prim === 'False') {\n      ret = false;\n    }\n  } else if (Array.isArray(s)) {\n    const sc = s.length;\n    for (let i = 0; i < sc; i++) {\n      const n = me2(s[i]);\n      if (typeof n.key !== 'undefined') {\n        if (Array.isArray(ret)) {\n          ret = {\n            keys: [],\n            vals: [],\n          };\n        }\n        ret.keys.push(n.key);\n        ret.vals.push(n.val);\n      } else {\n        ret.push(n);\n      }\n    }\n  } else if (Object.prototype.hasOwnProperty.call(s, 'string')) {\n    ret = s.string;\n  } else if (Object.prototype.hasOwnProperty.call(s, 'int')) {\n    ret = parseInt(s.int, 10);\n  } else {\n    ret = s;\n  }\n  return ret;\n};\n\n/**\n *\n * @description Convert a buffer to an hex string\n *\n * @param buffer Buffer to convert\n */\nexport const buf2hex = (buffer: Buffer): string => {\n  const byteArray = new Uint8Array(buffer);\n  const hexParts: string[] = [];\n  byteArray.forEach((byte: any) => {\n    const hex = byte.toString(16);\n    const paddedHex = `00${hex}`.slice(-2);\n    hexParts.push(paddedHex);\n  });\n  return hexParts.join('');\n};\n\n/**\n *\n * @description Convert a string to bytes\n *\n * @param str String to convert\n */\nexport function char2Bytes(str: string) {\n  return Buffer.from(str, 'utf8').toString('hex');\n}\n\n/**\n *\n * @description Convert bytes to a string\n *\n * @param str Bytes to convert\n */\nexport function bytes2Char(hex: string): string {\n  return Buffer.from(hex2buf(hex)).toString('utf8');\n}\n"]},"metadata":{},"sourceType":"module"}