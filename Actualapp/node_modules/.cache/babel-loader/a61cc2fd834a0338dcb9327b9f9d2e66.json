{"ast":null,"code":"import { MatrixMessageType } from '../models/MatrixMessage';\n/**\n * Check if an event is a create event\n *\n * @param event MatrixStateEvent\n */\n\nexport const isCreateEvent = event => event.type === 'm.room.create' && event.content instanceof Object && 'creator' in event.content;\n/**\n * Check if an event is a join event\n *\n * @param event MatrixStateEvent\n */\n\nexport const isJoinEvent = event => event.type === 'm.room.member' && event.content instanceof Object && 'membership' in event.content && // eslint-disable-next-line dot-notation\nevent.content['membership'] === 'join';\n/**\n * Check if an event is a message event\n *\n * @param event MatrixStateEvent\n */\n\nexport const isMessageEvent = event => event.type === 'm.room.message';\n/**\n * Check if an event is a text message event\n *\n * @param event MatrixStateEvent\n */\n\nexport const isTextMessageEvent = event => isMessageEvent(event) && event.content instanceof Object && 'msgtype' in event.content && // eslint-disable-next-line dot-notation\nevent.content['msgtype'] === MatrixMessageType.TEXT;","map":{"version":3,"sources":["../../../../src/matrix-client/utils/events.ts"],"names":[],"mappings":"AACA,SAAS,iBAAT,QAAkC,yBAAlC;AAEA;;;;AAIG;;AACH,OAAO,MAAM,aAAa,GAAI,KAAD,IAC3B,KAAK,CAAC,IAAN,KAAe,eAAf,IAAkC,KAAK,CAAC,OAAN,YAAyB,MAA3D,IAAqE,aAAa,KAAK,CAAC,OADnF;AAGP;;;;AAIG;;AACH,OAAO,MAAM,WAAW,GAAI,KAAD,IACzB,KAAK,CAAC,IAAN,KAAe,eAAf,IACA,KAAK,CAAC,OAAN,YAAyB,MADzB,IAEA,gBAAgB,KAAK,CAAC,OAFtB,IAGA;AACA,KAAK,CAAC,OAAN,CAAc,YAAd,MAAgC,MAL3B;AAOP;;;;AAIG;;AACH,OAAO,MAAM,cAAc,GAAI,KAAD,IAAsC,KAAK,CAAC,IAAN,KAAe,gBAA5E;AAEP;;;;AAIG;;AACH,OAAO,MAAM,kBAAkB,GAAI,KAAD,IAChC,cAAc,CAAC,KAAD,CAAd,IACA,KAAK,CAAC,OAAN,YAAyB,MADzB,IAEA,aAAa,KAAK,CAAC,OAFnB,IAGA;AACA,KAAK,CAAC,OAAN,CAAc,SAAd,MAA6B,iBAAiB,CAAC,IAL1C","sourceRoot":"","sourcesContent":["import { MatrixMessageType } from '../models/MatrixMessage';\n/**\n * Check if an event is a create event\n *\n * @param event MatrixStateEvent\n */\nexport const isCreateEvent = (event) => event.type === 'm.room.create' && event.content instanceof Object && 'creator' in event.content;\n/**\n * Check if an event is a join event\n *\n * @param event MatrixStateEvent\n */\nexport const isJoinEvent = (event) => event.type === 'm.room.member' &&\n    event.content instanceof Object &&\n    'membership' in event.content &&\n    // eslint-disable-next-line dot-notation\n    event.content['membership'] === 'join';\n/**\n * Check if an event is a message event\n *\n * @param event MatrixStateEvent\n */\nexport const isMessageEvent = (event) => event.type === 'm.room.message';\n/**\n * Check if an event is a text message event\n *\n * @param event MatrixStateEvent\n */\nexport const isTextMessageEvent = (event) => isMessageEvent(event) &&\n    event.content instanceof Object &&\n    'msgtype' in event.content &&\n    // eslint-disable-next-line dot-notation\n    event.content['msgtype'] === MatrixMessageType.TEXT;\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"module"}