{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * The Serializer is used to serialize / deserialize JSON objects and encode them with bs58check\n */\n\nexport class Serializer {\n  /**\n   * Serialize and bs58check encode an object\n   *\n   * @param message JSON object to serialize\n   */\n  serialize(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const str = JSON.stringify(message);\n      return bs58check.encode(Buffer.from(str));\n    });\n  }\n  /**\n   * Deserialize a bs58check encoded string\n   *\n   * @param encoded String to be deserialized\n   */\n\n\n  deserialize(encoded) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof encoded !== 'string') {\n        throw new Error('Encoded payload needs to be a string');\n      }\n\n      return JSON.parse(bs58check.decode(encoded).toString());\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/Serializer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,SAAZ,MAA2B,WAA3B;AAEA;;;;AAIG;;AACH,OAAM,MAAO,UAAP,CAAiB;AACrB;;;;AAIG;AACU,EAAA,SAAS,CAAC,OAAD,EAAiB;;AACrC,YAAM,GAAG,GAAG,IAAI,CAAC,SAAL,CAAe,OAAf,CAAZ;AAEA,aAAO,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAjB,CAAP;AACD,K;AAAA;AAED;;;;AAIG;;;AACU,EAAA,WAAW,CAAC,OAAD,EAAgB;;AACtC,UAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,cAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,aAAO,IAAI,CAAC,KAAL,CAAW,SAAS,CAAC,MAAV,CAAiB,OAAjB,EAA0B,QAA1B,EAAX,CAAP;AACD,K;AAAA;;AAvBoB","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * The Serializer is used to serialize / deserialize JSON objects and encode them with bs58check\n */\nexport class Serializer {\n    /**\n     * Serialize and bs58check encode an object\n     *\n     * @param message JSON object to serialize\n     */\n    serialize(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const str = JSON.stringify(message);\n            return bs58check.encode(Buffer.from(str));\n        });\n    }\n    /**\n     * Deserialize a bs58check encoded string\n     *\n     * @param encoded String to be deserialized\n     */\n    deserialize(encoded) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof encoded !== 'string') {\n                throw new Error('Encoded payload needs to be a string');\n            }\n            return JSON.parse(bs58check.decode(encoded).toString());\n        });\n    }\n}\n//# sourceMappingURL=Serializer.js.map"]},"metadata":{},"sourceType":"module"}