{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\n * A service to help with matrix event management\n */\n\n\nexport class MatrixEventService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.cachedPromises = new Map();\n  }\n  /**\n   * Get the latest state from the matrix node\n   *\n   * @param accessToken\n   * @param options\n   */\n\n\n  sync(accessToken, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.withCache('sync', () => this.httpClient.get('/sync', {\n        timeout: options ? options.pollingTimeout : undefined,\n        since: options ? options.syncToken : undefined\n      }, {\n        accessToken\n      }));\n    });\n  }\n  /**\n   * Send a message to a room\n   *\n   * @param accessToken\n   * @param room\n   * @param content\n   * @param txnId\n   */\n\n\n  sendMessage(accessToken, roomId, content, txnId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => this.scheduleEvent({\n        accessToken,\n        roomId,\n        type: 'm.room.message',\n        content,\n        txnId,\n        onSuccess: resolve,\n        onError: reject\n      }));\n    });\n  }\n  /**\n   * Schedules an event to be sent to the node\n   *\n   * @param event\n   */\n\n\n  scheduleEvent(event) {\n    // TODO: actual scheduling\n    this.sendEvent(event);\n  }\n  /**\n   * Send an event to the matrix node\n   *\n   * @param scheduledEvent\n   */\n\n\n  sendEvent(scheduledEvent) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        roomId,\n        type,\n        txnId,\n        content,\n        accessToken\n      } = scheduledEvent;\n\n      try {\n        const response = yield this.httpClient.put(`/rooms/${encodeURIComponent(roomId)}/send/${type}/${encodeURIComponent(txnId)}`, content, {\n          accessToken\n        });\n        scheduledEvent.onSuccess(response);\n      } catch (error) {\n        scheduledEvent.onError(error);\n      }\n    });\n  }\n  /**\n   * Check the cache when interacting with the Matrix node, if there is an already ongoing call for the specified key, return its promise instead of duplicating the call.\n   *\n   * @param key\n   * @param promiseProvider\n   */\n\n\n  withCache(key, promiseProvider) {\n    let promise = this.cachedPromises.get(key);\n\n    if (!promise) {\n      promise = promiseProvider().finally(() => {\n        this.cachedPromises.delete(key);\n      });\n      this.cachedPromises.set(key, promise);\n    }\n\n    return promise;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/matrix-client/services/MatrixEventService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEG;;;AACH,OAAM,MAAO,kBAAP,CAAyB;AAG7B,EAAA,WAAA,CAA6B,UAA7B,EAAyD;AAA5B,SAAA,UAAA,GAAA,UAAA;AAFZ,SAAA,cAAA,GAA+C,IAAI,GAAJ,EAA/C;AAE4C;AAE7D;;;;;AAKG;;;AACU,EAAA,IAAI,CAAC,WAAD,EAAsB,OAAtB,EAAiD;;AAChE,aAAO,KAAK,SAAL,CAAe,MAAf,EAAuB,MAC5B,KAAK,UAAL,CAAgB,GAAhB,CACE,OADF,EAEE;AACE,QAAA,OAAO,EAAE,OAAO,GAAG,OAAO,CAAC,cAAX,GAA4B,SAD9C;AAEE,QAAA,KAAK,EAAE,OAAO,GAAG,OAAO,CAAC,SAAX,GAAuB;AAFvC,OAFF,EAME;AAAE,QAAA;AAAF,OANF,CADK,CAAP;AAUD,K;AAAA;AAED;;;;;;;AAOG;;;AACU,EAAA,WAAW,CACtB,WADsB,EAEtB,MAFsB,EAGtB,OAHsB,EAItB,KAJsB,EAIT;;AAEb,aAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KACjB,KAAK,aAAL,CAAmB;AACjB,QAAA,WADiB;AAEjB,QAAA,MAFiB;AAGjB,QAAA,IAAI,EAAE,gBAHW;AAIjB,QAAA,OAJiB;AAKjB,QAAA,KALiB;AAMjB,QAAA,SAAS,EAAE,OANM;AAOjB,QAAA,OAAO,EAAE;AAPQ,OAAnB,CADK,CAAP;AAWD,K;AAAA;AAED;;;;AAIG;;;AACI,EAAA,aAAa,CAAC,KAAD,EAAiC;AACnD;AACA,SAAK,SAAL,CAAe,KAAf;AACD;AAED;;;;AAIG;;;AACU,EAAA,SAAS,CAAC,cAAD,EAA0C;;AAC9D,YAAM;AAAE,QAAA,MAAF;AAAU,QAAA,IAAV;AAAgB,QAAA,KAAhB;AAAuB,QAAA,OAAvB;AAAgC,QAAA;AAAhC,UAAgD,cAAtD;;AAEA,UAAI;AACF,cAAM,QAAQ,GAAG,MAAM,KAAK,UAAL,CAAgB,GAAhB,CACrB,UAAU,kBAAkB,CAAC,MAAD,CAAQ,SAAS,IAAI,IAAI,kBAAkB,CAAC,KAAD,CAAO,EADzD,EAErB,OAFqB,EAGrB;AAAE,UAAA;AAAF,SAHqB,CAAvB;AAKA,QAAA,cAAc,CAAC,SAAf,CAAyB,QAAzB;AACD,OAPD,CAOE,OAAO,KAAP,EAAc;AACd,QAAA,cAAc,CAAC,OAAf,CAAuB,KAAvB;AACD;AACF,K;AAAA;AAED;;;;;AAKG;;;AACK,EAAA,SAAS,CAAI,GAAJ,EAAoB,eAApB,EAAqD;AACpE,QAAI,OAAO,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,GAAxB,CAAd;;AAEA,QAAI,CAAC,OAAL,EAAc;AACZ,MAAA,OAAO,GAAG,eAAe,GAAG,OAAlB,CAA0B,MAAK;AACvC,aAAK,cAAL,CAAoB,MAApB,CAA2B,GAA3B;AACD,OAFS,CAAV;AAGA,WAAK,cAAL,CAAoB,GAApB,CAAwB,GAAxB,EAA6B,OAA7B;AACD;;AAED,WAAO,OAAP;AACD;;AAlG4B","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * A service to help with matrix event management\n */\nexport class MatrixEventService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n        this.cachedPromises = new Map();\n    }\n    /**\n     * Get the latest state from the matrix node\n     *\n     * @param accessToken\n     * @param options\n     */\n    sync(accessToken, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.withCache('sync', () => this.httpClient.get('/sync', {\n                timeout: options ? options.pollingTimeout : undefined,\n                since: options ? options.syncToken : undefined\n            }, { accessToken }));\n        });\n    }\n    /**\n     * Send a message to a room\n     *\n     * @param accessToken\n     * @param room\n     * @param content\n     * @param txnId\n     */\n    sendMessage(accessToken, roomId, content, txnId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => this.scheduleEvent({\n                accessToken,\n                roomId,\n                type: 'm.room.message',\n                content,\n                txnId,\n                onSuccess: resolve,\n                onError: reject\n            }));\n        });\n    }\n    /**\n     * Schedules an event to be sent to the node\n     *\n     * @param event\n     */\n    scheduleEvent(event) {\n        // TODO: actual scheduling\n        this.sendEvent(event);\n    }\n    /**\n     * Send an event to the matrix node\n     *\n     * @param scheduledEvent\n     */\n    sendEvent(scheduledEvent) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { roomId, type, txnId, content, accessToken } = scheduledEvent;\n            try {\n                const response = yield this.httpClient.put(`/rooms/${encodeURIComponent(roomId)}/send/${type}/${encodeURIComponent(txnId)}`, content, { accessToken });\n                scheduledEvent.onSuccess(response);\n            }\n            catch (error) {\n                scheduledEvent.onError(error);\n            }\n        });\n    }\n    /**\n     * Check the cache when interacting with the Matrix node, if there is an already ongoing call for the specified key, return its promise instead of duplicating the call.\n     *\n     * @param key\n     * @param promiseProvider\n     */\n    withCache(key, promiseProvider) {\n        let promise = this.cachedPromises.get(key);\n        if (!promise) {\n            promise = promiseProvider().finally(() => {\n                this.cachedPromises.delete(key);\n            });\n            this.cachedPromises.set(key, promise);\n        }\n        return promise;\n    }\n}\n//# sourceMappingURL=MatrixEventService.js.map"]},"metadata":{},"sourceType":"module"}