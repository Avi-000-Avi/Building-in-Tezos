{"ast":null,"code":"import { sign, isSupported } from \"u2f-api\";\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { log } from \"@ledgerhq/logs\";\nimport { TransportError } from \"@ledgerhq/errors\";\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  const err = new TransportError(message, id); // $FlowFixMe\n\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu, key) {\n  const result = Buffer.alloc(apdu.length);\n\n  for (let i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n\n  return result;\n} // Convert from normal to web-safe, strip trailing \"=\"s\n\n\nconst webSafe64 = base64 => base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\"); // Convert from web-safe to normal, add trailing \"=\"s\n\n\nconst normal64 = base64 => base64.replace(/-/g, \"+\").replace(/_/g, \"/\") + \"==\".substring(0, 3 * base64.length % 4);\n\nfunction attemptExchange(apdu, timeoutMillis, scrambleKey, unwrap) {\n  const keyHandle = wrapApdu(apdu, scrambleKey);\n  const challenge = Buffer.from(\"0000000000000000000000000000000000000000000000000000000000000000\", \"hex\");\n  const signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin\n  };\n  log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n  return sign(signRequest, timeoutMillis / 1000).then(response => {\n    const {\n      signatureData\n    } = response;\n\n    if (typeof signatureData === \"string\") {\n      const data = Buffer.from(normal64(signatureData), \"base64\");\n      let result;\n\n      if (!unwrap) {\n        result = data;\n      } else {\n        result = data.slice(5);\n      }\n\n      log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nlet transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach(t => t.emit(\"disconnect\"));\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\n\n\nexport default class TransportU2F extends Transport {\n  /*\n   */\n\n  /*\n   */\n\n  /**\n   * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n   */\n  static async open(_, _openTimeout = 5000) {\n    return new TransportU2F();\n  }\n\n  constructor() {\n    super();\n    this.scrambleKey = void 0;\n    this.unwrap = true;\n    transportInstances.push(this);\n  }\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n\n\n  async exchange(apdu) {\n    try {\n      return await attemptExchange(apdu, this.exchangeTimeout, this.scrambleKey, this.unwrap);\n    } catch (e) {\n      const isU2FError = typeof e.metaData === \"object\";\n\n      if (isU2FError) {\n        if (isTimeoutU2FError(e)) {\n          emitDisconnect();\n        } // the wrapping make error more usable and \"printable\" to the end user.\n\n\n        throw wrapU2FTransportError(e, \"Failed to sign with Ledger device: U2F \" + e.metaData.type, \"U2F_\" + e.metaData.code);\n      } else {\n        throw e;\n      }\n    }\n  }\n  /**\n   */\n\n\n  setScrambleKey(scrambleKey) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n  /**\n   */\n\n\n  setUnwrap(unwrap) {\n    this.unwrap = unwrap;\n  }\n\n  close() {\n    // u2f have no way to clean things up\n    return Promise.resolve();\n  }\n\n}\nTransportU2F.isSupported = isSupported;\n\nTransportU2F.list = () => // this transport is not discoverable but we are going to guess if it is here with isSupported()\nisSupported().then(supported => supported ? [null] : []);\n\nTransportU2F.listen = observer => {\n  let unsubscribed = false;\n  isSupported().then(supported => {\n    if (unsubscribed) return;\n\n    if (supported) {\n      observer.next({\n        type: \"add\",\n        descriptor: null\n      });\n      observer.complete();\n    } else {\n      observer.error(new TransportError(\"U2F browser support is needed for Ledger. \" + \"Please use Chrome, Opera or Firefox with a U2F extension. \" + \"Also make sure you're on an HTTPS connection\", \"U2FNotSupported\"));\n    }\n  });\n  return {\n    unsubscribe: () => {\n      unsubscribed = true;\n    }\n  };\n};","map":{"version":3,"sources":["../src/TransportU2F.js"],"names":["err","result","Buffer","apdu","i","key","webSafe64","base64","normal64","keyHandle","wrapApdu","challenge","signRequest","version","appId","location","origin","log","timeoutMillis","response","signatureData","data","transportInstances","t","u2fError","TransportU2F","isSupported","list","supported","listen","observer","unsubscribed","type","descriptor","unsubscribe","scrambleKey","unwrap","open","_openTimeout","constructor","exchange","attemptExchange","isU2FError","e","isTimeoutU2FError","emitDisconnect","wrapU2FTransportError","setScrambleKey","setUnwrap","close","Promise"],"mappings":"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","sourcesContent":["//@flow\n\nimport { sign, isSupported } from \"u2f-api\";\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { log } from \"@ledgerhq/logs\";\nimport { TransportError } from \"@ledgerhq/errors\";\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  const err = new TransportError(message, id);\n  // $FlowFixMe\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu: Buffer, key: Buffer) {\n  const result = Buffer.alloc(apdu.length);\n  for (let i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n  return result;\n}\n\n// Convert from normal to web-safe, strip trailing \"=\"s\nconst webSafe64 = (base64: string) =>\n  base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n\n// Convert from web-safe to normal, add trailing \"=\"s\nconst normal64 = (base64: string) =>\n  base64.replace(/-/g, \"+\").replace(/_/g, \"/\") +\n  \"==\".substring(0, (3 * base64.length) % 4);\n\nfunction attemptExchange(\n  apdu: Buffer,\n  timeoutMillis: number,\n  scrambleKey: Buffer,\n  unwrap: boolean\n): Promise<Buffer> {\n  const keyHandle = wrapApdu(apdu, scrambleKey);\n  const challenge = Buffer.from(\n    \"0000000000000000000000000000000000000000000000000000000000000000\",\n    \"hex\"\n  );\n  const signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin,\n  };\n  log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n  return sign(signRequest, timeoutMillis / 1000).then((response) => {\n    const { signatureData } = response;\n    if (typeof signatureData === \"string\") {\n      const data = Buffer.from(normal64(signatureData), \"base64\");\n      let result;\n      if (!unwrap) {\n        result = data;\n      } else {\n        result = data.slice(5);\n      }\n      log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nlet transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach((t) => t.emit(\"disconnect\"));\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\nexport default class TransportU2F extends Transport<null> {\n  static isSupported = isSupported;\n\n  /*\n   */\n  static list = (): * =>\n    // this transport is not discoverable but we are going to guess if it is here with isSupported()\n    isSupported().then((supported) => (supported ? [null] : []));\n\n  /*\n   */\n  static listen = (observer: *) => {\n    let unsubscribed = false;\n    isSupported().then((supported) => {\n      if (unsubscribed) return;\n      if (supported) {\n        observer.next({ type: \"add\", descriptor: null });\n        observer.complete();\n      } else {\n        observer.error(\n          new TransportError(\n            \"U2F browser support is needed for Ledger. \" +\n              \"Please use Chrome, Opera or Firefox with a U2F extension. \" +\n              \"Also make sure you're on an HTTPS connection\",\n            \"U2FNotSupported\"\n          )\n        );\n      }\n    });\n    return {\n      unsubscribe: () => {\n        unsubscribed = true;\n      },\n    };\n  };\n\n  scrambleKey: Buffer;\n\n  unwrap: boolean = true;\n\n  /**\n   * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n   */\n  static async open(_: *, _openTimeout?: number = 5000): Promise<TransportU2F> {\n    return new TransportU2F();\n  }\n\n  constructor() {\n    super();\n    transportInstances.push(this);\n  }\n\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n  async exchange(apdu: Buffer): Promise<Buffer> {\n    try {\n      return await attemptExchange(\n        apdu,\n        this.exchangeTimeout,\n        this.scrambleKey,\n        this.unwrap\n      );\n    } catch (e) {\n      const isU2FError = typeof e.metaData === \"object\";\n      if (isU2FError) {\n        if (isTimeoutU2FError(e)) {\n          emitDisconnect();\n        }\n        // the wrapping make error more usable and \"printable\" to the end user.\n        throw wrapU2FTransportError(\n          e,\n          \"Failed to sign with Ledger device: U2F \" + e.metaData.type,\n          \"U2F_\" + e.metaData.code\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   */\n  setScrambleKey(scrambleKey: string) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n\n  /**\n   */\n  setUnwrap(unwrap: boolean) {\n    this.unwrap = unwrap;\n  }\n\n  close(): Promise<void> {\n    // u2f have no way to clean things up\n    return Promise.resolve();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}