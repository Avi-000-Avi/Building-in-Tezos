{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable prefer-arrow/prefer-arrow-functions */\n\n\nfunction fixArrayType(array) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return array;\n}\n/* eslint-enable prefer-arrow/prefer-arrow-functions */\n\n/**\n * @internalapi\n *\n * The StorageManager provides CRUD functionality for specific entities and persists them to the provided storage.\n */\n\n\nexport class StorageManager {\n  constructor(storage, storageKey) {\n    this.storage = storage;\n    this.storageKey = storageKey;\n  }\n\n  getAll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storage.get(this.storageKey);\n    });\n  }\n\n  getOne(predicate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entities = yield this.storage.get(this.storageKey);\n      return fixArrayType(entities).find(predicate);\n    });\n  }\n\n  addOne(element, predicate, overwrite = true) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entities = yield this.storage.get(this.storageKey);\n\n      if (!fixArrayType(entities).some(predicate)) {\n        fixArrayType(entities).push(element);\n      } else if (overwrite) {\n        for (let i = 0; i < entities.length; i++) {\n          if (predicate(fixArrayType(entities)[i])) {\n            entities[i] = element;\n          }\n        }\n      }\n\n      return this.storage.set(this.storageKey, entities);\n    });\n  }\n\n  remove(predicate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entities = yield this.storage.get(this.storageKey);\n      const filteredEntities = fixArrayType(entities).filter(entity => !predicate(entity)); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      return this.storage.set(this.storageKey, filteredEntities);\n    });\n  }\n\n  removeAll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storage.delete(this.storageKey);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/managers/StorageManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;AACA,SAAS,YAAT,CAAyB,KAAzB,EAAiC;AAC/B;AACA,SAAO,KAAP;AACD;AACD;;AAEA;;;;AAIG;;;AACH,OAAM,MAAO,cAAP,CAAqB;AAazB,EAAA,WAAA,CAAY,OAAZ,EAA8B,UAA9B,EAA2C;AACzC,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,UAAL,GAAkB,UAAlB;AACD;;AAEY,EAAA,MAAM,GAAA;;AACjB,aAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,CAAP;AACD,K;AAAA;;AAEY,EAAA,MAAM,CACjB,SADiB,EACkD;;AAEnE,YAAM,QAAQ,GAAG,MAAM,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,CAAvB;AAEA,aAAO,YAAY,CAAC,QAAD,CAAZ,CAAuB,IAAvB,CAA4B,SAA5B,CAAP;AACD,K;AAAA;;AAEY,EAAA,MAAM,CACjB,OADiB,EAEjB,SAFiB,EAGjB,SAAA,GAAqB,IAHJ,EAGQ;;AAEzB,YAAM,QAAQ,GAAG,MAAM,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,CAAvB;;AAEA,UAAI,CAAC,YAAY,CAAC,QAAD,CAAZ,CAAuB,IAAvB,CAA4B,SAA5B,CAAL,EAA6C;AAC3C,QAAA,YAAY,CAAC,QAAD,CAAZ,CAAuB,IAAvB,CAA4B,OAA5B;AACD,OAFD,MAEO,IAAI,SAAJ,EAAe;AACpB,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,cAAI,SAAS,CAAC,YAAY,CAAC,QAAD,CAAZ,CAAuB,CAAvB,CAAD,CAAb,EAA0C;AACxC,YAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,OAAd;AACD;AACF;AACF;;AAED,aAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,EAAkC,QAAlC,CAAP;AACD,K;AAAA;;AAEY,EAAA,MAAM,CACjB,SADiB,EACkD;;AAEnE,YAAM,QAAQ,GAAG,MAAM,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,CAAvB;AAEA,YAAM,gBAAgB,GAAG,YAAY,CAAC,QAAD,CAAZ,CAAuB,MAAvB,CAA+B,MAAD,IAAY,CAAC,SAAS,CAAC,MAAD,CAApD,CAAzB,C,CAEA;;AACA,aAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,EAAkC,gBAAlC,CAAP;AACD,K;AAAA;;AAEY,EAAA,SAAS,GAAA;;AACpB,aAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,KAAK,UAAzB,CAAP;AACD,K;AAAA;;AA/DwB","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/* eslint-disable prefer-arrow/prefer-arrow-functions */\nfunction fixArrayType(array) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return array;\n}\n/* eslint-enable prefer-arrow/prefer-arrow-functions */\n/**\n * @internalapi\n *\n * The StorageManager provides CRUD functionality for specific entities and persists them to the provided storage.\n */\nexport class StorageManager {\n    constructor(storage, storageKey) {\n        this.storage = storage;\n        this.storageKey = storageKey;\n    }\n    getAll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storage.get(this.storageKey);\n        });\n    }\n    getOne(predicate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entities = yield this.storage.get(this.storageKey);\n            return fixArrayType(entities).find(predicate);\n        });\n    }\n    addOne(element, predicate, overwrite = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entities = yield this.storage.get(this.storageKey);\n            if (!fixArrayType(entities).some(predicate)) {\n                fixArrayType(entities).push(element);\n            }\n            else if (overwrite) {\n                for (let i = 0; i < entities.length; i++) {\n                    if (predicate(fixArrayType(entities)[i])) {\n                        entities[i] = element;\n                    }\n                }\n            }\n            return this.storage.set(this.storageKey, entities);\n        });\n    }\n    remove(predicate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entities = yield this.storage.get(this.storageKey);\n            const filteredEntities = fixArrayType(entities).filter((entity) => !predicate(entity));\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return this.storage.set(this.storageKey, filteredEntities);\n        });\n    }\n    removeAll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storage.delete(this.storageKey);\n        });\n    }\n}\n//# sourceMappingURL=StorageManager.js.map"]},"metadata":{},"sourceType":"module"}