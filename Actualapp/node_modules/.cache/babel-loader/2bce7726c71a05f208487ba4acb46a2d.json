{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as sodium from 'libsodium-wrappers';\nimport { windowRef } from '../../MockWindow';\nimport { ExtensionMessageTarget, Origin, Serializer } from '../..';\nimport { openCryptobox } from '../../utils/crypto';\nimport { getSenderId } from '../../utils/get-sender-id';\nimport { MessageBasedClient } from './MessageBasedClient';\n/**\n * @internalapi\n *\n *\n */\n\nexport class PostMessageClient extends MessageBasedClient {\n  constructor() {\n    super(...arguments);\n    this.activeListeners = new Map();\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.subscribeToMessages().catch(console.error);\n    });\n  }\n\n  listenForEncryptedMessage(senderPublicKey, messageCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.activeListeners.has(senderPublicKey)) {\n        return;\n      }\n\n      const callbackFunction = (message, context) => __awaiter(this, void 0, void 0, function* () {\n        try {\n          const decryptedMessage = yield this.decryptMessage(senderPublicKey, message.encryptedPayload); // console.log('calculated sender ID', await getSenderId(senderPublicKey))\n          // TODO: Add check for correct decryption key / sender ID\n\n          messageCallback(decryptedMessage, context);\n        } catch (decryptionError) {\n          /* NO-OP. We try to decode every message, but some might not be addressed to us. */\n        }\n      });\n\n      this.activeListeners.set(senderPublicKey, callbackFunction);\n    });\n  }\n\n  sendMessage(message, peer) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const payload = yield this.encryptMessage(peer.publicKey, message);\n      const targetId = (_a = peer) === null || _a === void 0 ? void 0 : _a.extensionId; // if no targetId, we remove peer\n\n      const msg = {\n        target: ExtensionMessageTarget.EXTENSION,\n        encryptedPayload: payload,\n        targetId\n      }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      windowRef.postMessage(msg, windowRef.location.origin);\n    });\n  }\n\n  listenForChannelOpening(messageCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const fn = event => __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n\n        const data = (_a = event === null || event === void 0 ? void 0 : event.data) === null || _a === void 0 ? void 0 : _a.message;\n\n        if (data && data.target === ExtensionMessageTarget.PAGE && (yield this.isChannelOpenMessage(data))) {\n          const payload = Buffer.from(data.payload, 'hex');\n\n          if (payload.length >= sodium.crypto_secretbox_NONCEBYTES + sodium.crypto_secretbox_MACBYTES) {\n            try {\n              const pairingResponse = JSON.parse(yield openCryptobox(payload, this.keyPair.publicKey, this.keyPair.privateKey));\n              messageCallback(Object.assign(Object.assign({}, pairingResponse), {\n                senderId: yield getSenderId(pairingResponse.publicKey),\n                extensionId: (_b = event === null || event === void 0 ? void 0 : event.data) === null || _b === void 0 ? void 0 : _b.sender.id\n              }));\n            } catch (decryptionError) {\n              /* NO-OP. We try to decode every message, but some might not be addressed to us. */\n            }\n          }\n        }\n      });\n\n      windowRef.addEventListener('message', fn);\n    });\n  }\n\n  sendPairingRequest(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const message = {\n        target: ExtensionMessageTarget.EXTENSION,\n        payload: yield new Serializer().serialize(yield this.getPairingRequestInfo()),\n        targetId: id\n      }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      windowRef.postMessage(message, windowRef.location.origin);\n    });\n  }\n\n  isChannelOpenMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return typeof message === 'object' && message.hasOwnProperty('payload');\n    });\n  }\n\n  subscribeToMessages() {\n    return __awaiter(this, void 0, void 0, function* () {\n      windowRef.addEventListener('message', message => {\n        if (typeof message === 'object' && message) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const data = message.data;\n\n          if (data.message && data.message.target === ExtensionMessageTarget.PAGE) {\n            this.activeListeners.forEach(listener => {\n              listener(data.message, {\n                origin: Origin.EXTENSION,\n                id: data.sender.id || ''\n              });\n            });\n          }\n        }\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../../src/transports/clients/PostMessageClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as sodium from 'libsodium-wrappers';\nimport { windowRef } from '../../MockWindow';\nimport { ExtensionMessageTarget, Origin, Serializer } from '../..';\nimport { openCryptobox } from '../../utils/crypto';\nimport { getSenderId } from '../../utils/get-sender-id';\nimport { MessageBasedClient } from './MessageBasedClient';\n/**\n * @internalapi\n *\n *\n */\nexport class PostMessageClient extends MessageBasedClient {\n    constructor() {\n        super(...arguments);\n        this.activeListeners = new Map();\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.subscribeToMessages().catch(console.error);\n        });\n    }\n    listenForEncryptedMessage(senderPublicKey, messageCallback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.activeListeners.has(senderPublicKey)) {\n                return;\n            }\n            const callbackFunction = (message, context) => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    const decryptedMessage = yield this.decryptMessage(senderPublicKey, message.encryptedPayload);\n                    // console.log('calculated sender ID', await getSenderId(senderPublicKey))\n                    // TODO: Add check for correct decryption key / sender ID\n                    messageCallback(decryptedMessage, context);\n                }\n                catch (decryptionError) {\n                    /* NO-OP. We try to decode every message, but some might not be addressed to us. */\n                }\n            });\n            this.activeListeners.set(senderPublicKey, callbackFunction);\n        });\n    }\n    sendMessage(message, peer) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const payload = yield this.encryptMessage(peer.publicKey, message);\n            const targetId = (_a = peer) === null || _a === void 0 ? void 0 : _a.extensionId;\n            // if no targetId, we remove peer\n            const msg = {\n                target: ExtensionMessageTarget.EXTENSION,\n                encryptedPayload: payload,\n                targetId\n            };\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            windowRef.postMessage(msg, windowRef.location.origin);\n        });\n    }\n    listenForChannelOpening(messageCallback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const fn = (event) => __awaiter(this, void 0, void 0, function* () {\n                var _a, _b;\n                const data = (_a = event === null || event === void 0 ? void 0 : event.data) === null || _a === void 0 ? void 0 : _a.message;\n                if (data &&\n                    data.target === ExtensionMessageTarget.PAGE &&\n                    (yield this.isChannelOpenMessage(data))) {\n                    const payload = Buffer.from(data.payload, 'hex');\n                    if (payload.length >=\n                        sodium.crypto_secretbox_NONCEBYTES + sodium.crypto_secretbox_MACBYTES) {\n                        try {\n                            const pairingResponse = JSON.parse(yield openCryptobox(payload, this.keyPair.publicKey, this.keyPair.privateKey));\n                            messageCallback(Object.assign(Object.assign({}, pairingResponse), { senderId: yield getSenderId(pairingResponse.publicKey), extensionId: (_b = event === null || event === void 0 ? void 0 : event.data) === null || _b === void 0 ? void 0 : _b.sender.id }));\n                        }\n                        catch (decryptionError) {\n                            /* NO-OP. We try to decode every message, but some might not be addressed to us. */\n                        }\n                    }\n                }\n            });\n            windowRef.addEventListener('message', fn);\n        });\n    }\n    sendPairingRequest(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const message = {\n                target: ExtensionMessageTarget.EXTENSION,\n                payload: yield new Serializer().serialize(yield this.getPairingRequestInfo()),\n                targetId: id\n            };\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            windowRef.postMessage(message, windowRef.location.origin);\n        });\n    }\n    isChannelOpenMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return typeof message === 'object' && message.hasOwnProperty('payload');\n        });\n    }\n    subscribeToMessages() {\n        return __awaiter(this, void 0, void 0, function* () {\n            windowRef.addEventListener('message', (message) => {\n                if (typeof message === 'object' && message) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    const data = message.data;\n                    if (data.message && data.message.target === ExtensionMessageTarget.PAGE) {\n                        this.activeListeners.forEach((listener) => {\n                            listener(data.message, {\n                                origin: Origin.EXTENSION,\n                                id: data.sender.id || ''\n                            });\n                        });\n                    }\n                }\n            });\n        });\n    }\n}\n//# sourceMappingURL=PostMessageClient.js.map"]},"metadata":{},"sourceType":"module"}