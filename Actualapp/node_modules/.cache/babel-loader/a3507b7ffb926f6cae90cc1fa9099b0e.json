{"ast":null,"code":"var _jsxFileName = \"/home/avinash/Documents/Actualapp/src/components/ConnectWallet.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { NetworkType, BeaconEvent, defaultEventCallbacks } from \"@airgap/beacon-sdk\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport { LedgerSigner } from \"@taquito/ledger-signer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  wallet\n}) => {\n  _s();\n\n  const [loadingNano, setLoadingNano] = useState(false);\n\n  const setup = async userAddress => {\n    setUserAddress(userAddress); // updates balance\n\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber()); // creates contract instance\n\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage = await contract.storage();\n    setContract(contract);\n    setStorage(storage.toNumber());\n  };\n\n  const connectWallet = async () => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.GRANADANET,\n          rpcUrl: \"https://api.tez.ie/rpc/granadanet\"\n        }\n      }); // gets user's address\n\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectNano = async () => {\n    try {\n      setLoadingNano(true);\n      const transport = await TransportU2F.create();\n      const ledgerSigner = new LedgerSigner(transport, \"44'/1729'/0'/0'\", true);\n      Tezos.setSignerProvider(ledgerSigner); //Get the public key and the public key hash from the Ledger\n\n      const userAddress = await Tezos.signer.publicKeyHash();\n      await setup(userAddress);\n    } catch (error) {\n      console.log(\"Error!\", error);\n      setLoadingNano(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"Taquito Boilerplate\",\n        preferredNetwork: NetworkType.GRANADANET,\n        disableDefaultEvents: true,\n        // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet); // checks if wallet was connected before\n\n      const activeAccount = await wallet.client.getActiveAccount();\n\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"buttons\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: connectWallet,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), \"\\xA0 Connect with wallet\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      disabled: loadingNano,\n      onClick: connectNano,\n      children: loadingNano ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-spinner fa-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), \"\\xA0 Loading, please wait\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fab fa-usb\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), \"\\xA0 Connect with Ledger Nano\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConnectButton, \"XTakUvB1Wi9/W9BSDbD/tfkmqjc=\");\n\n_c = ConnectButton;\nexport default ConnectButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectButton\");","map":{"version":3,"sources":["/home/avinash/Documents/Actualapp/src/components/ConnectWallet.tsx"],"names":["React","useState","useEffect","BeaconWallet","NetworkType","BeaconEvent","defaultEventCallbacks","TransportU2F","LedgerSigner","ConnectButton","Tezos","setContract","setWallet","setUserAddress","setUserBalance","setStorage","contractAddress","setBeaconConnection","setPublicToken","wallet","loadingNano","setLoadingNano","setup","userAddress","balance","tz","getBalance","toNumber","contract","at","storage","connectWallet","requestPermissions","network","type","GRANADANET","rpcUrl","getPKH","error","console","log","connectNano","transport","create","ledgerSigner","setSignerProvider","signer","publicKeyHash","name","preferredNetwork","disableDefaultEvents","eventHandlers","PAIR_INIT","handler","PAIR_SUCCESS","data","publicKey","setWalletProvider","activeAccount","client","getActiveAccount"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport {\n  NetworkType,\n  BeaconEvent,\n  defaultEventCallbacks\n} from \"@airgap/beacon-sdk\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport { LedgerSigner } from \"@taquito/ledger-signer\";\n\ntype ButtonProps = {\n  Tezos: TezosToolkit;\n  setContract: Dispatch<SetStateAction<any>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setStorage: Dispatch<SetStateAction<number>>;\n  contractAddress: string;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  wallet: BeaconWallet;\n};\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  wallet\n}: ButtonProps): JSX.Element => {\n  const [loadingNano, setLoadingNano] = useState<boolean>(false);\n\n  const setup = async (userAddress: string): Promise<void> => {\n    setUserAddress(userAddress);\n    // updates balance\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber());\n    // creates contract instance\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage: any = await contract.storage();\n    setContract(contract);\n    setStorage(storage.toNumber());\n  };\n\n  const connectWallet = async (): Promise<void> => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.GRANADANET,\n          rpcUrl: \"https://api.tez.ie/rpc/granadanet\"\n        }\n      });\n      // gets user's address\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectNano = async (): Promise<void> => {\n    try {\n      setLoadingNano(true);\n      const transport = await TransportU2F.create();\n      const ledgerSigner = new LedgerSigner(transport, \"44'/1729'/0'/0'\", true);\n\n      Tezos.setSignerProvider(ledgerSigner);\n\n      //Get the public key and the public key hash from the Ledger\n      const userAddress = await Tezos.signer.publicKeyHash();\n      await setup(userAddress);\n    } catch (error) {\n      console.log(\"Error!\", error);\n      setLoadingNano(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"Taquito Boilerplate\",\n        preferredNetwork: NetworkType.GRANADANET,\n        disableDefaultEvents: true, // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet);\n      // checks if wallet was connected before\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={connectWallet}>\n        <span>\n          <i className=\"fas fa-wallet\"></i>&nbsp; Connect with wallet\n        </span>\n      </button>\n      <button className=\"button\" disabled={loadingNano} onClick={connectNano}>\n        {loadingNano ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Loading, please\n            wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fab fa-usb\"></i>&nbsp; Connect with Ledger Nano\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n"]},"metadata":{},"sourceType":"module"}