{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageKey } from '..';\nimport { StorageManager } from './StorageManager';\n/**\n * @internalapi\n *\n * The AppMetadataManager provides CRUD functionality for app-metadata entities and persists them to the provided storage.\n */\n\nexport class AppMetadataManager {\n  constructor(storage) {\n    this.storageManager = new StorageManager(storage, StorageKey.APP_METADATA_LIST);\n  }\n\n  getAppMetadataList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getAll();\n    });\n  }\n\n  getAppMetadata(senderId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getOne(appMetadata => appMetadata.senderId === senderId);\n    });\n  }\n\n  addAppMetadata(appMetadata) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.addOne(appMetadata, appMetadataElement => appMetadataElement.senderId === appMetadata.senderId);\n    });\n  }\n\n  removeAppMetadata(senderId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(appMetadata => appMetadata.senderId === senderId);\n    });\n  }\n\n  removeAppMetadatas(senderIds) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(appMetadata => senderIds.includes(appMetadata.senderId));\n    });\n  }\n\n  removeAllAppMetadata() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.removeAll();\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/managers/AppMetadataManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAkB,UAAlB,QAAiD,IAAjD;AACA,SAAS,cAAT,QAA+B,kBAA/B;AAEA;;;;AAIG;;AACH,OAAM,MAAO,kBAAP,CAAyB;AAG7B,EAAA,WAAA,CAAY,OAAZ,EAA4B;AAC1B,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB,OAAnB,EAA4B,UAAU,CAAC,iBAAvC,CAAtB;AACD;;AAEY,EAAA,kBAAkB,GAAA;;AAC7B,aAAO,KAAK,cAAL,CAAoB,MAApB,EAAP;AACD,K;AAAA;;AAEY,EAAA,cAAc,CAAC,QAAD,EAAiB;;AAC1C,aAAO,KAAK,cAAL,CAAoB,MAApB,CACJ,WAAD,IAA8B,WAAW,CAAC,QAAZ,KAAyB,QADlD,CAAP;AAGD,K;AAAA;;AAEY,EAAA,cAAc,CAAC,WAAD,EAAyB;;AAClD,aAAO,KAAK,cAAL,CAAoB,MAApB,CACL,WADK,EAEJ,kBAAD,IAAqC,kBAAkB,CAAC,QAAnB,KAAgC,WAAW,CAAC,QAF5E,CAAP;AAID,K;AAAA;;AAEY,EAAA,iBAAiB,CAAC,QAAD,EAAiB;;AAC7C,aAAO,KAAK,cAAL,CAAoB,MAApB,CACJ,WAAD,IAA8B,WAAW,CAAC,QAAZ,KAAyB,QADlD,CAAP;AAGD,K;AAAA;;AAEY,EAAA,kBAAkB,CAAC,SAAD,EAAoB;;AACjD,aAAO,KAAK,cAAL,CAAoB,MAApB,CAA4B,WAAD,IAChC,SAAS,CAAC,QAAV,CAAmB,WAAW,CAAC,QAA/B,CADK,CAAP;AAGD,K;AAAA;;AAEY,EAAA,oBAAoB,GAAA;;AAC/B,aAAO,KAAK,cAAL,CAAoB,SAApB,EAAP;AACD,K;AAAA;;AAtC4B","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageKey } from '..';\nimport { StorageManager } from './StorageManager';\n/**\n * @internalapi\n *\n * The AppMetadataManager provides CRUD functionality for app-metadata entities and persists them to the provided storage.\n */\nexport class AppMetadataManager {\n    constructor(storage) {\n        this.storageManager = new StorageManager(storage, StorageKey.APP_METADATA_LIST);\n    }\n    getAppMetadataList() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getAll();\n        });\n    }\n    getAppMetadata(senderId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getOne((appMetadata) => appMetadata.senderId === senderId);\n        });\n    }\n    addAppMetadata(appMetadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.addOne(appMetadata, (appMetadataElement) => appMetadataElement.senderId === appMetadata.senderId);\n        });\n    }\n    removeAppMetadata(senderId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((appMetadata) => appMetadata.senderId === senderId);\n        });\n    }\n    removeAppMetadatas(senderIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((appMetadata) => senderIds.includes(appMetadata.senderId));\n        });\n    }\n    removeAllAppMetadata() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.removeAll();\n        });\n    }\n}\n//# sourceMappingURL=AppMetadataManager.js.map"]},"metadata":{},"sourceType":"module"}