{"ast":null,"code":"/**\r\n * Hypertext Transfer Protocol (HTTP) response status codes.\r\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\r\n */\nvar STATUS_CODE;\n\n(function (STATUS_CODE) {\n  /**\r\n   * The server has received the request headers and the client should proceed to send the request body\r\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\r\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\r\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\r\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\r\n   */\n  STATUS_CODE[STATUS_CODE[\"CONTINUE\"] = 100] = \"CONTINUE\";\n  /**\r\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"SWITCHING_PROTOCOLS\"] = 101] = \"SWITCHING_PROTOCOLS\";\n  /**\r\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\r\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\r\n   * This prevents the client from timing out and assuming the request was lost.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PROCESSING\"] = 102] = \"PROCESSING\";\n  /**\r\n   * Standard response for successful HTTP requests.\r\n   * The actual response will depend on the request method used.\r\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\r\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"OK\"] = 200] = \"OK\";\n  /**\r\n   * The request has been fulfilled, resulting in the creation of a new resource.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"CREATED\"] = 201] = \"CREATED\";\n  /**\r\n   * The request has been accepted for processing, but the processing has not been completed.\r\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"ACCEPTED\"] = 202] = \"ACCEPTED\";\n  /**\r\n   * SINCE HTTP/1.1\r\n   * The server is a transforming proxy that received a 200 OK from its origin,\r\n   * but is returning a modified version of the origin's response.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NON_AUTHORITATIVE_INFORMATION\"] = 203] = \"NON_AUTHORITATIVE_INFORMATION\";\n  /**\r\n   * The server successfully processed the request and is not returning any content.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NO_CONTENT\"] = 204] = \"NO_CONTENT\";\n  /**\r\n   * The server successfully processed the request, but is not returning any content.\r\n   * Unlike a 204 response, this response requires that the requester reset the document view.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"RESET_CONTENT\"] = 205] = \"RESET_CONTENT\";\n  /**\r\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\r\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\r\n   * or split a download into multiple simultaneous streams.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PARTIAL_CONTENT\"] = 206] = \"PARTIAL_CONTENT\";\n  /**\r\n   * The message body that follows is an XML message and can contain a number of separate response codes,\r\n   * depending on how many sub-requests were made.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"MULTI_STATUS\"] = 207] = \"MULTI_STATUS\";\n  /**\r\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\r\n   * and are not being included again.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"ALREADY_REPORTED\"] = 208] = \"ALREADY_REPORTED\";\n  /**\r\n   * The server has fulfilled a request for the resource,\r\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"IM_USED\"] = 226] = \"IM_USED\";\n  /**\r\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\r\n   * For example, this code could be used to present multiple video format options,\r\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"MULTIPLE_CHOICES\"] = 300] = \"MULTIPLE_CHOICES\";\n  /**\r\n   * This and all future requests should be directed to the given URI.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"MOVED_PERMANENTLY\"] = 301] = \"MOVED_PERMANENTLY\";\n  /**\r\n   * This is an example of industry practice contradicting the standard.\r\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\r\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\r\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\r\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\r\n   * use the 302 status code as if it were the 303.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"FOUND\"] = 302] = \"FOUND\";\n  /**\r\n   * SINCE HTTP/1.1\r\n   * The response to the request can be found under another URI using a GET method.\r\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\r\n   * the server has received the data and should issue a redirect with a separate GET message.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"SEE_OTHER\"] = 303] = \"SEE_OTHER\";\n  /**\r\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\r\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NOT_MODIFIED\"] = 304] = \"NOT_MODIFIED\";\n  /**\r\n   * SINCE HTTP/1.1\r\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\r\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"USE_PROXY\"] = 305] = \"USE_PROXY\";\n  /**\r\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"SWITCH_PROXY\"] = 306] = \"SWITCH_PROXY\";\n  /**\r\n   * SINCE HTTP/1.1\r\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\r\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\r\n   * For example, a POST request should be repeated using another POST request.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"TEMPORARY_REDIRECT\"] = 307] = \"TEMPORARY_REDIRECT\";\n  /**\r\n   * The request and all future requests should be repeated using another URI.\r\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\r\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PERMANENT_REDIRECT\"] = 308] = \"PERMANENT_REDIRECT\";\n  /**\r\n   * The server cannot or will not process the request due to an apparent client error\r\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"BAD_REQUEST\"] = 400] = \"BAD_REQUEST\";\n  /**\r\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\r\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\r\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\r\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"UNAUTHORIZED\"] = 401] = \"UNAUTHORIZED\";\n  /**\r\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\r\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\r\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PAYMENT_REQUIRED\"] = 402] = \"PAYMENT_REQUIRED\";\n  /**\r\n   * The request was valid, but the server is refusing action.\r\n   * The user might not have the necessary permissions for a resource.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"FORBIDDEN\"] = 403] = \"FORBIDDEN\";\n  /**\r\n   * The requested resource could not be found but may be available in the future.\r\n   * Subsequent requests by the client are permissible.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NOT_FOUND\"] = 404] = \"NOT_FOUND\";\n  /**\r\n   * A request method is not supported for the requested resource;\r\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"METHOD_NOT_ALLOWED\"] = 405] = \"METHOD_NOT_ALLOWED\";\n  /**\r\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NOT_ACCEPTABLE\"] = 406] = \"NOT_ACCEPTABLE\";\n  /**\r\n   * The client must first authenticate itself with the proxy.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PROXY_AUTHENTICATION_REQUIRED\"] = 407] = \"PROXY_AUTHENTICATION_REQUIRED\";\n  /**\r\n   * The server timed out waiting for the request.\r\n   * According to HTTP specifications:\r\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"REQUEST_TIMEOUT\"] = 408] = \"REQUEST_TIMEOUT\";\n  /**\r\n   * Indicates that the request could not be processed because of conflict in the request,\r\n   * such as an edit conflict between multiple simultaneous updates.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"CONFLICT\"] = 409] = \"CONFLICT\";\n  /**\r\n   * Indicates that the resource requested is no longer available and will not be available again.\r\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\r\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\r\n   * Clients such as search engines should remove the resource from their indices.\r\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"GONE\"] = 410] = \"GONE\";\n  /**\r\n   * The request did not specify the length of its content, which is required by the requested resource.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"LENGTH_REQUIRED\"] = 411] = \"LENGTH_REQUIRED\";\n  /**\r\n   * The server does not meet one of the preconditions that the requester put on the request.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PRECONDITION_FAILED\"] = 412] = \"PRECONDITION_FAILED\";\n  /**\r\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PAYLOAD_TOO_LARGE\"] = 413] = \"PAYLOAD_TOO_LARGE\";\n  /**\r\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\r\n   * in which case it should be converted to a POST request.\r\n   * Called \"Request-URI Too Long\" previously.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"URI_TOO_LONG\"] = 414] = \"URI_TOO_LONG\";\n  /**\r\n   * The request entity has a media type which the server or resource does not support.\r\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"UNSUPPORTED_MEDIA_TYPE\"] = 415] = \"UNSUPPORTED_MEDIA_TYPE\";\n  /**\r\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\r\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\r\n   * Called \"Requested Range Not Satisfiable\" previously.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"RANGE_NOT_SATISFIABLE\"] = 416] = \"RANGE_NOT_SATISFIABLE\";\n  /**\r\n   * The server cannot meet the requirements of the Expect request-header field.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"EXPECTATION_FAILED\"] = 417] = \"EXPECTATION_FAILED\";\n  /**\r\n   * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\r\n   * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\r\n   * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"I_AM_A_TEAPOT\"] = 418] = \"I_AM_A_TEAPOT\";\n  /**\r\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"MISDIRECTED_REQUEST\"] = 421] = \"MISDIRECTED_REQUEST\";\n  /**\r\n   * The request was well-formed but was unable to be followed due to semantic errors.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"UNPROCESSABLE_ENTITY\"] = 422] = \"UNPROCESSABLE_ENTITY\";\n  /**\r\n   * The resource that is being accessed is locked.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"LOCKED\"] = 423] = \"LOCKED\";\n  /**\r\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"FAILED_DEPENDENCY\"] = 424] = \"FAILED_DEPENDENCY\";\n  /**\r\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"UPGRADE_REQUIRED\"] = 426] = \"UPGRADE_REQUIRED\";\n  /**\r\n   * The origin server requires the request to be conditional.\r\n   * Intended to prevent \"the 'lost update' problem, where a client\r\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\r\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PRECONDITION_REQUIRED\"] = 428] = \"PRECONDITION_REQUIRED\";\n  /**\r\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\n  /**\r\n   * The server is unwilling to process the request because either an individual header field,\r\n   * or all the header fields collectively, are too large.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"REQUEST_HEADER_FIELDS_TOO_LARGE\"] = 431] = \"REQUEST_HEADER_FIELDS_TOO_LARGE\";\n  /**\r\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\r\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"UNAVAILABLE_FOR_LEGAL_REASONS\"] = 451] = \"UNAVAILABLE_FOR_LEGAL_REASONS\";\n  /**\r\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\n  /**\r\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\r\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NOT_IMPLEMENTED\"] = 501] = \"NOT_IMPLEMENTED\";\n  /**\r\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"BAD_GATEWAY\"] = 502] = \"BAD_GATEWAY\";\n  /**\r\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\r\n   * Generally, this is a temporary state.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"SERVICE_UNAVAILABLE\"] = 503] = \"SERVICE_UNAVAILABLE\";\n  /**\r\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"GATEWAY_TIMEOUT\"] = 504] = \"GATEWAY_TIMEOUT\";\n  /**\r\n   * The server does not support the HTTP protocol version used in the request\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"HTTP_VERSION_NOT_SUPPORTED\"] = 505] = \"HTTP_VERSION_NOT_SUPPORTED\";\n  /**\r\n   * Transparent content negotiation for the request results in a circular reference.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"VARIANT_ALSO_NEGOTIATES\"] = 506] = \"VARIANT_ALSO_NEGOTIATES\";\n  /**\r\n   * The server is unable to store the representation needed to complete the request.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"INSUFFICIENT_STORAGE\"] = 507] = \"INSUFFICIENT_STORAGE\";\n  /**\r\n   * The server detected an infinite loop while processing the request.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"LOOP_DETECTED\"] = 508] = \"LOOP_DETECTED\";\n  /**\r\n   * Further extensions to the request are required for the server to fulfill it.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NOT_EXTENDED\"] = 510] = \"NOT_EXTENDED\";\n  /**\r\n   * The client needs to authenticate to gain network access.\r\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\r\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NETWORK_AUTHENTICATION_REQUIRED\"] = 511] = \"NETWORK_AUTHENTICATION_REQUIRED\";\n})(STATUS_CODE || (STATUS_CODE = {})); // IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n\n/* tslint:disable */\n\n\nvar VERSION = {\n  \"commitHash\": \"a8e9548e650215186f661033b59299ace72c9ee6\",\n  \"version\": \"9.2.0\"\n};\n/* tslint:enable */\n\n/**\r\n * @packageDocumentation\r\n * @module @taquito/http-utils\r\n */\n// tslint:disable: strict-type-predicates\n\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null; // tslint:enable: strict-type-predicates\n\nvar XMLHttpRequestCTOR = isNode ? require('xhr2-cookies').XMLHttpRequest : XMLHttpRequest;\nvar defaultTimeout = 30000;\n\nvar HttpResponseError =\n/** @class */\nfunction () {\n  function HttpResponseError(message, status, statusText, body, url) {\n    this.message = message;\n    this.status = status;\n    this.statusText = statusText;\n    this.body = body;\n    this.url = url;\n    this.name = 'HttpResponse';\n  }\n\n  return HttpResponseError;\n}();\n\nvar HttpRequestFailed =\n/** @class */\nfunction () {\n  function HttpRequestFailed(url, innerEvent) {\n    this.url = url;\n    this.innerEvent = innerEvent;\n    this.name = 'HttpRequestFailed';\n    this.message = \"Request to \" + url + \" failed\";\n  }\n\n  return HttpRequestFailed;\n}();\n\nvar HttpBackend =\n/** @class */\nfunction () {\n  function HttpBackend() {}\n\n  HttpBackend.prototype.serialize = function (obj) {\n    if (!obj) {\n      return '';\n    }\n\n    var str = [];\n\n    var _loop_1 = function (p) {\n      if (obj.hasOwnProperty(p) && typeof obj[p] !== 'undefined') {\n        var prop = typeof obj[p].toJSON === 'function' ? obj[p].toJSON() : obj[p]; // query arguments can have no value so we need some way of handling that\n        // example https://domain.com/query?all\n\n        if (prop === null) {\n          str.push(encodeURIComponent(p));\n          return \"continue\";\n        } // another use case is multiple arguments with the same name\n        // they are passed as array\n\n\n        if (Array.isArray(prop)) {\n          prop.forEach(function (item) {\n            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(item));\n          });\n          return \"continue\";\n        }\n\n        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(prop));\n      }\n    };\n\n    for (var p in obj) {\n      _loop_1(p);\n    }\n\n    var serialized = str.join('&');\n\n    if (serialized) {\n      return \"?\" + serialized;\n    } else {\n      return '';\n    }\n  };\n\n  HttpBackend.prototype.createXHR = function () {\n    return new XMLHttpRequestCTOR();\n  };\n  /**\r\n   *\r\n   * @param options contains options to be passed for the HTTP request (url, method and timeout)\r\n   */\n\n\n  HttpBackend.prototype.createRequest = function (_a, data) {\n    var _this = this;\n\n    var url = _a.url,\n        method = _a.method,\n        timeout = _a.timeout,\n        query = _a.query,\n        _b = _a.headers,\n        headers = _b === void 0 ? {} : _b,\n        _c = _a.json,\n        json = _c === void 0 ? true : _c,\n        _d = _a.mimeType,\n        mimeType = _d === void 0 ? undefined : _d;\n    return new Promise(function (resolve, reject) {\n      var request = _this.createXHR();\n\n      request.open(method || 'GET', \"\" + url + _this.serialize(query));\n\n      if (!headers['Content-Type']) {\n        request.setRequestHeader('Content-Type', 'application/json');\n      }\n\n      if (mimeType) {\n        request.overrideMimeType(\"\" + mimeType);\n      }\n\n      for (var k in headers) {\n        request.setRequestHeader(k, headers[k]);\n      }\n\n      request.timeout = timeout || defaultTimeout;\n\n      request.onload = function () {\n        if (this.status >= 200 && this.status < 300) {\n          if (json) {\n            try {\n              resolve(JSON.parse(request.response));\n            } catch (ex) {\n              reject(new Error(\"Unable to parse response: \" + request.response));\n            }\n          } else {\n            resolve(request.response);\n          }\n        } else {\n          reject(new HttpResponseError(\"Http error response: (\" + this.status + \") \" + request.response, this.status, request.statusText, request.response, url));\n        }\n      };\n\n      request.ontimeout = function () {\n        reject(new Error(\"Request timed out after: \" + request.timeout + \"ms\"));\n      };\n\n      request.onerror = function (err) {\n        reject(new HttpRequestFailed(url, err));\n      };\n\n      if (data) {\n        var dataStr = JSON.stringify(data);\n        request.send(dataStr);\n      } else {\n        request.send();\n      }\n    });\n  };\n\n  return HttpBackend;\n}();\n\nexport { HttpBackend, HttpRequestFailed, HttpResponseError, STATUS_CODE, VERSION };","map":{"version":3,"sources":["../src/status_code.ts","../src/version.ts","../src/taquito-http-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Hypertext Transfer Protocol (HTTP) response status codes.\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\n */\nexport enum STATUS_CODE {\n  /**\n   * The server has received the request headers and the client should proceed to send the request body\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\n   */\n  CONTINUE = 100,\n\n  /**\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\n   */\n  SWITCHING_PROTOCOLS = 101,\n\n  /**\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\n   * This prevents the client from timing out and assuming the request was lost.\n   */\n  PROCESSING = 102,\n\n  /**\n   * Standard response for successful HTTP requests.\n   * The actual response will depend on the request method used.\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\n   */\n  OK = 200,\n\n  /**\n   * The request has been fulfilled, resulting in the creation of a new resource.\n   */\n  CREATED = 201,\n\n  /**\n   * The request has been accepted for processing, but the processing has not been completed.\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n   */\n  ACCEPTED = 202,\n\n  /**\n   * SINCE HTTP/1.1\n   * The server is a transforming proxy that received a 200 OK from its origin,\n   * but is returning a modified version of the origin's response.\n   */\n  NON_AUTHORITATIVE_INFORMATION = 203,\n\n  /**\n   * The server successfully processed the request and is not returning any content.\n   */\n  NO_CONTENT = 204,\n\n  /**\n   * The server successfully processed the request, but is not returning any content.\n   * Unlike a 204 response, this response requires that the requester reset the document view.\n   */\n  RESET_CONTENT = 205,\n\n  /**\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\n   * or split a download into multiple simultaneous streams.\n   */\n  PARTIAL_CONTENT = 206,\n\n  /**\n   * The message body that follows is an XML message and can contain a number of separate response codes,\n   * depending on how many sub-requests were made.\n   */\n  MULTI_STATUS = 207,\n\n  /**\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\n   * and are not being included again.\n   */\n  ALREADY_REPORTED = 208,\n\n  /**\n   * The server has fulfilled a request for the resource,\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n   */\n  IM_USED = 226,\n\n  /**\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n   * For example, this code could be used to present multiple video format options,\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\n   */\n  MULTIPLE_CHOICES = 300,\n\n  /**\n   * This and all future requests should be directed to the given URI.\n   */\n  MOVED_PERMANENTLY = 301,\n\n  /**\n   * This is an example of industry practice contradicting the standard.\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\n   * use the 302 status code as if it were the 303.\n   */\n  FOUND = 302,\n\n  /**\n   * SINCE HTTP/1.1\n   * The response to the request can be found under another URI using a GET method.\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\n   * the server has received the data and should issue a redirect with a separate GET message.\n   */\n  SEE_OTHER = 303,\n\n  /**\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\n   */\n  NOT_MODIFIED = 304,\n\n  /**\n   * SINCE HTTP/1.1\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\n   */\n  USE_PROXY = 305,\n\n  /**\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\n   */\n  SWITCH_PROXY = 306,\n\n  /**\n   * SINCE HTTP/1.1\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\n   * For example, a POST request should be repeated using another POST request.\n   */\n  TEMPORARY_REDIRECT = 307,\n\n  /**\n   * The request and all future requests should be repeated using another URI.\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\n   */\n  PERMANENT_REDIRECT = 308,\n\n  /**\n   * The server cannot or will not process the request due to an apparent client error\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n   */\n  BAD_REQUEST = 400,\n\n  /**\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n   */\n  UNAUTHORIZED = 401,\n\n  /**\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\n   */\n  PAYMENT_REQUIRED = 402,\n\n  /**\n   * The request was valid, but the server is refusing action.\n   * The user might not have the necessary permissions for a resource.\n   */\n  FORBIDDEN = 403,\n\n  /**\n   * The requested resource could not be found but may be available in the future.\n   * Subsequent requests by the client are permissible.\n   */\n  NOT_FOUND = 404,\n\n  /**\n   * A request method is not supported for the requested resource;\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\n   */\n  METHOD_NOT_ALLOWED = 405,\n\n  /**\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n   */\n  NOT_ACCEPTABLE = 406,\n\n  /**\n   * The client must first authenticate itself with the proxy.\n   */\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n\n  /**\n   * The server timed out waiting for the request.\n   * According to HTTP specifications:\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\n   */\n  REQUEST_TIMEOUT = 408,\n\n  /**\n   * Indicates that the request could not be processed because of conflict in the request,\n   * such as an edit conflict between multiple simultaneous updates.\n   */\n  CONFLICT = 409,\n\n  /**\n   * Indicates that the resource requested is no longer available and will not be available again.\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\n   * Clients such as search engines should remove the resource from their indices.\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\n   */\n  GONE = 410,\n\n  /**\n   * The request did not specify the length of its content, which is required by the requested resource.\n   */\n  LENGTH_REQUIRED = 411,\n\n  /**\n   * The server does not meet one of the preconditions that the requester put on the request.\n   */\n  PRECONDITION_FAILED = 412,\n\n  /**\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\n   */\n  PAYLOAD_TOO_LARGE = 413,\n\n  /**\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\n   * in which case it should be converted to a POST request.\n   * Called \"Request-URI Too Long\" previously.\n   */\n  URI_TOO_LONG = 414,\n\n  /**\n   * The request entity has a media type which the server or resource does not support.\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n   */\n  UNSUPPORTED_MEDIA_TYPE = 415,\n\n  /**\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\n   * Called \"Requested Range Not Satisfiable\" previously.\n   */\n  RANGE_NOT_SATISFIABLE = 416,\n\n  /**\n   * The server cannot meet the requirements of the Expect request-header field.\n   */\n  EXPECTATION_FAILED = 417,\n\n  /**\n   * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\n   * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\n   * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\n   */\n  I_AM_A_TEAPOT = 418,\n\n  /**\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\n   */\n  MISDIRECTED_REQUEST = 421,\n\n  /**\n   * The request was well-formed but was unable to be followed due to semantic errors.\n   */\n  UNPROCESSABLE_ENTITY = 422,\n\n  /**\n   * The resource that is being accessed is locked.\n   */\n  LOCKED = 423,\n\n  /**\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\n   */\n  FAILED_DEPENDENCY = 424,\n\n  /**\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n   */\n  UPGRADE_REQUIRED = 426,\n\n  /**\n   * The origin server requires the request to be conditional.\n   * Intended to prevent \"the 'lost update' problem, where a client\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\n   */\n  PRECONDITION_REQUIRED = 428,\n\n  /**\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\n   */\n  TOO_MANY_REQUESTS = 429,\n\n  /**\n   * The server is unwilling to process the request because either an individual header field,\n   * or all the header fields collectively, are too large.\n   */\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431,\n\n  /**\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\n   */\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451,\n\n  /**\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n   */\n  INTERNAL_SERVER_ERROR = 500,\n\n  /**\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\n   */\n  NOT_IMPLEMENTED = 501,\n\n  /**\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n   */\n  BAD_GATEWAY = 502,\n\n  /**\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\n   * Generally, this is a temporary state.\n   */\n  SERVICE_UNAVAILABLE = 503,\n\n  /**\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n   */\n  GATEWAY_TIMEOUT = 504,\n\n  /**\n   * The server does not support the HTTP protocol version used in the request\n   */\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n\n  /**\n   * Transparent content negotiation for the request results in a circular reference.\n   */\n  VARIANT_ALSO_NEGOTIATES = 506,\n\n  /**\n   * The server is unable to store the representation needed to complete the request.\n   */\n  INSUFFICIENT_STORAGE = 507,\n\n  /**\n   * The server detected an infinite loop while processing the request.\n   */\n  LOOP_DETECTED = 508,\n\n  /**\n   * Further extensions to the request are required for the server to fulfill it.\n   */\n  NOT_EXTENDED = 510,\n\n  /**\n   * The client needs to authenticate to gain network access.\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\n   */\n  NETWORK_AUTHENTICATION_REQUIRED = 511,\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"commitHash\": \"a8e9548e650215186f661033b59299ace72c9ee6\",\n    \"version\": \"9.2.0\"\n};\n/* tslint:enable */\n","/**\n * @packageDocumentation\n * @module @taquito/http-utils\n */\n\nimport { STATUS_CODE } from './status_code';\n\n// tslint:disable: strict-type-predicates\nconst isNode =\n  typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\n// tslint:enable: strict-type-predicates\n\nconst XMLHttpRequestCTOR = isNode ? require('xhr2-cookies').XMLHttpRequest : XMLHttpRequest;\n\nexport * from './status_code';\nexport { VERSION } from './version';\n\nconst defaultTimeout = 30000;\n\nexport interface HttpRequestOptions {\n  url: string;\n  method?: 'GET' | 'POST';\n  timeout?: number;\n  json?: boolean;\n  query?: { [key: string]: any };\n  headers?: { [key: string]: string };\n  mimeType?: string;\n}\n\nexport class HttpResponseError implements Error {\n  public name = 'HttpResponse';\n\n  constructor(\n    public message: string,\n    public status: STATUS_CODE,\n    public statusText: string,\n    public body: string,\n    public url: string\n  ) {}\n}\n\nexport class HttpRequestFailed implements Error {\n  public name = 'HttpRequestFailed';\n  public message: string;\n\n  constructor(public url: string, public innerEvent: any) {\n    this.message = `Request to ${url} failed`;\n  }\n}\n\nexport class HttpBackend {\n  protected serialize(obj?: { [key: string]: any }) {\n    if (!obj) {\n      return '';\n    }\n\n    const str = [];\n    for (const p in obj) {\n      if (obj.hasOwnProperty(p) && typeof obj[p] !== 'undefined') {\n        const prop = typeof obj[p].toJSON === 'function' ? obj[p].toJSON() : obj[p];\n        // query arguments can have no value so we need some way of handling that\n        // example https://domain.com/query?all\n        if (prop === null) {\n          str.push(encodeURIComponent(p));\n          continue;\n        }\n        // another use case is multiple arguments with the same name\n        // they are passed as array\n        if (Array.isArray(prop)) {\n          prop.forEach((item) => {\n            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(item));\n          });\n          continue;\n        }\n        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(prop));\n      }\n    }\n    const serialized = str.join('&');\n    if (serialized) {\n      return `?${serialized}`;\n    } else {\n      return '';\n    }\n  }\n\n  protected createXHR(): XMLHttpRequest {\n    return new XMLHttpRequestCTOR();\n  }\n\n  /**\n   *\n   * @param options contains options to be passed for the HTTP request (url, method and timeout)\n   */\n  createRequest<T>(\n    {\n      url,\n      method,\n      timeout,\n      query,\n      headers = {},\n      json = true,\n      mimeType = undefined,\n    }: HttpRequestOptions,\n    data?: {}\n  ) {\n    return new Promise<T>((resolve, reject) => {\n      const request = this.createXHR();\n      request.open(method || 'GET', `${url}${this.serialize(query)}`);\n      if (!headers['Content-Type']) {\n        request.setRequestHeader('Content-Type', 'application/json');\n      }\n      if (mimeType) {\n        request.overrideMimeType(`${mimeType}`);\n      }\n      for (const k in headers) {\n        request.setRequestHeader(k, headers[k]);\n      }\n      request.timeout = timeout || defaultTimeout;\n      request.onload = function () {\n        if (this.status >= 200 && this.status < 300) {\n          if (json) {\n            try {\n              resolve(JSON.parse(request.response));\n            } catch (ex) {\n              reject(new Error(`Unable to parse response: ${request.response}`));\n            }\n          } else {\n            resolve(request.response);\n          }\n        } else {\n          reject(\n            new HttpResponseError(\n              `Http error response: (${this.status}) ${request.response}`,\n              this.status as STATUS_CODE,\n              request.statusText,\n              request.response,\n              url\n            )\n          );\n        }\n      };\n\n      request.ontimeout = function () {\n        reject(new Error(`Request timed out after: ${request.timeout}ms`));\n      };\n\n      request.onerror = function (err) {\n        reject(new HttpRequestFailed(url, err));\n      };\n\n      if (data) {\n        const dataStr = JSON.stringify(data);\n        request.send(dataStr);\n      } else {\n        request.send();\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}