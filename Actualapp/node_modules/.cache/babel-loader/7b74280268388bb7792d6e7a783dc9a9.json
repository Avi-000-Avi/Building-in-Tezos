{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageKey } from '..';\nimport { StorageManager } from './StorageManager';\nimport { PermissionValidator } from './PermissionValidator';\n/**\n * @internalapi\n *\n * The PermissionManager provides CRUD functionality for permission entities and persists them to the provided storage.\n */\n\nexport class PermissionManager {\n  constructor(storage) {\n    this.storageManager = new StorageManager(storage, StorageKey.PERMISSION_LIST);\n  }\n\n  getPermissions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getAll();\n    });\n  }\n\n  getPermission(accountIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getOne(permission => permission.accountIdentifier === accountIdentifier);\n    });\n  }\n\n  addPermission(permissionInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.addOne(permissionInfo, permission => permission.accountIdentifier === permissionInfo.accountIdentifier);\n    });\n  }\n\n  removePermission(accountIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(permissionInfo => permissionInfo.accountIdentifier === accountIdentifier);\n    });\n  }\n\n  removePermissions(accountIdentifiers) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(permission => accountIdentifiers.includes(permission.accountIdentifier));\n    });\n  }\n\n  removeAllPermissions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.removeAll();\n    });\n  }\n\n  hasPermission(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return PermissionValidator.hasPermission(message, this.getPermission.bind(this), this.getPermissions.bind(this));\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/managers/PermissionManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAiC,UAAjC,QAAmD,IAAnD;AAEA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,mBAAT,QAAoC,uBAApC;AAEA;;;;AAIG;;AACH,OAAM,MAAO,iBAAP,CAAwB;AAG5B,EAAA,WAAA,CAAY,OAAZ,EAA4B;AAC1B,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB,OAAnB,EAA4B,UAAU,CAAC,eAAvC,CAAtB;AACD;;AAEY,EAAA,cAAc,GAAA;;AACzB,aAAO,KAAK,cAAL,CAAoB,MAApB,EAAP;AACD,K;AAAA;;AAEY,EAAA,aAAa,CAAC,iBAAD,EAA0B;;AAClD,aAAO,KAAK,cAAL,CAAoB,MAApB,CACJ,UAAD,IAAgC,UAAU,CAAC,iBAAX,KAAiC,iBAD5D,CAAP;AAGD,K;AAAA;;AAEY,EAAA,aAAa,CAAC,cAAD,EAA+B;;AACvD,aAAO,KAAK,cAAL,CAAoB,MAApB,CACL,cADK,EAEJ,UAAD,IACE,UAAU,CAAC,iBAAX,KAAiC,cAAc,CAAC,iBAH7C,CAAP;AAKD,K;AAAA;;AAEY,EAAA,gBAAgB,CAAC,iBAAD,EAA0B;;AACrD,aAAO,KAAK,cAAL,CAAoB,MAApB,CACJ,cAAD,IAAoC,cAAc,CAAC,iBAAf,KAAqC,iBADpE,CAAP;AAGD,K;AAAA;;AAEY,EAAA,iBAAiB,CAAC,kBAAD,EAA6B;;AACzD,aAAO,KAAK,cAAL,CAAoB,MAApB,CAA4B,UAAD,IAChC,kBAAkB,CAAC,QAAnB,CAA4B,UAAU,CAAC,iBAAvC,CADK,CAAP;AAGD,K;AAAA;;AAEY,EAAA,oBAAoB,GAAA;;AAC/B,aAAO,KAAK,cAAL,CAAoB,SAApB,EAAP;AACD,K;AAAA;;AAEY,EAAA,aAAa,CAAC,OAAD,EAAuB;;AAC/C,aAAO,mBAAmB,CAAC,aAApB,CACL,OADK,EAEL,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAFK,EAGL,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAHK,CAAP;AAKD,K;AAAA;;AA/C2B","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageKey } from '..';\nimport { StorageManager } from './StorageManager';\nimport { PermissionValidator } from './PermissionValidator';\n/**\n * @internalapi\n *\n * The PermissionManager provides CRUD functionality for permission entities and persists them to the provided storage.\n */\nexport class PermissionManager {\n    constructor(storage) {\n        this.storageManager = new StorageManager(storage, StorageKey.PERMISSION_LIST);\n    }\n    getPermissions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getAll();\n        });\n    }\n    getPermission(accountIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getOne((permission) => permission.accountIdentifier === accountIdentifier);\n        });\n    }\n    addPermission(permissionInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.addOne(permissionInfo, (permission) => permission.accountIdentifier === permissionInfo.accountIdentifier);\n        });\n    }\n    removePermission(accountIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((permissionInfo) => permissionInfo.accountIdentifier === accountIdentifier);\n        });\n    }\n    removePermissions(accountIdentifiers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((permission) => accountIdentifiers.includes(permission.accountIdentifier));\n        });\n    }\n    removeAllPermissions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.removeAll();\n        });\n    }\n    hasPermission(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return PermissionValidator.hasPermission(message, this.getPermission.bind(this), this.getPermissions.bind(this));\n        });\n    }\n}\n//# sourceMappingURL=PermissionManager.js.map"]},"metadata":{},"sourceType":"module"}