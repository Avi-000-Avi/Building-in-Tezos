{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defaultValues } from '../types/storage/StorageKeyReturnDefaults';\n/**\n * @internalapi\n *\n * A storage that can be used in chrome extensions\n */\n\nexport class ChromeStorage {\n  static isSupported() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return typeof window !== 'undefined' && typeof chrome !== 'undefined' && Boolean(chrome) && Boolean(chrome.runtime) && Boolean(chrome.runtime.id);\n    });\n  }\n\n  get(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        chrome.storage.local.get(null, storageContent => {\n          if (storageContent[key]) {\n            resolve(storageContent[key]);\n          } else {\n            if (typeof defaultValues[key] === 'object') {\n              resolve(JSON.parse(JSON.stringify(defaultValues[key])));\n            } else {\n              resolve(defaultValues[key]);\n            }\n          }\n        });\n      });\n    });\n  }\n\n  set(key, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        chrome.storage.local.set({\n          [key]: value\n        }, () => {\n          resolve();\n        });\n      });\n    });\n  }\n\n  delete(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        chrome.storage.local.set({\n          [key]: undefined\n        }, () => {\n          resolve();\n        });\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/storage/ChromeStorage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,aAAT,QAA8B,2CAA9B;AAGA;;;;AAIG;;AACH,OAAM,MAAO,aAAP,CAAoB;AACO,SAAX,WAAW,GAAA;;AAC7B,aACE,OAAO,MAAP,KAAkB,WAAlB,IACA,OAAO,MAAP,KAAkB,WADlB,IAEA,OAAO,CAAC,MAAD,CAFP,IAGA,OAAO,CAAC,MAAM,CAAC,OAAR,CAHP,IAIA,OAAO,CAAC,MAAM,CAAC,OAAP,CAAe,EAAhB,CALT;AAOD,K;AAAA;;AAEY,EAAA,GAAG,CAAuB,GAAvB,EAA6B;;AAC3C,aAAO,IAAI,OAAJ,CAAa,OAAD,IAAY;AAC7B,QAAA,MAAM,CAAC,OAAP,CAAe,KAAf,CAAqB,GAArB,CAAyB,IAAzB,EAAgC,cAAD,IAAmB;AAChD,cAAI,cAAc,CAAC,GAAD,CAAlB,EAAyB;AACvB,YAAA,OAAO,CAAC,cAAc,CAAC,GAAD,CAAf,CAAP;AACD,WAFD,MAEO;AACL,gBAAI,OAAO,aAAa,CAAC,GAAD,CAApB,KAA8B,QAAlC,EAA4C;AAC1C,cAAA,OAAO,CAAC,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,aAAa,CAAC,GAAD,CAA5B,CAAX,CAAD,CAAP;AACD,aAFD,MAEO;AACL,cAAA,OAAO,CAAC,aAAa,CAAC,GAAD,CAAd,CAAP;AACD;AACF;AACF,SAVD;AAWD,OAZM,CAAP;AAaD,K;AAAA;;AAEY,EAAA,GAAG,CAAuB,GAAvB,EAA+B,KAA/B,EAA6D;;AAC3E,aAAO,IAAI,OAAJ,CAAa,OAAD,IAAY;AAC7B,QAAA,MAAM,CAAC,OAAP,CAAe,KAAf,CAAqB,GAArB,CAAyB;AAAE,WAAC,GAAD,GAAO;AAAT,SAAzB,EAA2C,MAAK;AAC9C,UAAA,OAAO;AACR,SAFD;AAGD,OAJM,CAAP;AAKD,K;AAAA;;AAEY,EAAA,MAAM,CAAuB,GAAvB,EAA6B;;AAC9C,aAAO,IAAI,OAAJ,CAAa,OAAD,IAAY;AAC7B,QAAA,MAAM,CAAC,OAAP,CAAe,KAAf,CAAqB,GAArB,CAAyB;AAAE,WAAC,GAAD,GAAO;AAAT,SAAzB,EAA+C,MAAK;AAClD,UAAA,OAAO;AACR,SAFD;AAGD,OAJM,CAAP;AAKD,K;AAAA;;AAzCuB","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defaultValues } from '../types/storage/StorageKeyReturnDefaults';\n/**\n * @internalapi\n *\n * A storage that can be used in chrome extensions\n */\nexport class ChromeStorage {\n    static isSupported() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (typeof window !== 'undefined' &&\n                typeof chrome !== 'undefined' &&\n                Boolean(chrome) &&\n                Boolean(chrome.runtime) &&\n                Boolean(chrome.runtime.id));\n        });\n    }\n    get(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => {\n                chrome.storage.local.get(null, (storageContent) => {\n                    if (storageContent[key]) {\n                        resolve(storageContent[key]);\n                    }\n                    else {\n                        if (typeof defaultValues[key] === 'object') {\n                            resolve(JSON.parse(JSON.stringify(defaultValues[key])));\n                        }\n                        else {\n                            resolve(defaultValues[key]);\n                        }\n                    }\n                });\n            });\n        });\n    }\n    set(key, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => {\n                chrome.storage.local.set({ [key]: value }, () => {\n                    resolve();\n                });\n            });\n        });\n    }\n    delete(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => {\n                chrome.storage.local.set({ [key]: undefined }, () => {\n                    resolve();\n                });\n            });\n        });\n    }\n}\n//# sourceMappingURL=ChromeStorage.js.map"]},"metadata":{},"sourceType":"module"}